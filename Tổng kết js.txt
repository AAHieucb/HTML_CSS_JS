## JS
# Basic
script tới file js ở cuối page để đảm bảo mọi component đã load xong, hoặc dùng defer

-> Thao tác với chuột clientX, clientY
window.scrollTo(0, document.body.scrollHeight); để scroll xuống vị trí dưới cùng của thẻ body
BigInt trong JS

-> Thao tác với file json:
Có thể dùng JSON làm nguồn cung data, lưu file config xong import vào file js dùng trực tiếp dưới dạng object
Có thể dùng JSON lưu function bằng function constructor

-> Tạo unique id với Date.now() trả ra milisecond từ epoch time nếu k quá khắt khe vì vẫn có xs trùng nếu có quá nhiều request lấy id cùng 1 lúc

-> Dùng biến global 
BOM(Browser Object Model) là thứ cho phép ta thao tác với browser như cookies, history, window, screen, navigator, location.
Có thể xem trạng thái load của document, tình trạng pin, tốc độ internet, onerror để handle window error, có chuyển tab, bật devtool



# URLSearchParams và URL
-> const myURL = new URL('https://example.com/path?name=chatgpt&age=25');
myURL.hostname => "example.com"
myURL.pathname => "/path"
myURL.search => "?name=chatgpt&age=25"
myURL.searchParams là URLSearchParams

-> const params = new URLSearchParams('?name=chatgpt&age=25');
params.get('name')
params.set('name', 'gpt-4');
params.append('lang', 'en'); => append sẽ thêm value vào key như mảng, set sẽ thay thế giá trị nếu đã có
params.getAll("lang");

-> Xử lý XSS: hiển thị user input trên web: Trên màn hình gán textContent là xong, trên url dùng encodeURIComponent là xong.




# Thao tác với string
-> VD string find 1 string khác: 
str1.trim().replaceAll(",","").replaceAll(".","").toLowerCase().includes(str2.trim().replaceAll(",","").replaceAll(".","").toLowerCase());
Thay vì dùng str1 + str2, nên dùng `${str1}${str2}`

-> Regexp: 
.: Khớp với bất kỳ ký tự nào (trừ newline).
^: Khớp với đầu chuỗi.
$: Khớp với cuối chuỗi.
*: Khớp với 0 hoặc nhiều lần của ký tự trước.
+: Khớp với 1 hoặc nhiều lần của ký tự trước.
?: Khớp với 0 hoặc 1 lần của ký tự trước.
{n}: Khớp với đúng n lần của ký tự trước. {2,} là từ 2 trở lên
[]: Khớp với bất kỳ ký tự nào trong dấu ngoặc vuông.
|: Hoặc (OR).
VD lọc mail: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

-> padEnd, padStart

-> Check string có thoả mãn 1 regexp hay không: 
const str = "Hello, World!";
const regex = /Hello/i; // Biểu thức chính quy để kiểm tra "Hello"
const isMatch = regex.test(str); // Kiểm tra



# Dùng mảng và object và hàm 
Chuyển từ string sang array: [..."Hello"];
Cách khác lấy params của function ít dùng là dùng for(var x of arguments) {<>}
Các hàm biến hóa mạnh: splice, copyWithin, flat

-> Tạo array:
Array(10).fill(undefined)
Array.from({ length: 10 });
VD: const numbers = [1, 2, 3];
const squares = Array.from(numbers, x => x * x);
console.log(squares); // [1, 4, 9]

Có thể ss 2 array chấp cả nested với: JSON.stringify(a1) == JSON.stringify(a2) => trừ TH undefined và null se coi là giống nhau

-> Sort array giảm dần: arr.sort(function(a, b){return b-a});
Cách nhớ: trả true thì giữ thứ tự(a, b) tức a < b, trả false thì đổi b < a

-> Cách shuffle 1 array
Lodash có hàm shuffle
Dùng 0.5 - Math.random() k hoàn toàn random nhưng có thể dùng nếu k yêu cầu khắt khe
Dùng Fisher-Yates alg, cơ chế là sinh số random nguyên để hoán đổi vị trí các phần tử trong array

-> Vòng for of chỉ dùng với các biến iterable. Vd k dùng được với object vì object không iterable, phải dùng hàm Object.entries.
Vòng for in dùng được với biến và mảng bình thường nhưng 1 số kiểu IterableIterator như entries, values của Map hay Set lại k dùng được
forEach chỉ dùng cho mảng vì nó thuộc Array.prototype

-> Hàm map tạo ra 1 mảng mới và k thay đổi trên mảng cũ nên phải gán bằng. 
2 tham số: 1 là function(currentValue, index, array), 2 là thisValue là giá trị pass vào function để dùng từ khóa this. Tuy nhiên để dùng được đối số 2 thì đối số 1 k được dùng arrow function, nếu k this sẽ luôn là cái bao ngoài hàm. 
VD: var object = { id: 1 }; const item = [1,2,3].map(function(currentVal, index, arr){ return currentVal + this.id + arr[index]; }, object); // [3, 5, 7]

-> Dùng tagged template
function tag(strings, ...values) {
  console.log("Chuỗi tĩnh:", strings);
  console.log("Giá trị nội suy:", values);
  return "Kết quả được tùy chỉnh!";
}
const name = "Minh";
const age = 25;
const result = tag`Xin chào ${name}, bạn ${age} tuổi.`;
console.log(result);
// Output:
// Chuỗi tĩnh: [ 'Xin chào ', ', bạn ', ' tuổi.' ]
// Giá trị nội suy: [ 'Minh', 25 ]
// Kết quả được tùy chỉnh!



# Dùng postMessage
Là API có sẵn giúp truyền message giữa trang web gốc với iframe dùng bên trong nó, hoặc mở 1 popup hay tab của web khác và truyền message giữa popup và web gốc khác host.

Bên gửi: targetWindow.postMessage(message, targetOrigin);
Bên nhận: window.addEventListener("message", function (event) {
  if (event.origin !== "http://localhost:8001/window-1") return;        
  alert(event.data);
});

window.opener giúp lấy trang gốc mở ra cửa sổ hiện tại
window.parent giúp lấy trang gốc chứa iframe hiện tại
=> Nhưng truy cập DOM phải cùng host vì browser có same site policy cản cả API và tương tác DOM. Muốn giao tiếp phải dùng postMessage



# Dùng Map thay if else và switch case:
if else là cấu trúc bậc thang
switch case nhanh hơn if else đáng kể khi số lượng điều kiện lớn. Mỗi điều kiện k phụ thuộc vào điều kiện trước đó nên thực hiện như mạch logic sẽ nhanh hơn.
=> Tuy nhiên trong Js khi muốn search theo key nên dùng new Map là nhanh nhất. Map là 1 instanceof Object nhưng sinh ra để search nhanh hơn, nên dùng thay thế



# Cơ chế WeakMap dọn rác
Các biến k thể truy cập được sẽ tự bị GC dọn. VD: user = { name: "John" }; user = null; thì object {name: "John"} k còn được ref bởi biến nào khác sẽ tự giải phóng vùng nhớ
GC sẽ tự được scheduled và dọn rác vào lúc rảnh.

-> WeakMap và WeakSet
Do cơ chế dọn rác, nếu mảng có 1 phần tử là 1 object chẳng hạn thì dù object mất reference nhưng mảng vẫn còn phần tử đó thì object vẫn k bị giải phóng vì vẫn refer được với array[index]. Điều này là đúng nhưng trong TH dùng map với set, có thể ta muốn nó tự động bị xóa với WeakMap, WeakSet
- WeakMap thì key buộc là object và khi reference đến object bởi 1 biến khác k còn thì sẽ tự bị xóa.
Do GC k rõ thời gian chạy nên k thể truy cập vào số lượng phần tử hay duyệt các phần tử của WeakMap. Chỉ có has delete get set. 
- WeakSet giống set nhưng chỉ nhận object, tự bị xóa khi k còn reference từ ngoài, cũng k hỗ trợ size keys hay các kiểu duyệt
VD 1 biến WeakMap lưu thông tin của người dùng, khi người dùng leave thì tự xóa, nếu dùng map bth phải xóa thủ công hoặc chờ biến map giải phóng. Tức là ta dùng khi cần dùng map với set, mà k cần dùng length hay duyệt, mất reference bên ngoài là tự xóa tối ưu bộ nhớ.



# Closure function
Function 1 return ra function 2, thì function 2 dùng biến khởi tạo trong function 1 được dù function 1 đã kết thúc, biến đó là 1 single instance phạm vi sẽ thuộc về function 2
Function trong 1 class, return 1 function khác. Biến this trong function sẽ k còn là class bao ngoài nữa, phải dùng bind hoặc arrow function để this dính sát cái bao nó

-> this mặc định global là window
Trong mọi TH, dùng arrow function thì this sẽ trỏ cái bao ngoài cái hiện tại(object, class, window,..)
bind call apply sẽ xác định rõ biến this nhưng vẫn cùi hơn arrow function
this dùng bth trong hàm or class sẽ trỏ vào đối tượng đó như 1 object có constructor
Truyền this vào sự kiện trong code html thì this là code thẻ tag đó
with(this) { ... }

-> Dùng call bind apply
Dùng bind có điểm lơi là return 1 function mới với giá trị biến this xác định mà có thể tái sử dụng gọi function đó nhiều lần
call và apply giống nhau chỉ khác cú pháp: o.call(this, args1, args2) và o.apply(this, [args1, args2]); là khi gọi mới gán giá trị this là gì, k thể tái sử dụng.



# Dùng sự kiện JS
Sự kiện hay dùng: https://freetuts.net/su-kien-event-trong-javascript-368.html
3 cách: dùng ở tag html; code js là element.onclick = () => { }; element.addEventListener("click", () => { });

-> onmouseenter khi hover vào element(dùng thay thế :hover tạo animation cho React được); onmouseover cũng tương tự nhưng điểm khác là onmouseenter k bubble bắn ra again khi mouse trỏ vào child element, onmouseover thì có.

-> addEventListener
Tham số 3 là useCapture, ngược với bubbling. Khi 1 event trigger luôn chạy theo thứ tự Capture phase rồi đến Bubbling phase, nó check sự kiện nào useCapture true sẽ xử lý trong capture phase, false sẽ chỉ xử lý bubbling phase. Nếu kxđ sẽ mặc định xử lý ở bubbling phase. Có thể dùng object { capture: true, once: true }

removeEventListener cũng chạy Capture phase trước rồi đến Bubbling phase. Tham số thứ 3 boolean tương tự.

passive: true => Báo là sẽ k chạy event.preventDefault() và browser có thể xử lý ngay lập tức, cải thiện hiệu suất. Mặc định hiệu suất bị giảm khi browser xử lý event vì luôn phải đợi xem event.preventDefault có được gọi hay không.



# OOP
Nếu có thể nên dùng class thay vì function hay object trong JS 
VD: 
function Animal() { this.name= "a"; }
Animal.prototype.test = () => { console.log("test"); }
Tương đương với:
class Animal {
  constructor(){ this.name = "a"; }
  test = () => { console.log("test"); }
}



# Tạo extension browser bằng JS
-> Để thêm extension vào browser: bật developer mode -> load unpacked folder chứa file manifest extension.

-> 1 extension cho browser cần tối thiểu 1 file manifest.json cung cấp thông tin mà thôi. Như v thì chưa làm gì cả, phải viết thêm các script chức năng:
Content script: là những đoạn mã sẽ chạy trên trang web đang xem -> dùng với "content_scripts"+"js"
Background script: thực hiện ngầm extension, nhận message từ content script or extension khác => dùng bằng "background"+"scripts"
UI Elements: thành phần giao diện người dùng thg là hộp thoại popup hiện ra khi ấn vào icon của extension => vd dùng với "browser_action"+"default_popup"
=> Background script bắt đầu thực hiện khi ta ấn vào biểu tượng extension, content script tự thực hiện khi ta load 1 trang web mới

persistent xđ trang background đc chạy như thế nào
Dùng "scripts":[".js"] or "page":".html" vói file html chỉ có 1 thẻ script thêm code js vào
default_popup dùng để hiển thị file html khi mở extension
js là danh sách các file js được inject vào trang web nên file js luôn trong 1 mảng còn html là ""
matches xác định trang web muốn thêm nội dung và0, dùng regexp: "*://*/*" sẽ dùng với mọi trang web



# Dùng FormData
-> Có thể upload multiple file lên server với tag <input type="file" multiple>
Nạp nội dung vào thẻ input -> tạo 1 form -> lấy nội dung files trong thẻ input -> nhét files đo vào form -> nhét nó vào phần body vói method POST lên server. VD:
var formData = new FormData();
var photos = document.querySelector("input[type='file'][multiple]");
formData.append('title', 'My Vegas Vacation');
formData.append('photos', photos.files);
fetch('https://example.com/posts', {
  method: 'POST',
  body: formData
})
.then(response => response.json())
.then(response => console.log('Success:', JSON.stringify(response)))
.catch(error => console.error('Error:', error));
=> refer tới "Projects / Tinkerbellgarden"



# Fetch API trong JS thuần
Dùng XMLHttpRequest có sẵn của JS ít dùng
Dùng fetch của JS được tích hợp sẵn trong browser. Check fetch có dùng được k với: if(!('fetch' in window)){ }

fetch('<link có dữ liệu cần xử lý>', {optional object}); VD object { method: POST, headers: {"Content-Type:application/<>; charset=UTF-8"}, body: '<foo=bar>' }
VD Để xác thực thông tin: đối số 2 thêm { credentials: "include(same-origin/ omit)" } => là đi kèm cookie; same-origin là gửi request cùng nhà, omit thì k cho trình duyệt gửi thông tin xác thực. VD:
fetch(url, { 
  credentials: 'include'; // include là có gửi kèm thông tin xác thực cookie
})

-> Các response.type: 
basic nếu ứng dụng gửi request cho server cùng nhà, k có giới hạn vc xem thông tin trên response. Hoặc request mode "no-cors" và phản hồi là 1 simple origin
cors: Khi yêu cầu cross origin và server đã cấu hình CORS để cho phép truy cập.
"opaqueredirect" hoặc "opaque": éo xem được response, chỉ xem được vài header cơ bản

-> Trong fetch có option mode:
cors: mặc định, cho phép yêu cầu từ một nguồn khác (cross-origin) và gửi kèm header CORS. Nếu server không cho phép yêu cầu từ nguồn đó, trình duyệt sẽ chặn phản hồi => luôn dùng
no-cors: gửi yêu cầu đến một nguồn khác mà không cần kiểm tra CORS nhưng sẽ không thể đọc response. Chỉ dùng cho các yêu cầu đến các API không hỗ trợ CORS.
same-origin: Chế độ này chỉ cho phép gửi yêu cầu đến cùng một nguồn (same-origin). Nếu gửi yêu cầu đến một nguồn khác thì sẽ bị chặn.



# Dùng yield
Dùng yield chạy 1 hàm * nhiều lần thì chạy liên tiếp, còn k có * thì yield trả lấy được gì.
Nếu function* có return thì nó sẽ kết thúc luôn nên có thể dùng return để dừng hàm * vĩnh viễn khi thỏa mãn đk gì nhưng giá trị return về sẽ k được lấy ra.
function* gọi là generator function
yield* dùng được với mọi type iterative
Có thể dùng vòng for để duyệt yield function sẽ chạy liên tiếp mà k cần gọi next. Đây cũng là cơ chế của redux-saga, k cần gọi next mà đưa vào loop duyệt liên tiếp



# Dùng promise 
Promise chỉ coi là kết thúc khi gọi resolve hoặc reject.
Gọi new Promise(<>) thì bên trong promise sẽ thực hiện bất đồng bộ ngay khi được gọi tới. Chú ý phân biệt điều này với var a = function() và bên trong function mới return new Promise thì promise sẽ k thực hiện ngay vì function k được thực hiện.

-> Promise all trả về mảng kết quả đúng thứ tự với mảng input truyền vào, 1 cái failed sẽ lỗi và dừng luôn. Bản chất nó nhận các promise và trả ra 1 promise mới. Nếu 1 promise con bị failed thì promise ngoài sẽ reject luôn, k lấy được kết quả các promise thành công còn lại nữa.
Promise.allSettled tương tự Promise.all nhưng trả hết, error 1 cái cũng k dừng 
Promise.race trả về cái đầu tiên bất kể thành công hay lỗi
Promise.any trả vể cái thành công đầu tiên, nếu tất cả đều lỗi mới trả lỗi

Chú ý gọi resolve(new Promsie(<hàm>)); chạy được đến resolve sẽ thực hiện hàm luôn

-> Chốt khi nào chạy promise:
Function trả ra promise thì khi gọi function sẽ thực hiện promise luôn. 
Khi 1 promise lồng nhiều promise bên trong kiểu new Promise(<promise lồng>) thì cái ngoài thực hiện sẽ thực hiện hết các cái Trong
Biến gán = new Promise luôn thì gọi ngay lập tức khi chạy tới
Function trả ra function con, fucntion con trả ra promise thì khi nào gọi function con mới chạy promise như bth



# setTimeout, setInterval, setImmediate
Nếu tham số 2 lơn hơn 2147483647 hoặc nhỏ hơn 1 thì sẽ tự động set về 1

-> Dùng setTimeout để sort => bỏ
const arr = [10, 50, 100, 500, 0, 200]; var arr1 = [];
function sortIt() {
  for (let i of arr) {
    setTimeout(()=> console.log(i), i);
    setTimeout(()=> {	
      arr1.push(i);
      arr.splice(arr.indexOf(i), 1);
      if(arr.length === 0)
        console.log(arr1);
     }, i);
  }
}

Vd: setTimeout(function(){
  alert("Chào mừng bạn đến với freetuts.net");
});
=> Thực hiện bất đồng bộ hàm sau 0s, thực tế nó k thực hiện ngay sau 0s mà phải chờ thực hiện Ct hiện tại đến khi stack trống để đẩy event vào và thực hiện callback event đó. Event Loop chỉ nhặt event từ queue vào stack khi stack trống.

-> Dùng setImmediate: tương tự setTimeout với 0s
setImmediate(<function>);
process.nextTick(<function>); => chỉ có trong NodeJS
Như nhau cả, chỉ là thứ tự thực hiện ưu tiên là process.nextTick > setImmediate > setTimeout 0s



# Other
-> Typescript sẽ ngăn các trường hợp kỳ lạ xảy ra, đảm bảo operator phải cùng type. Vd: ("b" + "a" + + "a" + "a").toLowerCase(); => banana

-> Polyfill là một đoạn mã (thường là JavaScript trên Web) được dùng để cung cấp chức năng hiện đại trên các trình duyệt cũ hơn vốn không hỗ trợ nó
VD IE8 k có hàm Array.prototype.includes, ta phải tự viết polyfill riêng để thực hiện chức năng đó. VD:
if (!Array.prototype.includes) {
  Array.prototype.includes = function includes(searchElement) {
    return this.indexOf(searchElement) !== -1
  }
}
Tương tự các hàm như Object.assign cũng nên check như v nếu ứng dụng yêu cầu tương thích nhiều trình duyệt rồi dùng như bth. Trên mạng đôi khi có thu viện polyfill để tải về dùng sẵn or nhờ chat GPT viết hộ

-> Cách che giấu source code frontend: Đang ở trang webA, khi load ta cho history.pushState sang đường dẫn khác (cùng host) thì khi mở view page source sẽ ra html của đường dẫn đó. Để đánh lừa thì ta nên cho 2 đường dẫn na ná nhau với chữ i viết hoa giống chữ l viết thường
Bắt khi người dùng vào devtool bằng JS và cho ẩn phần code JS đi là được. 
Dev khác vào web sẽ thấy source code là của web kia và k có code js nào cả

-> try catch error, hoặc có thể tạo wrapper function dùng then catch để custom trả ra [undefined, T] | [Error] cũng được (T là type của data).

-> Trong JS có kiểu dữ liệu struct và shared struct tương tự nhưng truy cập được từ multithread, web worker


