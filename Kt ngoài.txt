# DevTool Browser
Tab Console : allow pasting
[...$$('img')].forEach(a=>a.remove()); 
document.designMode = "on"; 
VD autoClick: Array.from($$('a.touchable.primary')).forEach(btn => btn.click()) => click tất cả các thẻ a có 2 class .touchable.primary

Tab Source Browser: ctrl+p -> tìm file -> đặt debugger -> tới line bất kỳ với: ctrl+p -> :100 để tới dòng 100 -> refresh trang thì nó sẽ chạy đến breakpoint là dừng
CTRL + SHIFT + F để Search global
Để cho file chạy đến dòng nào thì log gì ra có thể: right click breakpoint -> logpoint -> ghi message có thể ghi biến ra thì nó sẽ log biến đó



# Load file JS với async và defer
Browser load nếu thấy file js or script, sẽ dừng vc parse HTML để lý JS, gọi là Parse Blocking => default
Script attributes: async sẽ tải script bất đồng bộ trên 1 thread khác và tiếp tục parse trang, tải xong JS sẽ chạy; defer chỉ chạy khi html parse xong.
VD: Đang parse HTML CSS thì gặp 1 script async -> tiếp tục parse HTML CSS trong khi tải script -> Parse HTML chưa xong nhưng tải xong script thì vẫn chạy script luôn => default
VD: Đang parse HTML CSS thì gặp 1 script defer -> Tiếp tục parse HTML CSS trong khi tải script -> Parse HTML chưa xong nhưng tải xong script thì script k được exec -> parse HTML xong mới exec script
=> Nên đặt style ở đầu và script ở cuối vì trình duyệt bth luôn cần css load sớm để hiện ra còn tính năng k cần load ngay.

-> Nếu không xác định type="module" trong thẻ <script>, file JS sẽ được xử lý như một script thông thường, k có tính năng của module. Sự khác biệt:
Scope: Trong module, biến và hàm được khai báo sẽ có scope riêng, không bị rò rỉ ra toàn cục. Trong script thông thường, chúng sẽ nằm trong scope toàn cục.
Không thể sử dụng import và export trong script thông thường. Chỉ module mới hỗ trợ tính năng này.
Module sẽ được tải và thực thi theo thứ tự mà chúng được khai báo, nhưng có thể sử dụng import để tải module khác. 
Module luôn chạy trong chế độ strict, trong khi script thông thường không.



# Sự phát triển của JS ở frontend
-> Đầu tiên JS được dùng trong website bằng tag <script> tới file index.js

-> Khi JS thuần k đủ, người ta phải thêm các thư viện như jQuery, lodash. 
Tải file lodash.js về và lại <script> tới nó là được. Để dùng code lodash trong index.js thì phải script tới lodash trước index.js

-> Nhưng việc quản lý version sẽ khó vì ta phải download thủ công rồi thay thế file vào và cũng phải tự nhớ version. Ta dùng bộ quản lý thư viện npm.
npm sẽ giúp tải thư viện về hộ trong node_modules đồng thời quản lý version trong file package.json, k cần làm thủ công bước này nữa.
Frontend muốn dùng thì index.html vẫn phải <script> thủ công tới lodash.js đặt trong node_modules 

-> NodeJS ra đời giúp js code được phía server và tính năng import sourcecode với server đã ra đời thông qua keyword require(). Tức ta dùng require("lodash"); kết hợp với npm tải package về node_modules sẽ tự tìm chính xác vị trí thư viện trong node_modules
Điều này là hiển nhiên vì server luôn phải cho import code từ file này qua file khác. Các ngôn ngữ phía server khác đều có hết import như v rồi.

Nodejs còn cung cấp cặp export/require giúp tự tạo modules, tức là require còn tìm ở các file trong thư mục gốc chứ k chỉ tìm trong node_modules. Hiểu require là chức năng của nodejs, là tính năng tất yếu phải có của server chứ klq gì đến JS.
Frontend lúc này vẫn chưa thể import sourcecode trực tiếp, lý do là client side k hiểu lệnh require là gì. Ta buộc phải <script> tất cả trong file html trước theo thứ tự.

-> Để xử lý thì ý tưởng là nó tạo ra 1 thư viện khiến cho JS có thể dùng được require của nodejs với chức năng tương tự, nhưng khi chạy sẽ tự tìm file gốc thế nội dung vào và loại bỏ cú pháp require (vì bản chất browser frontend vẫn k hiểu require). Gọi là modules bundler.
Dùng bundler, ta có thể require cả file css luôn vì bản chất khi chạy chỉ là thế code vào. Ta cũng có thể dùng mọi package của server ở phía client (đa số) vì bundler sẽ khiến các package của server dùng require về dạng nguyên bản client-side và browser có thể hiểu được.

Có nhiều công cụ đóng gói modules như Browserify, Webpack, Parcel, FuseBox. Trong đó webpack nổi tiếng nhất vì nó được sử dụng chung với framework React.
VD để đóng gói: ./node_modules/.bin/webpack index.js -o index_bundle.js => đóng gói index.js thành index_bundle.js. Bản chất là nó tối ưu code và require() về dạng code mà client hiểu được
- Rồi client chỉ cần dùng file index_bundle.js như file client bth: tức "client dùng package của server ở phía client được"
- Hoặc import sourcecode: client tạo file index2.js require file index.js (trực tiếp) rồi bundler luôn 2 files, file html chỉ cần <script> tới index2.js, tức "file js này có thể import sourcecode trực tiếp từ file js khác" (khác với trước đó là buộc phải import hết theo thứ tự vào file html).
=> Thực tế type module của script cho phép import rồi.
=> Ít khi nào dùng require trong client làm gì, cứ dùng import thôi

-> Có nhiều phiên bản JS, nhiều lúc ta cần chuyển đổi những mã JS ở bản mới về bản cũ để hỗ trợ các browser cũ hơn của người dùng, thì dùng Babel.
Vì Babel cũng là 1 thư viện, việc tích hợp vào webpack giúp đóng gói các file cần thiết và chuyển đổi về dạng dùng được ở phía browser (chuyển require về dạng browser hiểu được). 
Ta chỉ cần sửa webpack.config.js thêm babel vào là được. Nó sẽ tự chuyển đổi code js version mới về bản tương thích cũ.

-> Task runner: Nếu ta muốn khi gõ 1 command là tự động build, đóng gói, chạy webpack, ta cũng muốn nhét tất cả file js sau khi webpack xử lý về chung 1 file index.js và tự động <script> nó trong file html chứ k cần thủ công chạy từng lệnh
Có nhiều task runner giúp làm điều này như Grunt, Gulp. Trong react dùng react-scripts làm điều này.
Ta có thể cấu hình config thủ công cho nó tự động làm các task phức tạp. 



# AJAX
Asynchronous Javascript And XML chỉ là phương thức dùng ở FE gọi vào server lấy data và load dữ liệu vào 1 phần web, chứ k request html, css, js như ngày xưa. Các hàm như v gọi là AJAX.
Ngày xưa AJAX dùng window.XmlHttpRequest Object(XHR) để gọi request và trả về response dạng XML biểu diễn DOM element or HTML dạng string
Cũ hơn nữa, người ta còn dùng window.ActiveXObject trước phiên bản IE11. ActiveX được phát triển bởi Microsoft để tạo các thành phần tái sử dụng trên web. 
AJAX trong các trình duyệt hiện đại dùng HTML5 + modern js, fetch api thì có hàm fetch sẵn của webapi or axios.



# CSS Preprocessor 
Gồm mọi tính năng css và mở rộng thêm 1 số tính năng k có sẵn giúp cấu trúc của CSS dễ đọc hơn. 
Dù sau cùng, code của css preprocessor sẽ được compile thành code css để dùng. Có 1 số TH buộc phải dùng scss. VD css style cho 300 phần tử, ta k thể code bằng css thuần
1 số css preprocessor phổ biến như: SASS, SCSS, LESS, Stylus, PostCSS. Chúng cung biến, hàm, thao tác màu và toán học khiến cho css như 1 ngôn ngữ lập trình chuẩn.

Nhược điểm của css preprocessor là khó debug lỗi runtime, tốn thời gian về hiệu năng vì phải biên dịch ra css rồi mới chạy thay vì chạy TT. 
Thực tế, ta có thể dùng css compiler để chuyển nó thành css thuần rồi dùng file thuần đó cũng được. Dùng được cả FE và BE SSR.



# Tạo animation bằng JS hay CSS nhanh hơn?
Dùng CSS có performance tốt vì giảm thiểu logic cho browser và browser có thể optimize DOM, dùng GPU để tăng hiệu suất. JS tốc độ có thể nhanh or chậm hơn CSS tùy vào thư viện nhưng trong đa số các TH thì tốc độ của 2 cái là như nhau. 
VD jQuery có animation chậm hơn CSS vì nó thiết kế ngay từ đầu k chú trọng vào animation. Các thư viện animation khác thì ok nhưng còn phụ thuộc vào thư viện nặng hay nhẹ, code css hay js dễ hơn.
=> Cái nào tiện hơn thì dùng. Trong vài TH của React, ta nên dùng css vì việc dùng biến useState tạo animation nó làm cả component render lại và code rối hơn k tốt.



# OAuth2 google gmail api
Chạy apache server sẽ serve thư mục trong htdocs. VD Ta để 1 folder là 20194761 thì truy cập được index.html tự động với http://localhost/20194761

-> Tạo app user gửi bằng mail của họ phải đồng ý cấp quyền:
Doc URL setup production: https://developers.google.com/gmail/api/auth/scopes
Doc viết api: https://developers.google.com/gmail/api/reference/rest/v1/users.messages/get

Setup: - Vào https://console.cloud.google.com/
- Tạo 1 project mới nếu chưa có
- Search Gmail API và Enable nó. Thực tế có nhiều loại API và ở đây ta đang chỉ dùng dịch vụ Gmail.
- Setup từng bước: phần url phải ủy quyền localhost:5000 chẳng hạn nếu cho phép app chạy ở local như v

Phần scope là các mức độ mà ta muốn app truy cập. VD chọn https://mail.google.com/ sẽ có full access như gửi mail nhưng k có nghĩa là có mọi thứ. VD muốn xem các email gửi thì phải thêm scope https://www.googleapis.com/auth/gmail.readonly
Có 3 loại scope:
Recommended là scope cơ bản nhất bất cứ ai cũng ok
Sensitive và Restricted là 2 scope truy cập data quan trọng cần sự đồng ý của người dùng. Và developer cũng phải cho app đi qua Google Verification Process mới dùng được 2 loại scope này. Google Verification Process phải trả phí hàng tháng và phải quay video cam kết sẽ dùng thông tin nhạy cảm của user để làm gì.
App chạy được trong 2 môi trường là testing và production. Đổi môi trường trong OAuth consent screen. 

-> Tạo ứng dụng nhúng video youtube dạng mp3 qua Youtube API: Có thể nhúng 1 video youtube bất kỳ vào web dạng video nhét vào src được nhưng để thao tác chi tiết với data thì phải dùng YoutubeAPI. Chỉ cần đăng ký project trong google cloud platform và enable youtube api và tạo 1 api key mới là được, k cần config gì thêm.
Có thể làm đủ kiểu, phát nhạc, tua bài tiếp theo, tìm kiếm bài hát, lấy thumbnail



# Other
-> ES6 (ECMAScript) là các quy tắc giúp JS chạy tốt trên mọi trình duyệt.
Babel convert ES6 sang CommonJS cho NodeJS dùng được.

-> Browser khác nhau dùng rendering engine khác nhau như: Webkit dùng cho Safari, Gecko dùng trong firefox, Blink dùng trong chrome, opera.
Chromium là 1 trình duyệt mã nguồn mở, từ đó phát triển nên các trình duyệt khác.

-> Tại sao Youtube load video rất nhanh? Các công ty lớn chuyên về video có server lớn xử lý với băng thông rộng. Phía server họ cũng dùng các thuật toán mạnh để nén các video khi hiển thị cho người dùng nên rất nhẹ. Phía front end họ cũng dùng 1 số mẹo như tính toán cấu hình máy mà đưa ra video quality mặc định phù hợp, đồng thời ưu tiên load video và hiển thị component cho video trước, sau đó mới load các thành phần khác. 

-> Có thể tắt JS trong web, khi đó các tính năng liên quan và quảng cáo cũng mất. 
VD thao tác trên Edge: 3 chấm -> setting -> site permission -> javascript -> ấn tắt
Khi đó, thẻ <noscript> </noscript> là thẻ sẽ hiển thị khi trình duyệt tắt javascript or k hỗ trợ 

-> JScript: Là Microsoft version of JS dùng trong web. JScript được sử dụng chủ yếu trên nền tảng Windows và được tích hợp trong các ứng dụng như Internet Explorer và Windows Script Host.
Code script k truy cập được client's hard drive vì lý do bảo mật
VB Script là interpreted script lang của microsoft là 1 phần của Visual Basic programming language

-> CDATA xuất hiện trong XML và HTMl để tránh lỗi parse error
VD thay vì code JS trong html bth, ta thêm:
 <body>
    <script type="text/javascript">
      // <![CDATA[
      var myString = "<p>This is a string containing <em>HTML</em> tags.</p>";
      console.log(myString);
      // ]]>
    </script>
  </body>
=> Tag CDATA(Character data) để tránh bị lỗi khi nội dung bên trong chứa ký tự đặc biệt. TH đơn giản k có nhưng myString chứa nhiều ký tự complex của html sẽ gây lỗi và CDATA đảm bảo phần code đó luôn được interpret đúng ở dạng literal

-> CSS short for Cascading Style Sheets
Normal flow là tính chất bth của layout khi mà ta chưa làm gì để chỉnh sửa. Vd display static là default value của 1 element khi nó làm việc trong normal flow.

-> RxJS là lib có Observable hỗ trợ code subscribe bắt event các thứ

-> Dùng tool quokka trong VSC: CTRL+SHIFT+P để tìm và bật quokka, CTRL+K rồi E để exit, CTRL+K rồi Q để chạy lại quokka => sau khi cài quokkajs extension của VSC
Để mở browser nhanh ngay trong VSC: CTRL + SHIFT + P -> Chọn Simple Browser: Show

-> TransformStream là tính năng giúp xử lý đầu ra của api thứ nhất trước khi cho làm đầu vào api thứ 2. Làm như v giúp tiết kiệm băng thông vì kp tải toàn bộ dữ liệu từ API 1 về mói gửi lên api thứ 2 mà truyền liên tục theo từng phần nhỏ luôn

-> Cách thay đổi css của VSC: Tải extension Custom css and loader -> tạo file custom.css để ở 1 thư mục -> ấn vào ký hiệu setting mở settings -> mở file user settings.json bằng ký hiệu ở góc phải bên trên -> thêm code: "vscode_custom_css.imports": ["file:///C:/Users/Ryan.Nguyen/Documents/custom.css"] là đường tuyệt đối tới file css -> CTRL + SHIFT + P mở dev tool -> tìm các class và custom thoải mái -> viết code custom vào file css -> CTRL + SHIFT + P và enable custom css and js -> tải extension Fix VSC Checksum -> CTRL + SHIFT + P Fix Checksum Restor -> tiếp Fix Checksum Apply

-> New morphism : kiểu design tạo clean effect rất ảo
Glass morphism dùng với backdrop-filter blur + 1 lớp kính rgba mỏng
Skeuomorphism hình thực tế => k dùng
Flat design: web như 1 mặt phẳng với hình vẽ đơn giản, k có shadow hay hiệu ứn nổi lên gì cả
Material design mở rộng của flat design, có hiệu ứng nổi lên mọi nơi. Màu và shape cần thay đổi. Mọi chuyển động phải liên tục, k đột ngột ẩn hiện.
Retro/Vintage Styles: web phong cách tinh tế, cổ kính, sang trọng, quý tộc, cổ điển. 
Brutalism design: web hiệu ứng mạnh, thô mộc, tương phản cao, font chữ nhiều lúc rất ảo
Minimalism: chỉ hiển thị các thứ cần thiết, k có gì thừa thãi, đơn giản, có thể đơn sắc, là loại web dễ tạo và dễ nhìn nhất.
Vaporwave design: web dùng tông màu neon như hồng, tím, xanh dương kiểu biển hiệu quảng cáo điện tử, video game, hoài cổ. VD thena.fi mới chỉ có 1 chút vaporwave thôi
Memphis design: dùng màu sắc sống động với các dạng hình học, ký tự đa dạng không đối xứng sắp xếp trừu tượng ngẫu hứng, trông như được xếp ngẫu nhiên. 

-> MicroInteraction: animation các thứ nhỏ nhặt khi hover và click. Animation càng nhỏ, càng đơn giản càng đẹp.
Lib react: react-useanimations
