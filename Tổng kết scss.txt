# Basic
SASS giống SCSS nhưng dùng tab và enter thay {}

-> Cài:
- React "npm i sass" rồi import trực tiếp file scss thay cho css dùng luôn
- HTML thuần phải tự compile ra css trước mới dùng được.
Extension sass live compiler của VSC -> ấn sass watcher -> save file tự compile ra css
npm i -g sass => gọi compile hay watch file tùy ý

--> Package sass:
sass <link file>.scss <link file đích>.css --style compressed => bỏ khoảng trắng để nén file thành 1 hàng
sass <link file>.scss <link file đích>.css --style expanded => mở rộng chuẩn đẹp như code tay dùng 2 space
sass --watch .:../css
sass --no-source-map .:../css => compile mọi file.scss trong thư mục hiện tại vào /css, sourcemap giúp trình duyệt hiển thị style nằm ở file scss nào để debug
Còn có package sass-migrator tự động chuyển mọi file scss ở phiên bản cũ sang phiên bản mới tự động khi scss update version đổi cú pháp.

-> @import trong css tự cache k bị duplicate. @import trong scss bị duplicate.
scss dùng @use thay hoàn toàn @import k bị duplicate.
@forward chỉ chuyển tiếp biến sang file @use nó chứ k dùng được trong file hiện tại. 
1 file vừa @forward biến, vừa define biến thì define sẽ ghi đè vì định nghĩa sau. @forward nhiều lần cũng k sao mà theo cái gọi sau.



# Best practice trong dự án
-> Tạo theme mode trong scss với map bắt đầu bằng ()

-> Dùng BEM tốt hơn là css selector, css selector chỉ nên 1 cấp thôi:
.button {
  background-color: var(--primary-color);
  &--primary {
    background-color: var(--primary-color);
  }
  &--secondary {
    background-color: var(--secondary-color);
  }
  &__icon {
    margin-right: rem(8);
  }
}

-> Tạo responsive trong scss với hàng loạt mixin:
@mixin xxxs {
	@media screen and (max-width: 375.98px) {
		@content;
	}
}
@mixin landscape {
	@media screen and (orientation: landscape) {
		@content;
	}
}

-> Dùng mixin cho css hack:
@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}
	@-ms-keyframes #{$animation-name} {
		@content;
	}
	@-o-keyframes #{$animation-name} {
		@content;
	}
	@keyframes #{$animation-name} {
		@content;
	}
}
@mixin transform($args) {
	transform: $args;
	-webkit-transform: $args;
	-moz-transform: $args;
	-ms-transform: $args;
	-o-transform: $args;
}

-> Dùng mixin nhiều thuộc tính thành 1 hàm:
@mixin fullscreen($fixed: false) {
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	@if $fixed {
		position: fixed;
	} @else {
		position: absolute;
	}
}
@mixin overtext($lines) {
	display: -webkit-inline-box;
	-webkit-line-clamp: $lines;
	-webkit-box-orient: vertical;
	text-overflow: ellipsis;
	overflow: hidden;
}
@mixin customscroll($width: 5px, $bgTrack: #ddd, $bgThumb: #121212) {
	&::-webkit-scrollbar {
		width: $width;
	}
	&::-webkit-scrollbar-track {
		background: transparent;
	}
	&::-webkit-scrollbar-thumb {
		background: $bgThumb;
	}
}



# Chia file
React thì nên chia từng file.scss cùng cấp từng module. HTML thuần thì dùng folder scss riêng chứa mọi file.scss. Phải chia file common và từng module.

VD1 HTML thuần: chia common.scss và file.scss từng module. File main.scss ngoài cùng @use file common trước, rồi @use file module dùng common thoải mái. Compile file main.scss ra main.css là xong
scss/
├── base/
│   ├── _reset.scss
│   ├── _typography.scss
│   └── _base.scss
├── components/ => sửa các thẻ common theo 1 theme
│   ├── _buttons.scss
│   ├── _cards.scss
│   └── _modals.scss
├── layout/
│   ├── _header.scss
│   ├── _footer.scss
│   ├── _grid.scss
│   └── _sidebar.scss
├── pages/
│   ├── _home.scss
│   ├── _about.scss
│   └── _contact.scss
├── themes/
│   ├── _default.scss
│   └── _dark.scss
├── utils/
│   ├── _variables.scss => tạo biến cho từng kích thươc màn hình được
│   ├── _mixins.scss => gom lại responsive, css hack, common code nhận biến
│   └── _functions.scss
└── main.scss

utils/_variables.scss:
$primary-color: #3498db;
$secondary-color: #2ecc71;
$font-stack: 'Helvetica, Arial, sans-serif';
:root {
  --primary-color: #3498db;
  --secondary-color: #2ecc71;
  --font-stack: 'Helvetica, Arial, sans-serif';
}

utils/_mixins.scss:
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

utils/_index.scss:
@forward 'variables';
@forward 'mixins';
@forward 'functions';

main.scss:
@use 'utils/index' as *;
@use 'base/reset'; // dùng namespace là reset
@use 'base/typography' as t; // dùng namespace là t
@use 'base/base';
@use 'components/buttons';
@use 'components/cards';
@use 'components/modals';
@use 'layout/header';
@use 'layout/footer';
@use 'layout/grid';
@use 'layout/sidebar';
@use 'pages/home';
@use 'pages/about';
@use 'pages/contact';
@use 'themes/default';
@use 'themes/dark';
// Other common style and library
body {
  font-family: $font-stack;
  color: $primary-color;
}
.container {
  @include flex-center;
  padding: rem(16);
}
=> ref tới "HTML CSS JS / Finance flow" thiết kế rất hay



# Nhanh
Phải hiểu nó dùng các thứ trong phạm vi nào:
- function tái sử dụng logic tính toán giá trị 
- Biến tái sử dụng giá trị
- placeholder, @extends tái sử dụng style
- mixin tái sử dụng style nhưng nhận tham số
- if tạo điều kiện trong vòng lặp hoặc mixin hoặc function 
- loop tạo 1 số lượng lớn 1 cái gì đó có quy tắc
