-> .image_container {
  width: min(300px, 50%);
  aspect-ratio: 1/1;
  overflow: hidden;
  border-radius: 20px;
  background-color: gray;
  img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: center center;
  }
}
<figure class="image_container">
  <picture>
    <source media="(min-width:650px)" srcset="./test.jpg" type="image/jpg">
    <img src="" alt="" onerror="this.onerror=null;this.src='base64image';" loading="lazy">
  </picture>
  <figcaption>This is cap</figcaption>
</figure>



-> Metadata SEO:
<title>Title</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="preload" as="image" href="./logo.svg"/>
<link rel="icon" href="./logo.svg"/>
<meta name="description" content="Test setup website">
<meta name="keywords" content="test,setup"/>
<link rel = "canonical" href = "http://localhost:1234/">
<meta property = "og:type" content = "article" />
<meta property = "og:title" content = "TÊN TIÊU ĐÊ HOẶC TRANG WEB" />
<meta property = "og:description" content = "MÔ TẢ CỦA TRANG NỘI DUNG" />
<meta property = "og:image" content = "./assets/logo.svg" />
<meta property = "og:image:alt" content="Collection Image"/>
<meta property = "og:url" content = "PERMALINK" />
<meta property = "og:site_name" content = "TÊN TRANG WEB" />
<meta property = "og:locale" content="en_US"/>
<meta property = "twitter:title" content = "TÊN TIÊU ĐỀ HOẶC TRANG WEB">
<link rel="stylesheet" href="./css/home.css">
<script src="./test.js" blocking="render" type="module" defer></script>



-> @font-face {
  font-family: SourGummy;
  src: url("../assets/fonts/SourGummy-ExtraLight.ttf") format('truetype');
  font-weight: 100;
  font-style: normal;
}
@font-face {
  font-family: SourGummy;
  src: url("../assets/fonts/SourGummy-Light.ttf") format('truetype');
  font-weight: lighter;
  font-style: normal;
}
.test {
  font-family: SourGummy;
  font-weight: lighter;
}



-> .test1 {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  line-clamp: 3;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  box-orient: vertical;
  text-align: justify;
  word-break: break-word; // Chữ k đủ sẽ xuống dòng, 1 chữ quá dài cũng cắt xuống
  text-wrap: pretty;
}



-> @supports (animation-timeline: view()) {
  .test {
    animation-timeline: view();
    animation-range-start: cover 25vh;
    animation-range-end: 100vh; 
  }
}

@supports (animation-timeline: --squareTimeline) {
  .test {
    animation: loadingscroll linear forwards;
    animation-timeline: --squareTimeline;
  }
}
.container {
  scroll-timeline-name: --squareTimeline; // Dùng animation khi scroll trong thẻ .container
}

svg {
  animation: rotate 1s linear infinite;
  animation-play-state: paused;
  animation-delay: calc(var(--scroll) * -1s);
  animation-iteration-count: 1;
  animation-fill-mode: both;
}
window.addEventListener("scroll", () => {
  document.body.style.setProperty("--scroll", window.pageYOffset/(document.body.offsetHeight - window.innerHeight));
});

animation: play 1s steps(10) infinite; // chia ảnh 10 bước tới 10%, 10 bước tới 100%, tất cả trong 1s
@keyframes play {
  0% { background-position: 0 0; }
  10% { background-position: 100px 100px; }
  100% { background-position: 0 0; }
}

path {
  stroke-width: 2; /* Ensure the stroke is visible */
  stroke-dasharray: 1000; /* Length of the dash array */
  animation: test 1s ease-out;
}
@keyframes test {
  0% {
    stroke-dashoffset: 1000;
  }
  100% {
    stroke-dashoffset: 0;
  }
}

@view-transition {
	navigation: auto;
}
::view-transition-group(root) {
	animation-duration: 0.5s;
}
<script src="ignored" type="module" blocking="render"></script> => blocking="render" k có ý nghĩa
Đặt 2 thẻ có view-transition-name trùng nhau
document.startViewTransition(() => {
  // style đổi cho 2 thẻ
});



-> [popover] {
  anchor-default: --i-btn;
  position-fallback: --top-to-bottom;
  opacity: 0;
  transform: scaleX(0);
  transition:
    opacity 0.7s,
    transform 0.7s,
    overlay 0.7s allow-discrete,
    display 0.7s allow-discrete;
}
[popover]:popover-open {
  opacity: 1;
  transform: scaleX(1);
}
@starting-style {
  [popover]:popover-open {
    opacity: 0;
    transform: scaleX(0);
  }
}
[popover]::backdrop {
  background-color: rgb(0 0 0 / 0%);
  transition:
    display 0.7s allow-discrete,
    overlay 0.7s allow-discrete,
    background-color 0.7s;
}
[popover]:popover-open::backdrop {
  background-color: rgb(0 0 0 / 25%);
}
@starting-style {
  [popover]:popover-open::backdrop {
    background-color: rgb(0 0 0 / 0%);
  }
}
@position-fallback --top-to-bottom {
  @try {
    bottom: anchor(top);
    left: anchor(center);
  }
  @try {
    bottom: anchor(bottom); /* K fit top thì anchor xuống bottom => auto positioning */
    left: anchor(center);
  }
}
<button popovertarget="test" popovertargetaction="toggle" style="anchor-name: --i-btn;">Open</button>
<div id="test" popover anchor="btn">
  <button popovertargetaction="hide" popovertarget="dialog">Close2</button>
</div>



-> input[type="number"]:is(::-webkit-inner-spin-button,::-webkit-outer-spin-button) {
  -webkit-appearance: none !important;
}

<input accept="image/*" hidden id="test" type="file" onChange={onImageChange}/>
<label htmlFor="test">
  <div>Test</div>
</label>
const onImageChange = (event) => {
  if (event.target.files && event.target.files[0]) {
    setImage(URL.createObjectURL(event.target.files[0]));
  }
  setImageSending(event.target.files[0]);
};
const uploadData = new FormData();
uploadData.append("image", imageSending);
const response = await client.post("/api/v1/event", uploadData, config);



Bỏ:
-> .animated-text {
  background-clip: text;
  -webkit-background-clip: text;
  background: linear-gradient(90deg, #ff0000, #ff7300, #ffeb00, #00ff00);
  background-size: 300% 300%;
  color: transparent;
  -webkit-text-fill-color: transparent;
  animation: gradientShift 4s infinite linear;
}
@keyframes gradientShift {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

-> <video width="100px" height="100px" preload="auto" muted loop autoplay playsInline> => preload="auto" là load toàn video luôn
  <source src="https://www.w3schools.com/tags/movie.mp4" type="video/mp4"/>
</video>

-> const workerCode = `
  self.onmessage = function(event) {
    console.log(event.data);
    self.postMessage(1);
  };
`;
const blob = new Blob([workerCode], { type: "application/javascript" });
const worker = new Worker(URL.createObjectURL(blob));
worker.postMessage({ test: 1 }); // Gửi tới worker thực hiện code
worker.onmessage = function(event) { // Nhận kết quả từ worker
  console.log(event.data);
};

