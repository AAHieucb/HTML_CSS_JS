# Basic
text-shadow và box-shadow: https://html-css-js.com/css/generator/box-shadow/  |  drop-shadow theo hình dạng ảnh có nền transparent
Có sẵn quốc kỳ của mọi quốc gia trên thế giới bằng css: https://dev.to/j471n/i-made-all-countries-flags-using-html-css-4cnc
https://www.flaticon.com => trang cho lấy icon miễn phí(có cả icon động) chỉ với điều kiện thêm thẻ div này vào mã nguồn: <div>Icons made by <a href="https://www.freepik.com/" title="Freepik">Freepik</a> from <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a> is licensed by <a href="http://creativecommons.org/licenses/by/3.0/" title="Creative Commons BY 3.0" target="_blank">CC 3.0 BY</a></div>

Tổng hợp component UI bằng html thuần*: https://uiverse.io/
GSAP dùng được với css thuần: https://gsap.com/

Có thể custom cursor
CSS nesting có sẵn rồi

-> Master border radius: outer radius = inner radius + distance giữa 2 border
border-radius: https://9elements.github.io/fancy-border-radius/
Dùng border-image

-> Margin collapse: hiện tượng bottom margin thẻ trên bị merge với top margin thẻ dưới => fix bằng cách dùng padding hoăc cho thành inline-block

-> Hack CSS: -webkit của chrome, -moz của firefox dùng bởi các rendering engines khác nhau. 
Cũng có thể dùng cho thuộc tính kiểu height: -moz-fit-content;

-> Biến trong css định nghĩa với -- trong 1 tag chỉ dùng được trong tag đó và tag con của nó, truy cập với var()
VD Click chuột là đổi màu 1 vài thẻ: nên dùng css var trong :root và đổi giá trị khi click là được.

-> Lỗi zIndex: Thẻ A có z-index là 1, thẻ B có z-index là 2 thì thẻ A luôn nằm dưới thẻ B, kể cả thẻ A có children z-index là 100 thì tất cả đều dưới thẻ B thôi
K dùng opacity với z-index vì opacity làm giảm z-index của thẻ bên trong nó
zIndex nên luôn đi với position relative

padding-top: 100%; lấy 1/3 phần height thẻ cha. VD: A height 600px chứa B có padding-top: 100% thì B có padding top là 200px vì chia đều cho padding top, bottom, content height

-> resize: both; direction: ltr; => biến mọi thẻ thành resizable
contenteditable => biến mọi thẻ thành editable nhưng khá xấu
Dùng <dialog> có sẵn
Dùng thuộc tính title của các thẻ p, div để hover có tooltip sẵn => dùng content: attr(data-image-to-show) => trong js lấy sang camel case tag.dataset.imageToShow
ul li, ol li, dl dt dd
Emphasis marks dùng cho các ngôn ngữ có thanh âm để biểu hiện tính cao hay trầm của âm tiết. Có none, open, dot, circle, triangle, seseam, 1 <character> bất kỳ
Tag video chứa tag source. VD: preload="auto,metadata,none", metadata là xem đến đâu load đến đấy, trong khi auto là load entire video luôn. 
Thuộc tính inert đặc biệt trong html, khi dùng sẽ vô hiệu hóa mọi tương tác của người dùng với các tag.
Dùng box-shadow lồng nhau trong 1 thẻ có thể gom nhiều thẻ trừu tượng thành 1: https://www.youtube.com/watch?v=20QiX8rmHnU
contain: paint;

-> -webkit-fill-available là giá trị đảm bảo width và height tự kéo dài hết phần thừa mà nó có thể kéo, k ảnh hưởng tới các thẻ khác
Dùng đúng thứ tự để k hỗ trợ sẽ chạy fallback => width: fill-available; width: -webkit-fill-available;
=> width auto nhiều lúc cũng tự take up rest space
-> Chỉnh thứ tự in chữ với "writing-mode: vertical-rl;"
-> hidden attribute set cho 1 thẻ sẽ ẩn thẻ đó đi



# Css anchor
URL: https://www.youtube.com/watch?v=B4Y9Ed4lLAI&list=WL&index=2&t=61s
Ful tut: https://css-tricks.com/css-anchor-positioning-guide/
***popovertarget popover popovertargetaction giúp 1 thẻ hiện khi click và ẩn khi click ra ngoài, éo cần js phức tạp nữa, tạo popover css thuần, tự responsive
anchor trong css và html để gắn popover hiện theo thẻ nào
:root:has(#context:popover-open): Check popover đang được mở bằng css selector để style
VD1: 
<style>
  [popover] {
    inset: unset;
    bottom: anchor(top);
    left: anchor(center);
    translate: -50%;
    margin: 0.25rem 0;
  }
</style>
<button popovertarget="info" id="btn">Field</button>
<div popover id="info" anchor="btn">Extra</div>
VD2: 
<style>
  #btn {
    anchor-name: --i-btn;
  }
  [popover] {
    anchor-default: --i-btn;
    inset: unset;
    translate: -50%;
    margin: 0.25rem 0;
    position-fallback: --top-to-bottom;
  }
  @position-fallback --top-to-bottom { /* @position-fallback check dùng các position @try, nếu k được thì cứ lấy tiếp cái sau */
    @try {
      bottom: anchor(top);
      left: anchor(center);
    }
    @try {
      bottom: anchor(bottom); /* K fit top thì anchor xuống bottom => auto positioning */
      left: anchor(center);
    }
  }
</style>
<button popovertarget="info" id="btn">Field</button>
<div popover id="info">Extra</div>

-> Dùng @starting-style và transition-behavior allow-discrete

-> dialog là 1 loại popover và có thể dùng kèm API của popover => tạo ra dialog tự có click outside to close.



# Custom thẻ input
Input bth k có autocomplete, nhưng nếu thêm id="email/name" sẽ có autocomplete tự động. Có thể custom vẫn dùng id nhưng bỏ autocomplete bằng cách thêm: autocomplete="off", có thể kèm aria-autocomplete="list"

Dùng event "input" giống onChange của react, dùng thay event "change"

Gõ có gợi ý theo list có sẵn với: <datalist> + input list

-> Nếu muốn có 1 group input radio chỉ cho chọn 1 thì phải đặt chung trường name với nhau

-> input type number custom nút spin button, trỏ vào shadow DOM với: input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button
Nó có thuộc tính -webkit-appearance và appearance ta chỉnh là none chẳng hạn thì nó sẽ k hiện
K an toàn vì dùng -webkit, với browser khác nên dùng type text và lọc thủ công sẽ chuẩn hơn. K dùng pattern có sẵn vì nó k check từ lúc gõ, lúc submit mới báo message k rõ ràng

input pattern [a-z] mà k có số lượng {2,} or {2,8} or + * ? đằng sau thì nó mặc định phải là 1 ký tự thôi

-> Có thể dùng hidden tạo input ảnh hoặc file đẹp
C1: <CustomButton2 variant="outlined" onClick={() => fileInputRef.current.click()}>
  Upload File
</CustomButton2>
<input type="file" ref={fileInputRef} style={{ display: 'none' }} onChange={getFile} />

Đọc text từ file:
const getFile = (event) => {
  const reader = new FileReader();
  reader.onload = (e) => { console.log(e.target.result); };
  reader.readAsText(event.target.files[0]);
}
C2: Input image, hiển thị và gửi qua API
<input accept="image/*" hidden id="raised-button-file" type="file" onChange={onImageChange}/>
<label htmlFor="raised-button-file">
  <Box style={{ width: "299px", height: "300px" }}>
    <img
      width="100%"
      height="100%"
      style={{ borderRadius: "15px" }}
      src={image}
    />
  </Box>
</label>
const onImageChange = (event) => {
  if (event.target.files && event.target.files[0]) {
    setImage(URL.createObjectURL(event.target.files[0]));
  }
  setImageSending(event.target.files[0]);
};
const uploadData = new FormData();
uploadData.append("image", imageSending);
const response = await client.post("/api/v1/event", uploadData, config);

-> input password nên để 1 checkbox show password thay vì dùng con mắt mặc định vì nó éo chuẩn

-> Đưa validation form input css thuần lên tầm cao mới: https://www.youtube.com/watch?v=awNYtIAu6pI&list=WL
Thay vì dùng: 
input:valid {} // style khi input có valid data
input:invalid {} // style khi input có invalid data
Ta dùng:
input:user-valid {} // style khi input có data, và data đó valid
input:user-invalid {} // style khi input có data, và data đó invalid
Hoặc better browser support: 
input:not(:placeholder-shown):valid {} 
input:not(:placeholder-shown):invalid {}

=> Nên kết hợp thêm required trong <input> cho các trường buộc phải có
Khi người dùng chưa nhập xong mà báo invalid luôn k tốt, ta muốn đang nhập dở sẽ k check invalid thì dùng thêm ở cuối:
input:focus:invalid { } // style khi input có invalid data và ngừoi dùng đang nhập dở



# CSS Selector
-> Cùng độ ưu tiên thì lấy cái set sau: !important > inline style > style theo id > style class, pseudo-class, attributes > element and pseudo-element > universal selector(*)
dialog.hide > dialog[open] > .hide
VD: style theo pseudo-class: .test:hover { }
style theo attributes: div[id=test] { }
style theo pseudo-element: .test:before { }
VD: a[href$=".abc" i]  /  [href*="google.com"]  /  img:not([alt]) 
VD: input[type='file'][multiple] khi chọn nhiều thuộc tính

space là descendant mọi cấp
>  child trực tiếp
~  mọi sibling sau
+  1 sibling ngay sau 

-> Vd 1 thẻ a mà có cả 4 thuộc tính thì phải viết css đúng thứ tự sự kiện nếu k sẽ k có hiệu ứng :link/:visited -> :selection -> :hover -> :active (click chuột)

input:checked/:disabled/:enabled/:required => khi input buộc nhập giá trị 
input:optional/:read-only X :read-write/:valid X :invalid/:out-of-range tức khi lỗi out-of-range thì mang style css gì X :in-range

Pb: :is(<>) thì cho độ ưu tiên cao nhất là 100 còn :where(<>) với cú pháp giống hệt nhưng luôn cho độ ưu tiên thấp nhất là 0 như dùng cho css reset
:is thực tế có độ ưu tiên bằng với việc liệt kê bth, nó có tác dụng gom viẹc liệt kê gọn hơn
VD: .example :is(h1, h2, .link) {} tương đương với .example h1, .example h2, .example .link {}
:is cũng khiến cho các phần tử trong ngoặc () có cùng specifility là cái cao nhất trong list. VD ở trên thì h1, h2 sẽ có cùng specific như class .link dù nó chỉ là thẻ thường.
VD: a:is(:hover, :focus) {} tương đương a:hover,a:focus {}
VD dùng :root css reset nó bị cao hơn bth, ta nhét vào ép specifility về 0 với :where(:root) { }. Ngược lại thì :where(.parent) .child {} thì .chịld vẫn giữ specifility của nó chứ k theo cha.

Pb :focus là chính thẻ đó được focus, :focus-within là khi bất cứ 1 thành phần bên trong nào của thẻ này bị focus thì thẻ này sẽ mang style nào (bao cả việc ấn tab để focus)
VD ta ấn button và show dropdown thì dùng button:focus .dropdown { display: flex; } nhưng ấn vào dropdown thì button mất focus sẽ ẩn dropdown, dùng :focus-within cho thẻ bao ngoài 2 cái đó để fix

p:empty là khi thẻ p k có text bên trong thì có style như nào
:target là kiểu phần tử target khi bị href tới thì mang style gì. VD: <p><a href="#news1">Đến nội dung số 1</a></p> <p id="news1"><b>Nội dung số 1</b></p>
:nth-last-of-type(2) => sibling cuối cùng thứ 2
p:lang(it) { } => thẻ p có lang là italia. VD: <p lang="it">Ciao bella!</p>
div:nth-child(n) => thẻ div là con thứ n
p:only-child { } => thẻ p là con duy nhất của 1 thẻ khác 
initial-letter tương đương selector ::first-letter giúp tạo chữ đầu tiên to đùng như đầu bài báo article
:focus là chọn bởi chuột hoặc tabkey, :focus-visible là riêng TH chọn với tabkey

VD: button:not(:first-child){} => mọi thẻ button không là first-child trong web 
button:has(svg){} => mọi button có thẻ svg là child 
VD giả sử tạo checkbox với option light/dark mode thì cách css hay nhất là: body:has(option[value="dark"]:checked){ --background: black; --text-color: white; } => chú ý phải đổi từ thẻ body vì nó chỉ effect thẻ hiện tại và các con của nó khi ta reassign css vars

-> X:before và X:after như 1 thẻ khác nằm bên trong X có kích thước fit content, k có content thì mặc định là 0 0.
before hiện ở left 0 top 0 của thẻ, after ở top right, kp hiện đằng trc vị trí thẻ hiện tại mà nó chiếm vị trí thẻ và đẩy text thẻ ra sau nó
VD cho x là relative và before là absolute thì vị trí thẻ before sẽ tính theo thẻ x

-> VD Event click chuột vào 1 phần tử trong list thì đổi style đơn giản: Từng item thêm tabIndex={index}, trong css bắt sự kiện thẻ đó ::focus r chỉnh style thoải mái. 

VD tính năng readmore với CSS only: dùng 2 cái radio button cho 2 dòng Read more và Read less để trigger thông qua label r style css :checked để ẩn hiện dòng text 



# Dùng position 
-> Position absolute sẽ xếp vị trí so với thẻ cha relative đầu tiên của nó, nếu k có thì sẽ là thẻ body, thẻ absolute cũng thành inline block.
position absolute nếu ta set cả 4 giá trị thì nó bắt đầu ảnh hưởng đến kích thước của thẻ, tự kéo dãn cho vừa hcn đó đó là khi kích thước k set.

-> Relative là thay đổi vị trí so với bình thường bao nhiêu, vẫn chiếm không gian

-> Sticky thì vật sẽ ở vị trí bth, nhưng khi scroll quá thì sẽ dính màn hình theo vị trí top left ta set. Phạm vi là trong 1 thẻ relative khác hoặc body, nếu thẻ relative scroll hết sẽ trôi cả sticky.

-> Fixed là cố định cũng là set các vị trí so với các cạnh của màn hình và fixed mãi ở đó luôn, thường dùng cho mobile menu.
VD A chứa thẻ B, mà B có position fixed thì sẽ căn fixed theo window nhưng nếu thêm translateZ(0) cho thẻ A thì thẻ B sẽ fix theo thẻ A chứ k fix theo window nx.



# Flexbox
Chú ý dùng width fit-content kết hợp với flex thì vô dụng. Vi mục đích khi sử dụng flex là kích thước của thẻ cha lớn hơn các thẻ con và flex sẽ xếp con bên trong cha.
Dùng kèm flex-grow và flex-shrink, order. Mặc định flex-shrink = 1, flex-grow = 0 nên khi thu nhỏ nó tự k bị tràn vì có flex-shrink.
Dùng align-self để chỉnh con ở start hay end so với cha là flexbox. VD cha cho align-item center để con ra giữa, nhưng có vài con mà muốn ở 2 bên vẫn dùng align-self chỉnh được

-> Nhanh: flex: 2 2 10%; // grow shrink basis 
flex: 2 2; // grow shrink
flex: 2 // = 2 1 0%
=> flex shrink default 1, flex grow default 0, flex-basis 0%
flex-flow: row wrap;
place-content: center space-between; /* align-content: center; justify-content: space-between; */
place-items: center stretch; /* align-items: center; justify-items: stretch; */ => k có stretch
place-self: start end; /* align-self: start; justify-self: end; */ => có thể stretch, trong phạm vi ô to
=> align-items, jusitfy-content, align-content cho flex
=> 1 điểm khác biệt lớn của place-items và place-self là place-items dùng cho container bao ngoài, place self là dùng cho từng phần tử được. place-self chỉ cần dùng cho grid

-> Dùng text-align và margin 0 auto để căn giữa nếu có thể. Còn có text-align justify cho text hiện đẹp

-> Dùng display flex thì thẻ có thuộc tính đó trở thành block chiếm cả dòng rồi ta set vị trí các con. Còn inline-flex thì thẻ cha thành thẻ inline thôi, xếp con bên trong.

-> flex-basis => ref tới "Responsive css"
Flexbox gặp vấn đề là chỉnh size dựa vào kích thước item bên trong, shrink hay grow cũng thế. Grid tốt hơn vì chỉnh size dựa vào kích thước các cell bên ngoài set từ trước.
VD https://www.youtube.com/watch?v=Ns12ALe8aqI&list=WL => 2 flexbox có content bên trong khác nhau sẽ có tốc độ shrink content khác nhau. 
Để fix: phải dùng flex-basis, nó khiến các thẻ content cố gắng đạt được 1 mốc width thì sẽ giống nhau. Các thẻ có thể shrink hay grow xác định chuẩn là xong
=> Nếu cần chia chuẩn cột cho các hàng, nên dùng grid, còn chỉ cần xuống dòng bth thì dùng flex responsive. Flex k xử lý trước trường hợp row cuối cùng k full

Các phần tử trong flex sẽ mở rộng theo kích thước của chính các phần tử đó. Nhưng nếu mọi phần tử trong 1 flexbox đều được set flex-grow, thì kích thước từng cái sẽ chia theo tỷ lệ đó luôn => Cách để chia tỉ lệ phần tử trong flexbox, chạy như grid. Chú ý là tỉ lệ phần tử k tính padding, nếu item có padding sẽ to hơn bth.




# Dùng display grid
Giống flexbox nhưng custom chia vị trí từng ô tốt hơn.
Grid master: https://css-tricks.com/snippets/css/complete-guide-grid/?fbclid=IwAR0hXkP7RHqFTVbuRnF-Vau0VqkVig1dQn6gpfa80ig3bMo7mPzW0m6DdpM

-> grid-gap: 10px; là kc giữa các ô. Có column-gap, row-gap

-> grid-template-columns: 10% 10% 10%; là chia 3 thẻ bên trong làm 3 cột, một cột chiếm 10%. 
grid-template-columns: 1fr 1fr 1fr; hoặc (auto auto auto) cx là 3 cột bằng nhau. Hoặc repeat(3, 1fr) viết lặp
grid-template-rows: 300px 100px; => row1 cao 300px, row2 cao 100px, các row sau kích thước mặc định k fix
grid-template-columns: repeat(3, minmax(200px, 1fr));

-> grid-column / grid-row là 1 phần tử chiếm bnh cột và hàng. Vd: grid-row: 1 / span 2; là item này bắt đầu từ row1 và kéo dài 2 row

-> grid-auto-rows sẽ set kích thước chiều cao mặc định cho row mói được thêm vào, nếu ta k set bằng grid-template-rows cho nó thì sẽ lấy cái này; Tương tự grid-auto-columns

-> grid-template-areas để sắp xếp các item vào grid theo label. Kết hợp grid-area khi responsive đổi vị trí area.

-> grid-area còn là short của grid column và grid row. VD:
VD grid-area: 2 / 1 / span 2 / span 3; => thẻ ở row 2 column 1 kéo dài 2 rows 3 column
VD grid-area: 1 / 2 / 3 / 4; => tương đương với grid-row-start: 1; grid-column-start: 1; grid-row-end: 2; grid-column-end: 2; => Kéo dài từ row1->row2, col2->col3

-> grid-auto-flow: column; ưu tiên xếp hết từng col trước. 
grid-auto-flow: row dense; => vẫn xếp đầy row nhưng fill vào các chỗ trống trước đó nếu đủ, điều này làm mất thứ tự

-> grid có thể dùng cho 1D layout để tạo khi các cột đều bằng nhau => tốt hơn flexbox. Dùng flex box khi cần các item theo kích thước riêng của chúng
Chỉ cần dùng {
  grid-auto-flow: column; // để nó xếp trong 1 hàng
  grid-auto-columns: 1fr; // để các phần tử mới thêm vào grid đều cùng kích thước nhau
}
- flexbox có thể dùng cho 2D layout, chỉ cần set flex wrap, khác với grid là có thể để các cột không cùng kích thước nhau, cứ có kích thước đúng của nó là được
 
-> grid-template-columns có thể tự định nghĩa grid line names để dùng trong các trường khác
Dùng grid là container được: browser -> Elements -> Layout -> show line names để thấy grid line names
URL: https://www.youtube.com/watch?v=c13gpBrnGEw

-> Căn giữa phần tử cuối cùng của grid: 
Dùng flex box căn giữa ok nhưng sẽ full width, nếu ta set max-width chứ k full width thì khi màn hình co chỉ còn 1 column muốn full lại k được nx. Nếu k muốn như vậy thì dùng grid
Có thể tạo kim tự tháp card bằng grid bằng cách tương tự



# Responsive css
Test responsive phải chú ý cả TH VD điện thoại xoay ngang, width có thể gấp 3 lần height và height cực kỳ nhỏ.

-> color-scheme: light/normal/dark sẽ tự đổi màu đen trắng mà k cần set màu thủ công, dùng ở :root để đổi tất cả.

-> Dùng @media:
@media not|only mediatype and (mediafeature and|or|not mediafeature) { CSS-Code; }
với mediatype là: all / print / screen
media feature là:  color, color-index, max-device-aspect-ratio, min-height, min-device-width, min-device-pixel-ratio, resolution, orientation (portrait/landscape)
orientation portrait/landscape => vì điện thoại xoay ngang và điện thoại xoay khác nhau, k thể chỉ @media theo mỗi width. Mở rộng với min-aspect-ratio

VD: @media (min-width: 100px) {} => tương đương @media all and (min-width: 100px) {}
VD: @media (min-device-width: 100px) {} => thì kích thước tính cả thanh công cụ và thanh cuộn => k dùng
VD: @media only screen and (max-width: 480px) and (min-width: 320px){ } => kích thước từ 320->480 của màn hình máy tính or smartphone
VD: @media only print { } => chỉ cho máy in
VD: @media (100px <= width <= 300px) {} => luôn dùng
VD: @media only screen and (max-width: 100px) and (orientation: landscape), screen and (min-width: 100px) {} => Áp dụng cho các thiết bị màn hình có width nhỏ hơn 100px và chiều rộng lớn hơn chiều cao, k bao gồm thiết bị đọc màn hình hay in ấn, đồng thời áp dụng cho mọi loại thiết bị hiển thị bao gồm cả in ấn và thiết bị đọc màn hình nếu width lớn hơn 100px
Có thể responsive từ thẻ link, kiểu chia mỗi màn 1 file css. VD <link rel="stylesheet" media="mediatype and|not|only (media feature)" href="mystylesheet.css">
=> Các thuộc tính và responsive các kích thước cơ bản: https://freetuts.net/su-dung-media-css-tao-responsive-cho-website-660.html

--> @media (prefers-color-scheme: dark) { } là khi user setting dark mode trong phần mềm sử dụng or thay đổi user-agent (light/dark/no-references) => k cần thiết
--> @media (prefers-reduced-motion) {} là khi user setting giảm thiểu animation cho web. Setting này của browser để web ít animation cho đỡ lag.

--> K dùng được css var trong @media. VD @media screen and (max-width: --mobile-size){} => sai ngay
Dùng sass thì vẫn được vì nó phân tích cú pháp và paste vào tại thời điểm compile. CSS thuần thì có package postcss-css-variables giúp làm điều đó.

-> Có thể responsive bằng JS với event resize, k sợ browser k hỗ trợ @media 
Dùng @supports (display: grid) and (not (display: inline-grid)) { } để check browser có hỗ trợ thuộc tính nào không. VD dùng để check nếu k hỗ trợ thì in ra đoạn text "Browser not support this feature!" và display none phần nào sử dụng.

-> Container query: xử lý case đôi khi màn hình nhỏ dần mà kích thước container lại tăng
URL: https://topdev.vn/blog/responsive-giao-dien-cuc-dinh-voi-container-queries  /  https://www.youtube.com/watch?v=rrLAg7xNERA
container-type: size là lấy theo 2 chiều, inline-size là lấy theo 1 chiều ngang thôi. Kích thước container theo chiều được lấy defines kích thước của content.
@container tự tìm container bao ngoài đúng là parent đầu tiên, dùng thêm container-name nếu muốn rõ ràng hơn.
Dùng đơn vị 50cqw để set kích thước theo width của container, nếu k có container sẽ dùng như vw
container: main / inline-size; => shorthands container-name / container-type

--> Chốt: Dùng container-name chỉ cần set cho phần tử cha, tự dùng container gần nhất bao nó, 50cqw.

->***Có thể responsive tương đối với grid, k cần biết con số cụ thể px để style thủ công nữa
- flex-basis: set kích thước initial cho flex item và item tự điều chỉnh sau. Set là 0 thì item tự mang kích thước nhỏ nhất fit content. Nếu các item set là auto thì chia đều nhau. Nếu set quá container luôn thì item sẽ max có thể trong giới hạn container thôi. 
VD: container 100px, item1 50px, item2 30px. Nếu set flexbasis item1 là 1000px thì nó chỉ tới 70 thôi, nếu set flexbasis item1 là 10px thì nó mang width là 50px để hiển thị đầy đủ item
Các thẻ cố gắng mang kích thước đó, phần space thừa sẽ được chia ra. Các thẻ mở rộng tuỳ vào flex-grow. Nếu container nhỏ hơn thì lại co theo tỉ lệ dựa vào flex-shrink
- clamp(min,value,max): browser set giá trị là value, nếu value nhỏ hơn min sẽ set là min, lớn hơn max sẽ set là max. Value ở giữa thường là relative.
- auto-fit: grid sẽ cố gắng "điền đầy" không gian bằng cách dãn phần tử => nên dùng auto-fill hơn vì nó cố điền nhiều cột nhất có thể
- minmax(min,max): container bao nó nhỏ hơn min, lấy min; container bao nó lớn hơn max, lấy max; container nằm giữa, lấy container; Tức nó set gom max-width, min-width thôi.
=> Kết hợp hàm calc có thể kết hợp relative và absolute, điều này đủ mạnh để thay thế media query.

VD: Chỉ cần grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); là đã tự responsive chia cột, nếu mỗi phần tử k thể nhỏ hơn 100px sẽ tự giảm 1 cột
auto-fit hết container, cố gắng fit full width với các phần tử hiện tại khi chỉ có 1 row
auto-fill những cột còn lại, thì sẽ lấy min width và cố gắng tưởng tượng còn nhiều cột khác xép vào
VD: (200px - 100%)*999  là check nếu container lớn hơn 200px sẽ trả ra số âm cực bé, và ngược lại là dương cực lớn
VD flexbox có 2 tag con, tag con sẽ tự hiện lên nếu mang kích thước đủ: https://www.youtube.com/watch?v=LEkFckg7sfw
.with-sidebar {
  --main-min-width: 45ch;
  --sidebar-size: 250px;
  --gap: 2rem;

  display: flex;
  gap: var(--gap);
  flex-wrap: wrap;
}
.with-sidebar > * {
  flex-grow: 1;
}
.with-sidebar > :first-child {
  flex-grow: 999;
  flex-basis: calc(
    ((var(--main-min-width) - (100% - var(--sidebar-size) - var(--gap))) * 9999)
  ); // Tức flex-basis xếp trước vào vị trí, k đủ sẽ đẩy thẻ xuống (flex-basis là NN xuống dòng), sau đó mới tính flex-grow, flex-shrink các thứ
  // Nếu vừa có flex-basis, vừa có flex-grow, nó vẫn chỉ cố grow đến mức đạt được flex-basis thì thôi, chứ đạt r sẽ k grow quá nữa làm gì
} 
.with-sidebar > :last-child {
  flex-basis: var(--sidebar-size);
}
VD code mẫu grid nhảy cột từ 1 tới 4:
.columns {
  /* user setting */
  --min-column-size: 200px;
  --column-count: 4;
  --gap: 2rem;
  
  /* calculations */
  --breakpoint: calc(var(--min-column-size) * var(--column-count) + (var(--gap) * (var(--column-count) - 1)) );
  --column-size: calc((100% / var(--column-count)) - var(--gap));
  
  display: grid;
  gap: var(--gap);
  
  grid-template-columns: repeat(
    auto-fit, 
    minmax(
      min(max(var(--column-size), (100% - var(--breakpoint)) * -999 ), 100%), 
      1fr)
    );
}
Có code mẫu tăng dần cột từ 1 tới 1 số chỉ định

-> Thêm max-width 100% cho ảnh vì website luôn tự responsive co các item lại rồi => css reset 
Tư duy responsive: kích thước ta set k cố định mà để cho browser tự set vì nó tự co item khi nó co lại. Ta chỉ cần set, min max để giới hạn k được nhỏ hay lớn hơn bao nhiêu thôi
Tối ưu @media query, vd muốn màn lớn thì 2 col, màn nhỏ thì 1 col. Mà mặc định grid là 1 col, nên ta để mặc định 1 col, @media min-width thì set 2 cols. Chứ mặc định set 2cols, sau màn nhỏ lại phải chỉnh thì phải sửa grid-template-columns 2 lần lận => thường thì media query toàn dùng min-width



# Animation basic
Tìm animation đủ loại => search #topcsseffects trong youtube kênh hơn 1000 video chỉ giới thiệu css animation

-> transition: [thuộc tính chuyển động] [thời gian chuyển động] [thời gian delay] [kiểu chuyển động];
Đổi trạng thái cho các thuộc tính liên quan đến số và màu, VD background-image k có tác dụng nhưng có thể fake chỉ bằng cách animate opacity các ảnh
VD: transition: all 1s 0.5s ease-in; hoặc transition: width 2s, height 2s, transform 2s;
cubic-bezier custom, ease/ease-in-out châm nhanh châm, ease-in chậm nhanh, ease-out nhanh châm
transition-delay

transition k dùng được với width hay các giá trị k rõ như auto
VD có thể set padding 0 -> unset, fontSize 0 -> unset, scaleY(0) -> scaleY(1)
Trong React ta dùng style={appear ? {fontSize: "unset"} : {fontSize: 0, padding: 0, opacity: 0}} + transition là được
pointer-events => sự kiện xử lý ở JS nhưng có thể set css để k cho thẻ bắt sự kiện nữa được

-> animation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-direction] [animation-fill-mode] [animation-play-state];
animation-duration là thời gian từ lúc bắt đầu cho đến khi kết thúc
animation-delay là thời gian chờ trước khi hiệu ứng bắt đầu chạy
animation-iteration-count dùng số or infinite, số float cho ra animation dừng giữa chừng
animation-direction thì normal là đi về phía trước, reverse là về phía sau, alternate làm chuyển động được quay ngược lại kiểu 5s đầu là 0%->100% và 5s sau là 100%->0%, alternate-reverse ngược lại với alternate
animation-fill-mode: Khi kết thúc animation, nếu để none or k set gì thì mặc định dùng style ban đầu khi animation k thực thi, nếu set forwards sẽ dùng giá trị khung cuối, backwards dùng giá trị khung hình chính ở đầu animation (lúc 0%); both là hòa trộn forward và backwards; 
animation-play-state: paused hay running
=> Lưu ý để đảm bảo animation liên tiếp nhau k kiểu bị ngắt quãng thì nên setup sao cho giá trị mặc định lúc 0% bằng với giá trị lúc 100% để làm vô tận mượt hơn
VD tạo animation hover mới có thì nên để animation-play-state là paused, hover thì running để tránh animation chạy mãi sẽ ngốn CPU: https://www.youtube.com/watch?v=M1qPpwVcF64

VD animation: name(hello) duration(2s) timing(linear) delay(2s) inter-count(infinite) direction(alternate/normal)
=> animation còn có SVG, ảnh động, 3D. URL full: https://viblo.asia/p/tap-tanh-tim-hieu-css-animation-bai-1-transition-4dbZNprL5YM 

-> animation-timeline giúp control thuộc tính animation phụ thuộc vào hành động của user hoàn toàn bằng css. VD chỉ khi scroll thì animation mới chạy, tạo parallax
view(), scroll(), scroll-timeline-name: --squareTimeline;

-> Vd hover button to ra: 
Nếu có thể, nên cho button to sẵn và scale nhỏ lại, hover thì trở về kích thước ban đầu
Nếu không, cách tốt nhất là scale(1.2) lên và bị mờ. Để fix:
- will-change: transform; sẽ đưa gợi ý cho browser biết sẽ thay đổi như nào để optimize, hạn chế dùng vì browser xử lý expensive có thể gây lag.
- backface-visibility: hidden; chặn hiển thị mặt sau giúp giảm mờ.

-> Animate svg khi hover: các tag svg dùng đc animation css như bth, dùng cho các thẻ path hay g bên trong để animate 1 phần của icon cũng được luôn
Khi đó ta gán id cho nó, set animation-play-state là paused mặc đinh, khi hover vào thì đổi lại thành running là ok

-> Hiểu nguyên tắc xếp chồng code css: style được thêm vào sau sẽ đè lên style được thêm vào trước đó. Ở mỗi thời điểm, ta chỉ cần hiểu nó có style gì là được. VD animation forwards thực tế là style cuối cùng được thêm vào thẻ và cố định như v luôn.
transition sẽ luôn giúp thuộc tính css bị biến đổi từ từ nếu có sự thay đổi. 
Nếu muốn khác đi, nên dùng animation keyframes. Mọi lúc animation có sự thay đổi khác biệt đều là 1 keyframes riêng. 
VD: animation ẩn và hiện, néu dùng keyframes thì buộc lúc hiện và ẩn là 2 keyframes phải tạo ra.
=> Tưởng tượng animation như các stack xếp chồng lên nhau khi set sẽ dễ hơn

-> Trong js có event "transitionend" bắt khi quá trình transition kết thúc.
VD: ta muốn 1 thẻ bị faded rồi biến mất. Nếu ta dùng keyframes với opacity sẽ k biến mất, nếu dùng display sẽ k có animation. Có thể dùng opacity rồi bắt sự kiện "transitionend" để gán display none là được.
Cách khác là setTimeout đúng bằng thời gian transition rồi xoá thẻ.
=> Tương tự có sự kiện animationend

-> interpolate-size: allow-keywords; quá mạnh, cho phép animate theo các giá trị auto, min-content, max-content, fit-content
VD text dài thì min-content thì chỉ đủ kích thước 1 từ dài nhất, max-content là khi text trải dài hết ra
=> Luôn để ở :root sẽ áp dụng với mọi thẻ



# View transition API
View transition API giúp chuyển trạng thái mượt như app bth. Full tut: https://developer.chrome.com/docs/web-platform/view-transitions/
Sẽ có animation khi update DOM hoặc animation khi navigate tới 1 pages cùng origin khác. Điều này có thể làm bằng css thuần nhưng vẫn bị jump khi chuyển sang pages, view transition api chuẩn hơn và sẽ tự tối ưu performance

-> Giải thích view transition api: https://www.youtube.com/watch?v=xZteiW-cun8
Có thể đổi view-transition-name ở từng thẻ, customize animation của view transition api (mặc định là fade).

-> Để đổi DOM bth trong SPA, chỉ cần cho hàm update DOM vào document.startViewTransition => dùng css thuần sẽ phải ốp animation mọi tag là ngu xuẩn.

-> Để cross-document transition cùng origin:
C1 ngu: fetch pages đó về rồi thế vào innerHTML pages hiện tại trong startViewTransition. Tức dùng như single page nhưng chả ai làm vậy.
C2: view transition api có cách riêng để dùng cho cross-document. Nó chờ fetch xong hết rồi animation chuyển pages.

--> document.createDocumentTransition ấn tiến lùi thì ok chứ ấn thẻ a éo được => éo dùng
await document.createDocumentTransition().start(() => {
  window.location.href = 'y.html';
});

--> Cách chuẩn MPA + view transition api là dùng: @view-transition {
	navigation: auto;
}
::view-transition-group(root) {
	animation-duration: 0.5s;
}
=> Code hack: trong head phải có ít nhất 1 <script src="ignored"></script> nằm ở sau thẻ link css, hoặc nếu không thì phải viết đủ: 
<script src="ignored" type="module" blocking="render"></script>

VD có thể tạo animation navigate multiple page trước đó k thể làm được bằng css js thuần

--> Mặc định nó chỉ fade, nếu muốn animation cụ thể, phải dùng view-transition-name
VD: dòng text ở trang này bé, ở trang sau vẫn là dòng text đó nhưng to hơn, thì ta gán view-transition-name cho 2 tag ở 2 page cùng 1 giá trị là ok
Chú ý nếu dùng page1 span -> page2 h1 thì sẽ phóng to, nhưng cả 2 page cùng tag span thì lại k.

URL khi cần custom animation toàn page, định hình hướng tiến hay lùi page bằng JS: https://view-transitions.chrome.dev/stack-navigator/mpa-prerender/ 

--> pageshow là sự kiện phát khi load pages lần đầu tiên, hoặc navigate tới
pagereveal là sự kiện phát ra khi nội dung được render, bất kể nội dung từ cache, prerender hay refresh mới.
pageswap là khi load hẳn 1 document mới, document cũ sẽ bị unload luôn sẽ phát



# Other:
-> Nguồn ảnh free: https://www.pexels.com/ ảnh và video chất lượng
https://unsplash.com/ ảnh đa dạng hơn, có cả thông tin máy chụp, tiêu cự, ống kính

-> Vd Tạo tooltip cho thẻ a: cho thẻ a relative bao thẻ b absolute có visibility là hidden -> style hover a thì visibility của b là visible
visibility vẫn chiếm không gian nhưng k nhìn thấy hay tương tác, dùng với position absolute để thành k chiếm kg. Nó khác với opacity vẫn có thể tương tác

Vd Tạo navigation thì dùng ul list thẻ a: Cho text-decoration là none và :hover vào thì đổi thành gì, :active tức link hiện tại đang được chọn thì style như thế nào. Dùng list-style-type: none; cho list. Navigation bar dọc thì li dùng display:block, navigation bar ngang ta dùng thẻ li có display: inline;

VD Tạo stack card khi scroll: Cơ chế là cho position sticky với padding top để các thẻ k bị scroll đi mất mà luôn đính ở 1 chỗ như v
Để tạo animation phức tạp khi scroll, dùng JS sửa 1 biến --scroll là được: https://css-tricks.com/books/greatest-css-tricks/scroll-animation/

-> WebComponent: https://www.freecodecamp.org/news/write-components-that-work-in-any-framework có thể tạo ra các tag html thuần để dùng được ở mọi framework.
Google có tool Lit giúp tạo web component dễ hơn. React19 cũng hỗ trợ webcomponent dễ dàng hơn r.

1 tag html thuần gồm: - HTML <template> là tag đặc biệt mà nội dung k được render trực tiếp mà phải được copy rồi mới render ra
- Shadow DOM là phần css k bị ảnh hưởng khi người dùng global style các thẻ. Dev dùng k thể custom shadow DOM. VD nut pause start trong <video>
Có thể enable google devtool để nhìn thấy shadow DOM của các thẻ

-> Dừng:
{ display: list-item; list-style-position: inside; } để hiển thị thẻ dạng list. Còn có display: table;
Tạo polygon responsive thuần: https://css-tricks.com/hexagons-and-beyond-flexible-responsive-grid-patterns-sans-media-queries/
@property và css houdini can thiệp sâu vào animation
https://www.frontendmentor.io/ => học Fremaster
https://courses.kevinpowell.co/view/courses/conquering-responsive-layouts/233002-introduction/1007804-intro-why-the-course-is-formatted-in-this-way => khoá học responsive uy tín (hieucuopbien123@gmail.com - 180101)

-> Tổng kết thiết kế tối thiểu: tạo dự án, darkmode, chia file css var và các style common, routing chuyển pages, responsive, BEM
- Tạo dự án: parcel import npm; html thuần import cdn; react;
- Hosting: Github pages, netlify.
- Darkmode: scss dùng map; css thuần dùng var có thể set từ checkbox hoặc dùng JS set data-theme attribute cho thẻ body, hoặc viết thủ công như cách scss sau khi tạo ra; Dùng css relative color tạo color palette.
- Chia file: html thuần chia mỗi pages 1 file; css chia style chung và riêng từng pages ở các file riêng rồi import file css trực tiếp lẫn nhau được; scss cũng style chung từng file, từng pages @use các file chung đó, chia cả file components các thứ, cuối cùng quy hét về 1 file scss duy nhất @use tất cả để compile bằng 1 lệnh thôi, mọi pages đều phải script tới file chung đó dẫn đến style thừa nhưng chả sao.
- BEM: scss dùng &--container, css cũng vậy. Trong file css 1 pages có <section>__<subsection>__<content>, max là 4 level. CSS Selector 1 level thôi, chia với @layer và @scope
- Responsive: dùng css var với responsive hack grid flex, dùng clamp; Dùng @container > @media; scss dùng @mixin chia từng màn hình @media thuần và css hack
- Routing chuyển pages: chuyển page load lại mọi thứ, có thể prefetch trước file cho pages same site <link rel="prefetch" href="./page2.html">; Dùng history.pushState + URLSearchParams cho đổi url mà k chuyển page, dùng thẻ a or window.location.href để thực sự chuyển pages; Dùng view transition api; Dùng session storage lưu data các pages;


