# Basic
Cú pháp SASS(Syntactically Awesome Style Sheets) và SCSS(Sassy Cascading Style Sheets) như nhau chỉ là: SASS k có {} mà dùng tab và enter để phân cấp và xuống dòng, còn SCSS có {} => mặc định code SCSS vì nó giúp cú pháp rõ ràng hơn. Bỏ {} là thành SASS.
Code css3 trong file.scss thoải mái

-> Cài trong VSC:
Để dùng command line: npm i -g sass 
Để có sass live compiler: Tải extension sass live compiler -> ấn nút sass watcher -> khi save file scss sẽ tự compile ra css live
--> Dùng sass trong React
npm i sass => import file scss dùng trực tiếp như bth thôi

sass <link file>.scss <link file đích>.css --style compressed => bỏ khoảng trắng để nén file thành 1 hàng
sass <link file>.scss <link file đích>.css --style expanded => mở rộng chuẩn đẹp như code tay dùng 2 space

--> sass --no-source-map .:../css => compile mọi file scss trong thư mục hiện tại vào thư mục css
sass --watch .:../css

sourcemap url giúp trình duyệt hiển thị style đang nằm ở file scss nào, nếu k có chỉ hiện file css, ta phải tự tìm ngược về scss để sửa

--> Khi scss sang phiên bản mới. Vd giới thiệu các module riêng, Vd dùng @use và @forward thay thế @import. Có thể dùng sass-migrator module <path> để chuyển đổi mọi file scss ở phiên bản cũ sang bản mới tự động => kqtr
Dùng @import không xử lý trùng lặp khi @import cùng 1 file ở nhiều file, buộc phải dùng @use.

-> Dùng câu điều kiện if else
Dùng vòng loop for, while, each
Dùng function return ra giá trị cho thuộc tính
Xử lý chuỗi, số

-> Nested selector: cho phép dùng lồng nhau với & biểu diễn thẻ hiện tại để style

-> Dùng kế thừa:
Dùng placeholder khi class Cha k được dùng riêng bởi bất cứ 1 thẻ nào mà luôn dùng thông qua class Con

-> Dùng @mixin giúp tái sử dụng, có thể gom 1 phần code css vào và dùng nó ở bất kỳ đâu với từ khóa @include, có thể truyền biến vào
Dùng @content



# Nhanh
Phải hiểu nó dùng các thứ trong phạm vi nào:
- Biến, function thêm 1 giá trị cho 1 attribute của class
- class, placeholder dùng trong phạm vi 1 class khác để thêm thuộc tính cho nó
- Câu điều kiện, vòng loop dùng để tạo ra class mới
- mixin thì dùng được với cả 2 case trên, nó có thể thêm thuộc tính cho 1 class có sẵn or khai báo 1 class mới

//!!!!!!!
-> Dùng scss dự án lớn:
- Chia style common, css reset, themes, style từng phần tử, mixin biến hàm chia file common riêng.
- Có thể 1 folder scss riêng, hoặc file scss ở ngay cùng cấp với file html tương ứng.

VD1: nên chia scss cùng cấp với flie html từng component. Còn file common thì để cấp ngoài cùng. 
src/index.scss chứa common css, css var
src/themes/mixins.scss chứa common mixin
src/themes/variables.scss chứa common scss variables
src/themes/các scss link từ các library
=> File nào cần style common thì import vào là xong. Trong React dùng node-sass tự làm mọi thứ k cần lo việc compile nữa

VD2 có thể chia scss 1 folder riêng cho mọi phần tủ ở mọi nơi, ngoài cùng có index.scss use tất cả file. Khi compile chỉ cần compile 1 file index.scss đó thành 1 file css duy nhất là xong:
scss/
├── base/
│   ├── _reset.scss
│   ├── _typography.scss
│   └── _base.scss
├── components/
│   ├── _buttons.scss
│   ├── _cards.scss
│   └── _modals.scss
├── layout/
│   ├── _header.scss
│   ├── _footer.scss
│   ├── _grid.scss
│   └── _sidebar.scss
├── pages/
│   ├── _home.scss
│   ├── _about.scss
│   └── _contact.scss
├── themes/
│   ├── _default.scss
│   └── _dark.scss
├── utils/
│   ├── _variables.scss
│   ├── _mixins.scss
│   └── _functions.scss
└── main.scss

utils/_variables.scss:
$primary-color: #3498db;
$secondary-color: #2ecc71;
$font-stack: 'Helvetica, Arial, sans-serif';
:root {
  --primary-color: #3498db;
  --secondary-color: #2ecc71;
  --font-stack: 'Helvetica, Arial, sans-serif';
}

utils/_mixins.scss:
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

utils/_index.scss:
@forward 'variables';
@forward 'mixins';
@forward 'functions';

main.scss:
@use 'utils/index' as *;

@use 'base/reset'; // dùng namespace là reset
@use 'base/typography' as t; // dùng namespace là t
@use 'base/base';

@use 'components/buttons';
@use 'components/cards';
@use 'components/modals';

@use 'layout/header';
@use 'layout/footer';
@use 'layout/grid';
@use 'layout/sidebar';

@use 'pages/home';
@use 'pages/about';
@use 'pages/contact';

@use 'themes/default';
@use 'themes/dark';

// Other common style
body {
  font-family: $font-stack;
  color: $primary-color;
}
.container {
  @include flex-center;
  padding: rem(16);
}

--> Chú ý tuân thủ BEM:
.button {
  background-color: var(--primary-color);
  &--primary {
    background-color: var(--primary-color);
  }
  &--secondary {
    background-color: var(--secondary-color);
  }
  &__icon {
    margin-right: rem(8);
  }
}


