# Sitemap
robots.txt là file kiểm soát quá trình crawl của search engine, sitemap.xml giúp search engine đánh chỉ mục dễ hơn sẽ SEO tốt hơn.
Sitemap chứa thông tin về các url cần crawl và cấu trúc nội dung, cải thiện SEO, dễ đánh chỉ mục hơn với web có nội dung động. 
Tạo r đặt cùng index.html, nhét vào robots.txt để gg biết, host lên, đăng ký sitemap với Google Search Console theo dõi thống kê hiệu suất các trang để biết mà cải thiện SEO.



# Xử lý image
URL: https://bennettfeely.com/clippy/ => kích thước vẫn thế nhưng hiển thị cut ảnh clip-path
URL: https://www.youtube.com/watch?v=oWXm5n-Zi38 => thực sự học master clip-path
URL: https://css-generators.com/svg-to-css/ => convert hàm path thành hàm shape dùng cho clip-path trong css. Shape y hệt nhưng friendly hơn thôi.
URL: https://yqnn.github.io/svg-path-editor/ => linh động hơn

=> Ứng dụng tạo diamond grid: https://www.youtube.com/watch?v=A5GXdjEOvos&list=WL&index=98

-> Vì để phòng khi ta dùng ảnh low res load trong background-image. Nên kết hợp với: 
<link rel="preload" as=image href="./lowresimage.png" fetchpriority=high>
Thẻ <img> nên luôn set width height ngay trong nó để tránh layout shift, kèm với background-image low res.

-> Có multiple background image. background-size background-image background-repeat background-color (dùng kèm background image được sẽ nằm ở dưới)
background-position kiểu vị trí x,y của ảnh trùng với vị trí x,y nào của khung. VD center center hay 0 0 là tâm ảnh trùng tâm khung hay 0,0 của ảnh trùng 0,0 của khung. background-image hiện trong phạm vi content, nếu dịch tràn ra ngoài sẽ k dịch chuyển trừ khi cho repeat hoặc background-size lớn 

background: <background-color> <background-image> <background-position> / <background-size> <background-repeat> <background-attachment> <background-origin> <background-clip>;
VD: background: red url('image.jpg') center / cover no-repeat fixed padding-box content-box;

background-origin xác định vị trí của background image theo content. 
background-clip text => sẽ lồng background image vào trong text, buộc phải bỏ màu của text mới hiển thị ảnh, color or -webkit-text-fill-color: transparent; => giải quyết vđ k set gradient color cho text color đc
background-blend-mode chỉ có tác dụng khi có màu chồng lên nhau: https://www.w3schools.com/cssref/playdemo.php?filename=playcss_background-blend-mode
background-attachment: scroll mặc định là trôi theo page scroll bar; local là trôi theo scrollbar của content; fixed là background fix k trôi, tạo parallax

background-repeat space tương tự repeat nhưng repeat bị cắt khi ra ngoài phạm vi vì kích thước content k thể luôn chia hết cho kích thước background được. Còn space sẽ xếp mà k bị cắt, khoảng trống thừa ra sẽ chia đều giữa các ảnh

VD: background-origin apply cho cả background-color và background-image, k thể chỉnh riêng hay chia từng image

-> Các thuộc tính image filter: https://www.w3schools.com/css/tryit.asp?filename=trycss_ex_images_filters

-> Layer mask: mask là shorthand của mọi thuộc tính mask-* trong css
Dùng style cho 1 thẻ để tạo 1 lớp hiệu ứng bên trên thẻ đó. VD hiển thị bức ảnh theo phần ảnh của 1 bức ảnh khác, ta cho bức ảnh khác đó lên 1 lớp bên trên.
VD mask-image: linear-gradient(black, transparent);
VD mask: url(masks.svg#star) 0 0/50px 50px no-repeat; => đặt mask tại vị trí 0 0 từ top left và width height mask là 50px 50px, lấy thẻ có id là star trong hình svg
VD mask: url(masks.svg#star) left / 16px repeat-y; => element là mask ở phía bên trái với width 16px. Mask position phải xác định 2 giá trị như left top, mặc định nếu chỉ set 1 giá trị thì giá trị còn lại sẽ là center
VD Mask mờ 2 bên thẻ:
mask: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, black 20%, black 80%, rgba(0, 0, 0, 0) 100%);
-webkit-mask: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, black 20%, black 80%, rgba(0, 0, 0, 0) 100%);
Còn có mask composite

-> Setup image:
Setup ảnh object-fit contain, object-position center center, min-width width aspect-ratio, border-radius, overflow hidden

--> Dùng onError check ảnh lỗi thì hiển thị ảnh lỗi mặc định chứ k show hình lỗi xấu.
HTML có thẻ object show mọi loại media, nếu bị lỗi sẽ tự show thẻ con của thẻ object rất hay => ít dùng vì kp chuyên cho ảnh.
onLoad check ảnh tải xong => có thể dùng ẩn spinner nếu dùng 1 thẻ spinner riêng hay lấy kích thước ảnh sau khi tải xong.

VD: <img src="invalid_link" onerror="this.onerror=null;this.src='https://placeimg.com/200/300/defaultiamge';" >
Việc dùng this.onerror=null chống lỗi infinity loop. Lỗi này xảy ra ở 1 số trình duyệt khi chính ảnh để ta fix lại bị lỗi xong lại chạy onerror lại lỗi và cứ lặp vô tận
Nếu sợ lỗi infinite loop, thì có thể set 1 bức ảnh backup onerror local đảm bảo luôn tồn tại là được => ***nếu sợ lỗi mạng, dùng base64 cho blur image đảm bảo ảnh đó sẽ luôn exist.

--> Dùng lib: Khi làm với react thì onError k hỗ trợ mọi browser nên thư viện react-lazy-load-image-component sẽ lo điều đó với mọi browser
Thuộc tính PlaceholderSrc của LazyLoadImage nhận 1 ảnh kích thước nhỏ để hiển thị ra trước khi ảnh lớn được load. Ta có thể giảm độ phân giải ảnh bằng các công cụ chỉnh sửa để thế vào, thêm effect="blur" để làm mờ ảnh placeholder được
Lib react-progressive-graceful-image rất phù hợp dùng được thay thế cho tag object của html hiển thị ảnh placeholder, nếu ảnh lỗi thì chỉ hiển thị placeholder mặc định

--> Lazy loading ảnh: thuộc tính loading="lazy"/"eager" có sẵn của html

--> Ảnh nên nhét vào 1 container có aspect ratio và width responsive: có thể set contain và hiện trong khung, hoặc cover theo 1 trong 2 chiều, hiện ở tâm
Luôn set min-width min-height cho ảnh giảm layoutshift khi load xong

-> Ưu tiên dùng ảnh SVG để tránh bị mờ khi zoom lớn: svg dùng đồ họa vector có animation. Có thể tách file html riêng và cho vào <img>, or nhúng trực tiếp néu cần style.
SVG Sprites là pp gom các ảnh từng phần vào 1 file duy nhất và chỉnh vị trí cho chuẩn. Thay vì server nhận nhiều request từng tấm ảnh nhỏ thì chỉ cần 1 bức SVG là được
Có nhiều tool giúp vẽ tay SVG: https://topdev.vn/blog/svg-la-gi/

-> Các pp tạo ảnh mờ làm placeholder thay vì 1 màu xám hoặc 1 ảnh default hoặc skeleton loading:
- Tạo ảnh mờ mà ta có sẵn thì thu nhỏ r phóng to là xong
- Ảnh người dùng nhập có thể dùng BlurHash - lib giúp tạo ảnh mờ từ 1 ảnh khác, paste ảnh vào và lấy ra hash làm mờ.
- Data URL là 1 cách load ảnh bằng code với base64. Khi nhúng ảnh base64 vào code, tốc độ transfer ảnh tới client sẽ nhanh hơn nhưng trên mobile lại chậm hơn vì ngốn CPU render ảnh. Khi nhúng src http thì web phải fetch lần nữa tới src đó nên có thể lâu hơn nhưng k bị ngu trên mobile
1 cách khác là load image blur với base64, giảm chất lượng và chuyển sang base64 bằng tool khác, image thực thì để link url bth
Web chuyển ảnh thành data uri dạng mờ không cần dùng thư viện blur hash: https://blurred.dev/
- Cloudinary cung cấp url giúp tải ảnh blur nhẹ hơn của 1 image. 1 cách generate blur dynamic image.
VD URL gốc: https://res.cloudinary.com/hieucuopbien123/image/upload/v1688738028/eokcgjfzuedo2oobnzzb.png
Làm mờ nhẹ hơn: https://res.cloudinary.com/hieucuopbien123/image/upload/e_blur:100/v1688738028/eokcgjfzuedo2oobnzzb.png
Làm mờ kèm grayscale nhẹ hơn nữa: https://res.cloudinary.com/hieucuopbien123/image/upload/e_blur:1000,q_1,f_auto/v1688738028/eokcgjfzuedo2oobnzzb.png
Full tut custom: https://cloudinary.com/blog/low_quality_image_placeholders_lqip_explained#the_javascript_options_for_generating_lqips
Cloudinary cũng có cách giảm kích thước ảnh tối đa mà k mất chất lượng: https://cloudinary.com/blog/adaptive_browser_based_image_format_delivery

-> Tối ưu nén ảnh:
Các bức ảnh tĩnh đều nên cho qua tinyPNG / imagemin để giảm tải kích thước trước r mới lưu vào server.
Dùng định dạng WebP or AVIF sẽ giảm kích thước 30% so với jpg
Hoặc dùng cloudinary hay thư viện browser-image-compression để compress ảnh khi người dùng upload trước r mới lưu vào server.
Các framework như NextJS cung sẵn khi ta cho optimized true trong file config, nó còn optimize theo kích thước màn hình
Có thể tự chuẩn bị sẵn các bức ảnh khác nhau thủ công và cho load theo kích thước màn hình => có thư viện react giúp

-> Dùng <picture> tự đổi ảnh tùy vào kích thước màn hình mà k cần css hay js. <source> chỉ cung url, còn lại vẫn dùng tag image để chèn ảnh vào
VD: <picture class="image_container">
  <source media="(min-width:650px)" srcset="https://www.w3schools.com/tags/img_pink_flowers.jpg" type="image/jpg">
  <img src="" alt="" onerror="this.onerror=null;this.src='base64image';" loading="lazy">
</picture>

-> K dùng ảnh gif bị nặng hơn video rất nhiều. Dùng với các ảnh nhỏ muốn lặp vô hạn mà k cần media player thì ok => éo bh cần
K thì nên dùng APNG hơn



# Dùng scroll
Cơ bản tạo scrollbar trong 1 box: cho box là inline-block, white-space nowrap, overflow-x auto, set width không được fit-content mà responsive màn hình, thẻ con bên trong phải set minWidth bằng kích thước của box.
Tức chỉ cần cho container kích thước nhỏ hơn content và set overflow có scrollbar là được.
=> refer tới "Projects / Tinkerbellgarden"

overflow: clip; kết hợp với overflow-clip-margin: 30px; để kiểm soát overflow vẫn tràn ra ngoài mà k chiếm thêm kích thước

-> Custom style scrollbar: https://css-tricks.com/custom-scrollbars-in-webkit/
URL: https://www.w3schools.com/howto/howto_css_custom_scrollbar.asp
K dùng kèm scrollbar-width thin được mà set trong shadow dom, k sẽ lỗi

-> Để nhảy đến 1 vị trí trên trang html: đặt id rồi tại thẻ nào ta dùng tag a href đến #đó là được
scroll-behavior: smooth hay auto để trượt đến hay nhảy đến

-> overscroll-behavior: khi 2 scroll lồng nhau, cục bên trong scroll tới đích mà vẫn lăn tiếp chuột ở cục trong thì cục ngoài sẽ scroll (scroll chaining), contain để cản. Trên điện thoại tự có bounce effect, none để cản thêm bounce effect.

-> Có thể ẩn thanh scrollbar nhưng vẫn giữ nguyên chức năng

-> Dùng scroll-snap
- scroll-snap-type: x mandatory; xác định hướng và kiểu scroll. proximity là scroll tới sát mép card mới tự scroll vào đúng vị trí card nếu k sẽ lơ lửng, mandatory là trình duyệt tự snap theo từng điểm scroll mọi lúc theo cách ta dùng scroll-snap-align 
- scroll-snap-align là từng item sẽ có vị trí như nào với container bao nó. VD center là điểm giữa item trùng điểm giữa container, tương tự start và end. Điểm giữa của chiều nào tùy thuộc type dùng x hay y
- scroll-snap-stop: là khi lướt quá nhanh sẽ luôn dừng ở từng element(always) hay cho lướt qua(normal)
- Đôi khi ta k muốn chuẩn kiểu item hiển thị đúng ở 3 vị trí mà hiển thị ở hơi mé bên trái cách 1 vài pixel cơ thì:
scroll-padding dùng ở container sẽ cho mọi item bên trong được quyền hiển thị cách mép 1 khoảng bnh
scroll-margin dùng ở từng item sẽ cho phép cụ thể 1 item nào được phép hiển thị cách mép bnh
=> dùng được 4 chiều left right top down. Thường để kích thước container chia hết cho kích thước card bên trong

-> Scrollbar nên tạo chuẩn 1 thẻ con chứ body và html nên để overflow hidden cho dễ customize về sau:
- Khi scroll các thẻ liên quan, sẽ k ảnh hưởng đến scrollbar các thẻ khác, chứ scroll thẻ body sẽ ép mọi thẻ scroll
- Style chuẩn trong 1 phạm vi nhất định

-> K thể tạo được scrollbar có background transparent, chỉ cố tạo tạo background theo màu thẻ body thôi.
K nên dùng loading bar ngang: fetch API thì k nên vì mỗi component là loading độc lập; scroll thì phải đặt trong tag content và position fixed theo màn hình vì ta k scroll thẻ body; nếu chuyển page thì loading ngang thì k được vì MPA sẽ k thể tính được



# Kích thước khoảng cách trong CSS
-> auto do browser tự tính, chiều dọc lấy 0, chiều ngang lấy hết phần có thể lấy mà k ảnh hưởng các thẻ khác, nếu có nhiều cái cùng auto thì chia đều giá trị cho từng cái => Cần nếu muốn kích thước 1 thẻ bị kéo dài theo thẻ cha tự lấp đầy vào khoảng trống, bây giờ dùng -webkit-fill-available rồi
Hàm calc có thể tính các kiểu như 50% - 10px là 50% thẻ cha giảm 10px 

-> Đơn vị tuyệt đối: Chỉ đúng trên các thiết bị độ phân giải cao như máy in, còn trên laptop và di động kết quả cho có thể sai khác. VD 1in = 96px = 2.54 cm

Relative Units
em: tương đối so với font-size của phần tử cha
ex: Tương đối so với chiều cao chữ "x" của font hiện tại.
ch: Chiều rộng của ký tự "0" trong font đang dùng
*rem (root em): Giống em, nhưng là tương đối so với phần tử gốc, thường là <html> => sai, nó theo font-size set bởi browser trước cả tag html
*vw: Tương đối 1% width của kích thước cửa sổ trình duyệt (viewport).
*vh: Tương đối 1% height của kích thước cửa sổ trình duyệt (viewport).
vmin Relative to 1% dựa trên chiều nhỏ hơn của trình duyệt. VD điện thoại xoay dọc thì vmin sẽ là 1% của width
vmax Relative to 1% dựa trên chiều lớn hơn của trình duyệt
*%: Có giá trị tương đối so với phần tử cha.

VD thuộc tính có thể thay đổi phức tạp, ta k muốn đổi thủ công mà đổi 1 chỗ thì các chỗ khác cũng đổi thì nên cho các thuộc tính phụ thuộc vào nhau. Chẳng hạn thẻ container có padding gấp đôi padding thẻ X thì set padding container là 10rem, padding thẻ x là 5rem chẳng hạn. Xong responsive fontsize của thẻ root là xong

--> Các đơn vị mới dùng riêng cho mobile như lvh, dvh, svh, svw 
vh là chiều cao cơ bản, k đổi 
lvh là chiều cao lớn nhất khi k có toolbar, svh là chiều cao nhỏ nhất khi k có toolbar
dvh là chiều cao dynamic tự thay đổi khi toolbar ẩn hoặc hiện => luôn dùng

--> Trap: 1 thẻ có height 50% thì sẽ bằng 50% height thẻ cha. Nếu thẻ cha k set height tức tự vừa với thẻ con thì chả có gì nên là 0



# Xử lý màu
Tool sinh code gradient: https://angrytools.com/gradient/

-> Gradient css có 3 loại: linear kéo từ 1 phía sang 1 phía, radial kéo từ 1 điểm lan ra xung quanh, conic-gradient
--> Chú ý dùng background gradient thì truyền vào background chứ kp background-color
VD: background: linear-gradient(direction, color1, color2, color3, color4, ...);
VD: radial-gradient(circle closest-corner at 100px 100px, red 10%, yellow 20%, pink 10%); 
shape là circle, elipse (default, bóp méo theo khung bên ngoài)
size có thể là closest-side, farthest-side(default), closest-corner, farthest-corner at ... để set kích thước => tức màu cuối của radient chạm cạnh nào của box bao nó thì dừng
--> repeating-linear-gradient

-> Các cách lấy màu: rgba(255,0,0,0.5); rgb(255,0,0); hsl(0, 1005, 50%), hsla(0,100%,10%,0.3); #ffffff; dùng tên trực tiếp red, yellow
hsl thì hue có giá trị từ 0 đến 360, 0 và 360 cùng là đỏ.
color-mix giúp mix 2 màu trong không gian màu nào

-> mix-blend-mode: difference; => giúp đổi màu tương phản cực mạnh, nên dùng mọi lúc khi cần màu đổi ngay lập tức khi background đổi mà k sợ trùng màu bị ẩn đi
backdrop-filter: blur(5px); => style cho area trong phạm vi element nhưng đằng sau element => tạo glass morphism

-> Còn có sự sai lệch về màu sắc khi dùng browser khác nhau, đặc biệt là Safari so với Webkit. 
Ta k nên giả định 2 màu là giống nhau ở 1 thẻ so với 1 bức ảnh hay video. VD: video có màu nền là #f12312 vì ta dùng devtool để lấy màu => ta k thể dùng 1 thẻ cũng có màu #f12312 và giả định rằng 2 màu giống nhau được, đặt video bên cạnh thẻ kia sẽ thấy khác màu ở 1 số browser khác.

Có những màu đẹp có sẵn được support chuẩn ở mọi browser nên dùng: https://www.w3schools.com/cssref/css_colors.php

-> gradient nhìn đẹp hơn khi dùng không gian màu oklch thêm vào đầu
VD: linear-gradient(in oklch, red, blue);

-> Dùng relative color
:root {
  --clr-primary-rgb: 255 120 0;
  --clr-primary: rgb(var(--clr-primary-rgb));

  --clr-secondary-rgb: 0 255 25;
  --clr-secondary: rgb(var(--clr-secondary-rgb));
}
Dùng đổi opacity:
background: rgb(var(-clr-primary-rgb) / .5); => k chạy nhé, muốn tạo relative phải dùng from

--> Cách trên phức tạp, tạo 2 biến cho mỗi màu. Có thể dùng from tạo màu từ 1 màu khác và custom:
hsl(from #ff0000 / 0.5); => giảm opacity đi 0.5
hsl(from red h s calc(l - 20) / 0.5); => lấy màu đỏ và giảm light đi 20
hsl(from var(--clr-primary) h s 20%); => đổi rgb sang hsl, sau đó map thông số h và s, còn light set là 20%
rgb(from #ffff r g g / 0.5); => tương tự nhưng lấy màu green làm màu blue
oklch(from red calc(l * .5) calc(c * .1) h / 0.5); => oklch() là hàm tạo màu như lch() nhưng màu sắc cân bằng hơn. lightness, chroma (như saturation), hue.

--> Dùng color-mix
color: color-mix(in lab, black, currentColor); => currentColor sẽ lấy thuộc tính color của thẻ hiện tại và ở case này làm tối màu đó đi, k set sẽ lấy theo cha, rồi tạo ra màu này
VD ở light background cần chữ màu tối hơn, dark background cần chữ màu sáng hơn. Dù ta đã set đen trắng cho text rồi nhưng cần text có màu khác. Ta dùng:
color: color-mix(in lab, currentColor, red 70%); => giả sử chữ đỏ sẽ tự có màu đỏ đậm đỏ nhạt tuỳ bg cho đúng

linear-gradient cũng dùng được currentColor, dùng được mọi nơi cho màu

# Dùng conic gradient tạo hình zigzag 
.loader {
  height: 47px; /* control the size */
  aspect-ratio: 5;
  background:
    conic-gradient(from 135deg at top,#000 90deg,#0000 0) top,
    conic-gradient(from 135deg at top,#0000 90deg,#000 0) bottom;
  background-size: 20% 50%;
  background-repeat: repeat-x;
}

