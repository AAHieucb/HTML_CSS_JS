# Sitemap
robots.txt là file kiểm soát quá trình crawl của search engine, sitemap.xml giúp search engine đánh chỉ mục dễ hơn sẽ SEO tốt hơn.
Sitemap chứa thông tin về các url cần crawl và cấu trúc nội dung, cải thiện SEO, dễ đánh chỉ mục hơn với web có nội dung động. 
Tạo r đặt cùng index.html, nhét vào robots.txt để gg biết, host lên, đăng ký sitemap với Google Search Console theo dõi thống kê hiệu suất các trang để biết mà cải thiện SEO.



# Xử lý image
URL: https://bennettfeely.com/clippy/ => kích thước vẫn thế nhưng hiển thị cut ảnh clip-path
URL: https://www.youtube.com/watch?v=oWXm5n-Zi38 => thực sự học master clip-path
URL: https://css-generators.com/svg-to-css/ => convert hàm path thành hàm shape dùng cho clip-path trong css. Shape y hệt nhưng friendly hơn thôi.
URL: https://yqnn.github.io/svg-path-editor/ => linh động hơn

=> Ứng dụng tạo diamond grid: https://www.youtube.com/watch?v=A5GXdjEOvos&list=WL&index=98

-> Vì để phòng khi ta dùng ảnh low res load trong background-image. Nên kết hợp với: 
<link rel="preload" as=image href="./lowresimage.png" fetchpriority=high>
Thẻ <img> nên luôn set width height ngay trong nó để tránh layout shift, kèm với background-image low res.

-> Có multiple background image. background-size background-image background-repeat background-color (dùng kèm background image được sẽ nằm ở dưới)
background-position kiểu vị trí x,y của ảnh trùng với vị trí x,y nào của khung. VD center center hay 0 0 là tâm ảnh trùng tâm khung hay 0,0 của ảnh trùng 0,0 của khung. background-image hiện trong phạm vi content, nếu dịch tràn ra ngoài sẽ k dịch chuyển trừ khi cho repeat hoặc background-size lớn 

background: <background-color> <background-image> <background-position> / <background-size> <background-repeat> <background-attachment> <background-origin> <background-clip>;
VD: background: red url('image.jpg') center / cover no-repeat fixed padding-box content-box;

background-origin xác định vị trí của background image theo content. 
background-clip text => sẽ lồng background image vào trong text, buộc phải bỏ màu của text mới hiển thị ảnh, color or -webkit-text-fill-color: transparent; => giải quyết vđ k set gradient color cho text color đc
background-blend-mode chỉ có tác dụng khi có màu chồng lên nhau: https://www.w3schools.com/cssref/playdemo.php?filename=playcss_background-blend-mode
background-attachment: scroll mặc định là trôi theo page scroll bar; local là trôi theo scrollbar của content; fixed là background fix k trôi, tạo parallax

background-repeat space tương tự repeat nhưng repeat bị cắt khi ra ngoài phạm vi vì kích thước content k thể luôn chia hết cho kích thước background được. Còn space sẽ xếp mà k bị cắt, khoảng trống thừa ra sẽ chia đều giữa các ảnh

VD: background-origin apply cho cả background-color và background-image, k thể chỉnh riêng hay chia từng image

-> Các thuộc tính image filter: https://www.w3schools.com/css/tryit.asp?filename=trycss_ex_images_filters

-> Layer mask: mask là shorthand của mọi thuộc tính mask-* trong css
Dùng style cho 1 thẻ để tạo 1 lớp hiệu ứng bên trên thẻ đó. VD hiển thị bức ảnh theo phần ảnh của 1 bức ảnh khác, ta cho bức ảnh khác đó lên 1 lớp bên trên.
VD mask-image: linear-gradient(black, transparent);
VD mask: url(masks.svg#star) 0 0/50px 50px no-repeat; => đặt mask tại vị trí 0 0 từ top left và width height mask là 50px 50px, lấy thẻ có id là star trong hình svg
VD mask: url(masks.svg#star) left / 16px repeat-y; => element là mask ở phía bên trái với width 16px. Mask position phải xác định 2 giá trị như left top, mặc định nếu chỉ set 1 giá trị thì giá trị còn lại sẽ là center
VD Mask mờ 2 bên thẻ:
mask: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, black 20%, black 80%, rgba(0, 0, 0, 0) 100%);
-webkit-mask: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, black 20%, black 80%, rgba(0, 0, 0, 0) 100%);
Còn có mask composite

-> Setup image:
Setup ảnh object-fit contain, object-position center center, min-width width aspect-ratio, border-radius, overflow hidden

--> Dùng onError check ảnh lỗi thì hiển thị ảnh lỗi mặc định chứ k show hình lỗi xấu.
HTML có thẻ object show mọi loại media, nếu bị lỗi sẽ tự show thẻ con của thẻ object rất hay => ít dùng vì kp chuyên cho ảnh.
onLoad check ảnh tải xong => có thể dùng ẩn spinner nếu dùng 1 thẻ spinner riêng hay lấy kích thước ảnh sau khi tải xong.

VD: <img src="invalid_link" onerror="this.onerror=null;this.src='https://placeimg.com/200/300/defaultiamge';" >
Việc dùng this.onerror=null chống lỗi infinity loop. Lỗi này xảy ra ở 1 số trình duyệt khi chính ảnh để ta fix lại bị lỗi xong lại chạy onerror lại lỗi và cứ lặp vô tận
Nếu sợ lỗi infinite loop, thì có thể set 1 bức ảnh backup onerror local đảm bảo luôn tồn tại là được => ***nếu sợ lỗi mạng, dùng base64 cho blur image đảm bảo ảnh đó sẽ luôn exist.

--> Dùng lib: Khi làm với react thì onError k hỗ trợ mọi browser nên thư viện react-lazy-load-image-component sẽ lo điều đó với mọi browser
Thuộc tính PlaceholderSrc của LazyLoadImage nhận 1 ảnh kích thước nhỏ để hiển thị ra trước khi ảnh lớn được load. Ta có thể giảm độ phân giải ảnh bằng các công cụ chỉnh sửa để thế vào, thêm effect="blur" để làm mờ ảnh placeholder được
Lib react-progressive-graceful-image rất phù hợp dùng được thay thế cho tag object của html hiển thị ảnh placeholder, nếu ảnh lỗi thì chỉ hiển thị placeholder mặc định

--> Lazy loading ảnh: thuộc tính loading="lazy"/"eager" có sẵn của html

--> Ảnh nên nhét vào 1 container có aspect ratio và width responsive: có thể set contain và hiện trong khung, hoặc cover theo 1 trong 2 chiều, hiện ở tâm
Luôn set min-width min-height cho ảnh giảm layoutshift khi load xong

-> Ưu tiên dùng ảnh SVG để tránh bị mờ khi zoom lớn: svg dùng đồ họa vector có animation. Có thể tách file html riêng và cho vào <img>, or nhúng trực tiếp néu cần style.
SVG Sprites là pp gom các ảnh từng phần vào 1 file duy nhất và chỉnh vị trí cho chuẩn. Thay vì server nhận nhiều request từng tấm ảnh nhỏ thì chỉ cần 1 bức SVG là được
Có nhiều tool giúp vẽ tay SVG: https://topdev.vn/blog/svg-la-gi/

-> Các pp tạo ảnh mờ làm placeholder thay vì 1 màu xám hoặc 1 ảnh default hoặc skeleton loading:
- Tạo ảnh mờ mà ta có sẵn thì thu nhỏ r phóng to là xong
- Ảnh người dùng nhập có thể dùng BlurHash - lib giúp tạo ảnh mờ từ 1 ảnh khác, paste ảnh vào và lấy ra hash làm mờ.
- Data URL là 1 cách load ảnh bằng code với base64. Khi nhúng ảnh base64 vào code, tốc độ transfer ảnh tới client sẽ nhanh hơn nhưng trên mobile lại chậm hơn vì ngốn CPU render ảnh. Khi nhúng src http thì web phải fetch lần nữa tới src đó nên có thể lâu hơn nhưng k bị ngu trên mobile
1 cách khác là load image blur với base64, giảm chất lượng và chuyển sang base64 bằng tool khác, image thực thì để link url bth
Web chuyển ảnh thành data uri dạng mờ không cần dùng thư viện blur hash: https://blurred.dev/
- Cloudinary cung cấp url giúp tải ảnh blur nhẹ hơn của 1 image. 1 cách generate blur dynamic image.
VD URL gốc: https://res.cloudinary.com/hieucuopbien123/image/upload/v1688738028/eokcgjfzuedo2oobnzzb.png
Làm mờ nhẹ hơn: https://res.cloudinary.com/hieucuopbien123/image/upload/e_blur:100/v1688738028/eokcgjfzuedo2oobnzzb.png
Làm mờ kèm grayscale nhẹ hơn nữa: https://res.cloudinary.com/hieucuopbien123/image/upload/e_blur:1000,q_1,f_auto/v1688738028/eokcgjfzuedo2oobnzzb.png
Full tut custom: https://cloudinary.com/blog/low_quality_image_placeholders_lqip_explained#the_javascript_options_for_generating_lqips
Cloudinary cũng có cách giảm kích thước ảnh tối đa mà k mất chất lượng: https://cloudinary.com/blog/adaptive_browser_based_image_format_delivery

-> Tối ưu nén ảnh:
Các bức ảnh tĩnh đều nên cho qua tinyPNG / imagemin để giảm tải kích thước trước r mới lưu vào server.
Dùng định dạng WebP or AVIF sẽ giảm kích thước 30% so với jpg
Hoặc dùng cloudinary hay thư viện browser-image-compression để compress ảnh khi người dùng upload trước r mới lưu vào server.
Các framework như NextJS cung sẵn khi ta cho optimized true trong file config, nó còn optimize theo kích thước màn hình
Có thể tự chuẩn bị sẵn các bức ảnh khác nhau thủ công và cho load theo kích thước màn hình => có thư viện react giúp

-> Dùng <picture> tự đổi ảnh tùy vào kích thước màn hình mà k cần css hay js. <source> chỉ cung url, còn lại vẫn dùng tag image để chèn ảnh vào
VD: <picture class="image_container">
  <source media="(min-width:650px)" srcset="https://www.w3schools.com/tags/img_pink_flowers.jpg" type="image/jpg">
  <img src="" alt="" onerror="this.onerror=null;this.src='base64image';" loading="lazy">
</picture>

-> K dùng ảnh gif bị nặng hơn video rất nhiều. Dùng với các ảnh nhỏ muốn lặp vô hạn mà k cần media player thì ok => éo bh cần
K thì nên dùng APNG hơn



# Dùng scroll
Cơ bản tạo scrollbar trong 1 box: cho box là inline-block, white-space nowrap, overflow-x auto, set width không được fit-content mà responsive màn hình, thẻ con bên trong phải set minWidth bằng kích thước của box.
Tức chỉ cần cho container kích thước nhỏ hơn content và set overflow có scrollbar là được.
=> refer tới "Projects / Tinkerbellgarden"

overflow: clip; kết hợp với overflow-clip-margin: 30px; để kiểm soát overflow vẫn tràn ra ngoài mà k chiếm thêm kích thước

-> Custom style scrollbar: https://css-tricks.com/custom-scrollbars-in-webkit/
URL: https://www.w3schools.com/howto/howto_css_custom_scrollbar.asp
K dùng kèm scrollbar-width thin được mà set trong shadow dom, k sẽ lỗi

-> Để nhảy đến 1 vị trí trên trang html: đặt id rồi tại thẻ nào ta dùng tag a href đến #đó là được
scroll-behavior: smooth hay auto để trượt đến hay nhảy đến

-> overscroll-behavior: khi 2 scroll lồng nhau, cục bên trong scroll tới đích mà vẫn lăn tiếp chuột ở cục trong thì cục ngoài sẽ scroll (scroll chaining), contain để cản. Trên điện thoại tự có bounce effect, none để cản thêm bounce effect.

-> Có thể ẩn thanh scrollbar nhưng vẫn giữ nguyên chức năng

-> Dùng scroll-snap
- scroll-snap-type: x mandatory; xác định hướng và kiểu scroll. proximity là scroll tới sát mép card mới tự scroll vào đúng vị trí card nếu k sẽ lơ lửng, mandatory là trình duyệt tự snap theo từng điểm scroll mọi lúc theo cách ta dùng scroll-snap-align 
- scroll-snap-align là từng item sẽ có vị trí như nào với container bao nó. VD center là điểm giữa item trùng điểm giữa container, tương tự start và end. Điểm giữa của chiều nào tùy thuộc type dùng x hay y
- scroll-snap-stop: là khi lướt quá nhanh sẽ luôn dừng ở từng element(always) hay cho lướt qua(normal)
- Đôi khi ta k muốn chuẩn kiểu item hiển thị đúng ở 3 vị trí mà hiển thị ở hơi mé bên trái cách 1 vài pixel cơ thì:
scroll-padding dùng ở container sẽ cho mọi item bên trong được quyền hiển thị cách mép 1 khoảng bnh
scroll-margin dùng ở từng item sẽ cho phép cụ thể 1 item nào được phép hiển thị cách mép bnh
=> dùng được 4 chiều left right top down. Thường để kích thước container chia hết cho kích thước card bên trong

-> Scrollbar nên tạo chuẩn 1 thẻ con chứ body và html nên để overflow hidden cho dễ customize về sau:
- Khi scroll các thẻ liên quan, sẽ k ảnh hưởng đến scrollbar các thẻ khác, chứ scroll thẻ body sẽ ép mọi thẻ scroll
- Style chuẩn trong 1 phạm vi nhất định

-> K thể tạo được scrollbar có background transparent, chỉ cố tạo tạo background theo màu thẻ body thôi.
K nên dùng loading bar ngang: fetch API thì k nên vì mỗi component là loading độc lập; scroll thì phải đặt trong tag content và position fixed theo màn hình vì ta k scroll thẻ body; nếu chuyển page thì loading ngang thì k được vì MPA sẽ k thể tính được



# Xử lý màu
Tool sinh code gradient: https://angrytools.com/gradient/

-> Gradient css có 3 loại: linear kéo từ 1 phía sang 1 phía, radial kéo từ 1 điểm lan ra xung quanh, conic-gradient
--> Chú ý dùng background gradient thì truyền vào background chứ kp background-color
VD: background: linear-gradient(direction, color1, color2, color3, color4, ...);
VD: radial-gradient(circle closest-corner at 100px 100px, red 10%, yellow 20%, pink 10%); 
shape là circle, elipse (default, bóp méo theo khung bên ngoài)
size có thể là closest-side, farthest-side(default), closest-corner, farthest-corner at ... để set kích thước => tức màu cuối của radient chạm cạnh nào của box bao nó thì dừng
--> repeating-linear-gradient

-> Các cách lấy màu: rgba(255,0,0,0.5); rgb(255,0,0); hsl(0, 1005, 50%), hsla(0,100%,10%,0.3); #ffffff; dùng tên trực tiếp red, yellow
hsl thì hue có giá trị từ 0 đến 360, 0 và 360 cùng là đỏ.
color-mix giúp mix 2 màu trong không gian màu nào

-> mix-blend-mode: difference; => giúp đổi màu tương phản cực mạnh, nên dùng mọi lúc khi cần màu đổi ngay lập tức khi background đổi mà k sợ trùng màu bị ẩn đi
backdrop-filter: blur(5px); => style cho area trong phạm vi element nhưng đằng sau element => tạo glass morphism

-> Còn có sự sai lệch về màu sắc khi dùng browser khác nhau, đặc biệt là Safari so với Webkit. 
Ta k nên giả định 2 màu là giống nhau ở 1 thẻ so với 1 bức ảnh hay video. VD: video có màu nền là #f12312 vì ta dùng devtool để lấy màu => ta k thể dùng 1 thẻ cũng có màu #f12312 và giả định rằng 2 màu giống nhau được, đặt video bên cạnh thẻ kia sẽ thấy khác màu ở 1 số browser khác.

Có những màu đẹp có sẵn được support chuẩn ở mọi browser nên dùng: https://www.w3schools.com/cssref/css_colors.php

-> gradient nhìn đẹp hơn khi dùng không gian màu oklch thêm vào đầu
VD: linear-gradient(in oklch, red, blue);

-> Dùng relative color
:root {
  --clr-primary-rgb: 255 120 0;
  --clr-primary: rgb(var(--clr-primary-rgb));

  --clr-secondary-rgb: 0 255 25;
  --clr-secondary: rgb(var(--clr-secondary-rgb));
}
Dùng đổi opacity:
background: rgb(var(-clr-primary-rgb) / .5); => k chạy nhé, muốn tạo relative phải dùng from

--> Cách trên phức tạp, tạo 2 biến cho mỗi màu. Có thể dùng from tạo màu từ 1 màu khác và custom:
hsl(from #ff0000 / 0.5); => giảm opacity đi 0.5
hsl(from red h s calc(l - 20) / 0.5); => lấy màu đỏ và giảm light đi 20
hsl(from var(--clr-primary) h s 20%); => đổi rgb sang hsl, sau đó map thông số h và s, còn light set là 20%
rgb(from #ffff r g g / 0.5); => tương tự nhưng lấy màu green làm màu blue
oklch(from red calc(l * .5) calc(c * .1) h / 0.5); => oklch() là hàm tạo màu như lch() nhưng màu sắc cân bằng hơn. lightness, chroma (như saturation), hue.

--> Dùng color-mix
color: color-mix(in lab, black, currentColor); => currentColor sẽ lấy thuộc tính color của thẻ hiện tại và ở case này làm tối màu đó đi, k set sẽ lấy theo cha, rồi tạo ra màu này
VD ở light background cần chữ màu tối hơn, dark background cần chữ màu sáng hơn. Dù ta đã set đen trắng cho text rồi nhưng cần text có màu khác. Ta dùng:
color: color-mix(in lab, currentColor, red 70%); => giả sử chữ đỏ sẽ tự có màu đỏ đậm đỏ nhạt tuỳ bg cho đúng

linear-gradient cũng dùng được currentColor, dùng được mọi nơi cho màu

# Dùng conic gradient tạo hình zigzag 
.loader {
  height: 47px; /* control the size */
  aspect-ratio: 5;
  background:
    conic-gradient(from 135deg at top,#000 90deg,#0000 0) top,
    conic-gradient(from 135deg at top,#0000 90deg,#000 0) bottom;
  background-size: 20% 50%;
  background-repeat: repeat-x;
}



# Dùng zIndex
Bản chất: Thẻ A có z-index là 1, thẻ B có z-index là 2 thì thẻ A luôn nằm dưới thẻ B, kể cả thẻ A có children z-index là 100 thì tất cả đều dưới thẻ B thôi
Best practice là để tất cả cùng z-index thì cái sau đè cái trước. Đến khi cần TH cái sau nhỏ hơn cái trước mới phải specific. Thẻ có zIndex nên luôn set position relative để tránh lỗi

K dùng opacity với z-index vì opacity làm giảm z-index của thẻ bên trong nó



# Dùng position 
-> Position absolute sẽ xếp vị trí so với thẻ cha relative đầu tiên của nó, nếu k có thì sẽ là thẻ body, thẻ absolute cũng thành inline block.
position absolute nếu ta set cả 4 giá trị thì nó bắt đầu ảnh hưởng đến kích thước của thẻ, tự kéo dãn cho vừa hcn đó đó là khi kích thước k set.
Thường dùng kết hợp transform để dịch ra đâu theo vị trí cố định, rồi dịch tiếp theo kích thước relative của nó

-> Relative là thay đổi vị trí so với bình thường bao nhiêu, vẫn chiếm không gian

-> Sticky thì vật sẽ ở vị trí bth, nhưng khi scroll quá thì sẽ stick vào thẻ parent relative đầu tiên của nó, k thì sẽ theo màn hình. Nếu thẻ parent scroll hết thì k stick nữa

-> Fixed là cố định cũng là set các vị trí so với các cạnh của màn hình và fixed mãi ở đó luôn, thường dùng cho mobile menu.
VD A chứa thẻ B, mà B có position fixed thì sẽ căn fixed theo window nhưng nếu thêm translateZ(0) cho thẻ A thì thẻ B sẽ fix theo thẻ A chứ k fix theo window nx.



# Float => k dùng
Float khiến 1 thẻ block thành inline không chiếm height và trôi sang 2 bên. Các thẻ khác vẫn hiện cùng dòng và né width nó ra.
clear: both => khiến thẻ float chiếm height, các thẻ khác k thể ở cùng dòng với nó nữa

-> VD thẻ div chỉ có các thẻ float bên trong thì height thẻ div đó là 0 vì thẻ float k chiếm height của cha nó mà
ClearFix trong CSS giúp thẻ cha mang kích thước của thẻ con kể cả dùng float, chỉ cần cho 1 thẻ con dưới float để kéo dài cha quá float là được.
VD: .clearfix:after{
  content: ".";
  clear: both;
  display: block;
  width: 0px;
  height: 0px;
}






# Dùng content-visibility
Khi vào 1 page, mặc định browser tải resource, tạo DOM và layout, render paint cả page ra màn hình, dù viewport chỉ hiển thị 1 phần. Nó khiến page lớn load hiện lần đầu tiên bị lâu, và cũng lag khi resize.

content-visibility visible là default

-> hidden
display none ẩn hết khỏi DOM và a11y tree. hidden attribute của html tag y như display none.
content-visibility hidden cũng ẩn hết, k thể tương tác hay search. Nhưng nó k xóa DOM, giữ state giúp ẩn và hiện lại rất nhanh.
visibility hidden cũng ẩn, k thể tương tác và k xóa DOM. Nhưng nó lại vẫn chiếm diện tích
opacity 0 dường như chỉ ẩn phần nhìn, vẫn tương tác đươc.

visibility hidden kết hợp aria-hidden="false" k hoạt động, nó vẫn ưu tiên ẩn
Thay vì kết hợp visibility hidden với position absolute để k chiếm diện tích, ta nên ưu tiên dùng content-visibility hidden cho tooltip các thứ ok hơn.

-> auto: thẻ sẽ k được paint lên màn hình cho đến khi xuất hiện gần viewport. Mặc định là nó paint cả page.
Để browser paint content, nó phải calculate layout trước. Thẻ có auto sẽ k tính layout khi chưa vào viewport nên phải đi kèm contain-intrinsic-size: auto 600px; để dùng kích thước tạm trước khi thẻ được paint. Thường set contain-intrinsic-size width là auto tự scale full chứ k fix cứng để k bị tràn màn hình nhỏ.
Khi scroll xuống và paint thẻ đó, kích thước thực tế sẽ bị thay vào gây jump scrollbar nhưng chấp nhận. K nên dùng khi kích thước thẻ ảnh hướng lớn đến layout thôi.
K nên dùng auto cho các thẻ quá lớn để tránh scroll nhanh paint thẻ đó k kịp gây khoảng trắng, nên chia chunk nhỏ tốt hơn.

-> contain trong css xác định 1 thẻ có containment không, mặc định là none là k có giới hạn gì.
contain: paint; => đảm bảo mọi thứ bên trong 1 thẻ k thể paint ra ngoài thẻ đó
contain: size; => đảm bảo mọi thứ bên trong 1 thẻ sẽ k ảnh hưởng đến kích thước thẻ đó. Vì bth kích thước thẻ cha tự kéo dài theo kích thước con, nhưng ở đây thì không.
contain: layout; => đảm bảo thẻ bên trong k ảnh hưởng đến layout các thẻ khác và ngược lại.
Có thể kết hợp contain: layout paint size; 
=> Dùng contain sẽ giảm tải cho browser khi tính toán layout hay paint ra màn hình.
=> Thẻ có content-visibility auto sẽ tự có contain layout tức thẻ bên trong k thể break layout ra bên ngoài



# Có thể custom cursor:
C1: là cho cursor none rồi tự custom 1 thẻ ảnh khác cho transform theo mousemove. Có thể custom event mouse down thì phóng to ảnh, mouse up thì ảnh về bth
=> Việc custom cursor như v k ổn k nên dùng vì text, input, button đôi khi cần các hình khác nhau thì custom sẽ phức tạp với từng thẻ
C2: là dùng cursor: url(<base64>) 8 8, auto; // Tham số 2 là dự phòng nếu browser k hỗ trợ hình ảnh  
Tự set cursor như nào ở các thẻ khác nhau, k custom gì khác được, chỉ thay đổi được cách hiển thị
URL: https://css-tricks.com/next-level-css-styling-for-cursors/ => dùng C2 fallback cho C1 khi browser k hỗ trợ JS. Check touch screen và k enable js thì dùng cursor C2 thôi.
URL: https://custom-cursor.com/ => lấy ảnh cursor free



# Master border radius: outer radius = inner radius + distance giữa 2 border (border-width) => tự tạo nếu cần 1 thẻ có boder radius trong thẻ khác
border-radius: https://9elements.github.io/fancy-border-radius/
Dùng border-image
Shorthand border-radius: 10% 30% 50% 70%;



# Flexbox
Chú ý dùng width fit-content kết hợp với flex thì vô dụng. Vi mục đích khi sử dụng flex là kích thước của thẻ cha lớn hơn các thẻ con và flex sẽ xếp con bên trong cha.
Dùng kèm flex-grow và flex-shrink, order. Dùng align-self để chỉnh con ở start hay end so với cha là flexbox. VD cha cho align-item center để mọi con ra giữa, nhưng có vài con mà muốn ở 2 bên vẫn dùng align-self chỉnh được

-> Nhanh: flex: 2 2 10%; // grow shrink basis 
flex: 2 2; // grow shrink
flex: 2 // = 2 1 0%
=> flex shrink default 1, flex grow default 0, flex-basis 0% nên khi thu nhỏ nó tự k bị tràn vì có flex-shrink.
flex-flow: row wrap;
place-content: center space-between; /* align-content: center; justify-content: space-between; */
place-items: center stretch; /* align-items: center; justify-items: stretch; */ => k có stretch
place-self: start end; /* align-self: start; justify-self: end; */ => có thể stretch, trong phạm vi ô to
=> align-items, jusitfy-content, align-content cho flex
=> 1 điểm khác biệt lớn của place-items và place-self là place-items dùng cho container bao ngoài, place self là dùng cho từng phần tử được. place-self chỉ cần dùng cho grid

-> Dùng text-align và margin 0 auto để căn giữa nếu có thể. Còn có text-align justify cho text hiện đẹp

-> Dùng display flex thì thẻ có thuộc tính đó trở thành block chiếm cả dòng rồi ta set vị trí các con. Còn inline-flex thì thẻ cha thành thẻ inline thôi, xếp con bên trong.

-> flex-basis => ref tới "Responsive css"
Flexbox gặp vấn đề là chỉnh size của cell dựa vào kích thước item bên trong, shrink hay grow cũng thế. Grid tốt hơn vì chỉnh size của cell dựa vào kích thước các cell bên ngoài set từ trước.
VD https://www.youtube.com/watch?v=Ns12ALe8aqI&list=WL => 2 flexbox có content bên trong khác nhau sẽ có tốc độ shrink content khác nhau. 
Để fix: phải dùng flex-basis khiến các thẻ content cố gắng đạt được 1 mốc width thì sẽ giống nhau. Các thẻ có thể shrink hay grow xác định chuẩn là xong
=> Nếu cần chia chuẩn cột cho các hàng, nên dùng grid, còn chỉ cần xuống dòng bth thì dùng flex responsive. Flex k xử lý trước trường hợp row cuối cùng k full

Các phần tử trong flex sẽ mở rộng theo kích thước của chính các phần tử đó. Nhưng nếu mọi phần tử trong 1 flexbox đều được set flex-grow, thì kích thước từng cái sẽ chia theo tỷ lệ đó luôn (trong 1 hàng chứ các hàng khác nhau sẽ k tự dóng thẳng như grid) => Cách để chia tỉ lệ phần tử trong flexbox. Chú ý là tỉ lệ phần tử k tính padding, nếu item có padding sẽ to hơn bth.

-> Mở rộng thuộc tính display
inline-flex, inline-grid

Nhận 2 param thì 1 là style ngoài, 2 là style trong và các thẻ trong nó.
inline-flex = inline flex
flex = block flex
block = block flow
none = none
inline-block = inline flow-root

Param 2 có thể là flow-root tạo block formatting content k bị margin collapse, còn lại như default flow: https://www.youtube.com/watch?v=JY0FN71vCbw
display contents dùng để khiến 1 thẻ như là biến mất khỏi DOM nhưng ta vẫn css selector từ nó để style cho thẻ con được => ít dùng
display list-item khi muốn 1 thẻ hoạt động như 1 item trong list ul li dù k có. 
Tương tự display table khi muốn hoạt động như table. VD display table-column sẽ k hiện nếu thẻ này k nằm trong 1 table => ít dùng



# Dùng display grid
CSS grid galaxy layout khá dễ: https://uxdesign.cc/css-grid-with-galaxy-layout-figma-886a935b9649
Giống flexbox nhưng custom chia vị trí từng ô tốt hơn.
Grid master: https://css-tricks.com/snippets/css/complete-guide-grid/?fbclid=IwAR0hXkP7RHqFTVbuRnF-Vau0VqkVig1dQn6gpfa80ig3bMo7mPzW0m6DdpM
Playground: https://flexboxlabs.netlify.app/grid
Grid làm container: https://ryanmulligan.dev/blog/layout-breakouts/

-> grid-gap: 10px; là kc giữa các ô. Có column-gap, row-gap
gap/grid-gap: 1rem 3rem; => vertical 1rem, horizontal 3rem để ý khi dùng flex-wrap

-> grid-template-columns: 10% 10% 10%; là chia 3 thẻ bên trong làm 3 cột, một cột chiếm 10%. 
grid-template-columns: 1fr 1fr 1fr; hoặc (auto auto auto) cx là 3 cột bằng nhau. Hoặc repeat(3, 1fr) viết lặp
grid-template-rows: 300px 100px; => row1 cao 300px, row2 cao 100px, các row sau kích thước mặc định k fix
grid-template-columns: repeat(3, minmax(200px, 1fr));

-> grid-column / grid-row là 1 phần tử chiếm bnh cột và hàng. Vd: grid-row: 1 / span 2; là item này bắt đầu từ row1 và kéo dài 2 row

-> grid-auto-rows sẽ set kích thước chiều cao mặc định cho row mói được thêm vào, nếu ta k set bằng grid-template-rows cho nó thì sẽ lấy cái này; Tương tự grid-auto-columns

-> grid-template-areas để sắp xếp các item vào grid theo label. Kết hợp grid-area khi responsive đổi vị trí area.

-> grid-area còn là short của grid column và grid row. VD:
VD grid-area: 2 / 1 / span 2 / span 3; => thẻ ở row 2 column 1 kéo dài 2 rows 3 column
VD grid-area: 1 / 2 / 3 / 4; => tương đương với grid-row-start: 1; grid-column-start: 2; grid-row-end: 3; grid-column-end: 4; => Kéo dài từ row1->row2, col2->col3

-> grid-auto-flow: column; ưu tiên xếp hết từng col trước. 
grid-auto-flow: row dense; => vẫn xếp đầy row nhưng fill vào các chỗ trống trước đó nếu đủ, điều này làm mất thứ tự

-> grid có thể dùng cho 1D layout để tạo khi các cột đều bằng nhau => tốt hơn flexbox. Dùng flex box khi cần các item theo kích thước riêng của chúng
Chỉ cần dùng {
  grid-auto-flow: column; // để nó xếp trong 1 hàng
  grid-auto-columns: 1fr; // để các phần tử mới thêm vào grid đều cùng kích thước nhau
}
- flexbox có thể dùng cho 2D layout, chỉ cần set flex wrap, khác với grid là có thể để các cột không cùng kích thước nhau, cứ có kích thước đúng của nó là được
 
-> grid-template-columns có thể tự định nghĩa grid line names để dùng trong các trường khác
Dùng grid là container được: browser -> Elements -> Layout -> show line names để thấy grid line names
URL: https://www.youtube.com/watch?v=c13gpBrnGEw

-> Căn giữa phần tử cuối cùng của grid: 
Dùng flex box căn giữa ok nhưng sẽ full width, nếu ta set max-width chứ k full width thì khi màn hình co chỉ còn 1 column muốn full lại k được nx. Nếu k muốn như vậy thì dùng grid
Có thể tạo kim tự tháp card bằng grid bằng cách tương tự

-> Dùng grid-template-areas thay thế position absolute vì nó có thể tự chồng các element lên nhau và lấy kích thước của thẻ to nhất
K dùng display none vì nó làm mất thẻ thì k tự lấy kích thước thẻ to nhất, k dùng opacity 0 vì nó gộp aria text các thẻ lại, dùng visibility hidden ok nhất vì vẫn chiếm k gian và có ẩn aria-text.
Visibility hidden + position absolute = display none => sai vì visibility hidden vẫn chiếm chỗ trong layout
visibility khi transition vẫn được, chỉ là hiện hay ẩn chứ k như opacity nhưng nó vẫn chờ đúng thời gian transition

-> Tạo masonry css với grid



# Responsive chuẩn với grid layout + @container query
Dùng grid layout hoặc flex để chia bố cục, dùng kèm @container query để style các items
VD: 1 grid hiện nhiều cards. Khi 1 hàng hiện càng ít thẻ thì card có ảnh sẽ mang style thay đổi 
.grid-auto-fit {
  display: grid;
  gap: 1rem;
  grid-template-columns: repeat(auto-fit, minmax(min(30ch, 100%), 1fr));
  container: grid-auto-fit / inline-size;
}
.card:has(> img) {
  // Giả sử mỗi card dài 30ch
  // Khi tăng lên 2 card 1 hàng, thẻ chứa ảnh chiếm cả 1 hàng
  @container grid-auto-fit (inline-size > calc(30ch * 2 + 1rem)) { // Chú ý k dùng được css var
    grid-column: span 2;

    display: grid;
    grid-template-columns: subgrid;
    gap: 0;

    > img {
      grid-column: 2;
      grid-row: 1 / 4;
    }
  }

  // Khi tăng lên 4 card 1 hàng, thẻ chứa ảnh chiếm 2 hàng 2 cột
  @container grid-auto-fit (inline-size > calc(30ch * 4 + 3rem)) {
    grid-column: span 2;
    grid-row: span 2;
    > :not(img) {
      grid-column: 1 / -1; => cách khéo léo để bảo chiếm tất cả, thay vì phải viết 1 số span cụ thể
    }
    > img {
      grid-column: 1 / -1;
      grid-row: 1;
    }
  }
}



# -> text-shadow và box-shadow: https://html-css-js.com/css/generator/box-shadow/ 
drop-shadow theo hình dạng ảnh có nền transparent, nó cũng theo màu của hình nếu k xác định màu
Dùng box-shadow lồng nhau trong 1 thẻ có thể gom nhiều thẻ trừu tượng thành 1: https://www.youtube.com/watch?v=20QiX8rmHnU

box-shadow có thể tạo hình background phức tạp với animation bằng cách dùng inset lồng nhiều màu đè ở các vị trí khác nhau, màu sau sang trái đè lên màu trước đó.
URL: https://frontendmasters.com/blog/expanding-css-shadow-effects/ 




# Trick responsive flexbox grid
Xếp flex-basis trước, nếu các thẻ flex-basis k đủ cho 1 dòng sẽ xuống dòng theo flex-wrap. Sau đó mới tính grow, shrink. Do đó có thể lợi dụng flex-basis để kiểm soát số cột

VD grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); Tự xếp column fit vào ô với kích thước 200px nếu có thể. Có thể dãn lớn hơn 200px. Nhỏ hơn 200px thì xuống dòng.
minmax nếu max nhỏ hơn min thì lấy min. minmax chỉ dùng trong cssgrid.
1fr đơn vị phân số fraction chia tỉ lệ nhưng bản thân nó k theo kích thước bất cứ container nào cả, chỉ là tỉ lệ các item. Bth nó kiểu max 100% ấy. Nếu cố điền 1fr trong 1 đơn vị yêu cầu kích thước cụ thể sẽ hoạt động k như mong muốn, hay invalid property.
repeat là hàm trong css có sẵn. Thường dùng là repeat(số/auto-fill/auto-fit, số); Tức là auto-fit và auto-fill là giá trị của repeat chứ klq gì đến grid. Mục số là điền số chứ đừng điền 1fr, có thể dùng minmax(200px,1fr) để full width mà max width.
Nếu display grid, các item mà k set grid-column hay grid-row, nó sẽ mặc định 1 item là 1 ô. K set kích thước thì 1 ô chiếm cả row, tức chỉ có 1 cột
Grid có điểm đặc biệt là theo grid. Dòng trên có cột width như nào thì dòng dưới phải có cột width như vậy. Nếu k muốn v thì dùng flex. Muốn height các cột bằng nhau thì set grid-template-rows 1fr hết

-> Kỹ thuật responsive:
1) Tạo dương cực lớn hay âm cực lớn ở 1 mốc.
Lấy 100% - absolute unit và so sánh với mốc mong muốn rồi *999 => kết hợp min max kiểu lớn hơn 200px thì lấy dương vô cực, nhỏ hơn thì lấy 200px
2) Max số cột: Dựa vào tính chất xếp k đủ thì tự giảm cột xuống dòng rồi mới xét shrink hay grow. 
Ta cố tình cho min-width 100% / 4 + 0.1% => kbh 1 row có 4 cột được vì k đủ width, buộc dùng 3 cột kéo dãn là max

VD: grid-template-columns: repeat(auto-fill, minmax(<min-width 1 column>, 1fr));

VD chỉ muốn bo góc ở màn hình lớn:
.card {
  border-radius: max(0px, min(8px, calc((100vw - 4px - 100%)*9999)));
}
=> 100vw là kích thước screen, 100% là kích thước container. Nếu kích thước container gần như bằng với kích thước screen sẽ thành max(0px,min(8px,âm vô cực)) = 0px. Nếu kích thước container không bằng với màn hình (vì màn hình lớn ta cho container nhỏ ra giữa thôi) thì thành max(0px,min(8px,dương vô cực)) = 8px
Tức if(!mobile) borderRadius=0px else borderRadius=8px

=>***Cứ tưởng tượng màn hình lớn và màn hình nhỏ thì min max width là gì là chơi dược thôi



# Responsive css
Test responsive phải chú ý cả TH VD điện thoại xoay ngang, width có thể gấp 3 lần height và height cực kỳ nhỏ.

-> Dùng @media:
@media not|only mediatype and (mediafeature and|or|not mediafeature) { CSS-Code; }
với mediatype là: all / print / screen
media feature là: color, color-index, max-device-aspect-ratio, min-height, min-device-width, min-device-pixel-ratio, resolution, orientation (portrait/landscape)
orientation portrait/landscape => vì điện thoại xoay ngang và điện thoại xoay khác nhau, k thể chỉ @media theo mỗi width. Mở rộng với min-aspect-ratio

VD: @media (min-width: 100px) {} => tương đương @media all and (min-width: 100px) {}
VD: @media (min-device-width: 100px) {} => thì kích thước tính cả thanh công cụ và thanh cuộn => k dùng
VD: @media only screen and (max-width: 480px) and (min-width: 320px){ } => kích thước từ 320->480 của màn hình máy tính or smartphone
VD: @media only print { } => chỉ cho máy in
VD: @media (100px <= width <= 300px) {} => luôn dùng
VD: @media only screen and (max-width: 100px) and (orientation: landscape), screen and (min-width: 100px) {} => Áp dụng cho các thiết bị màn hình có width nhỏ hơn 100px và chiều rộng lớn hơn chiều cao, k bao gồm thiết bị đọc màn hình hay in ấn, đồng thời áp dụng cho mọi loại thiết bị hiển thị bao gồm cả in ấn và thiết bị đọc màn hình nếu width lớn hơn 100px
Có thể responsive từ thẻ link, kiểu chia mỗi màn 1 file css. VD <link rel="stylesheet" media="mediatype and|not|only (media feature)" href="mystylesheet.css">
=> Các thuộc tính và responsive các kích thước cơ bản: https://freetuts.net/su-dung-media-css-tao-responsive-cho-website-660.html

--> @media (prefers-color-scheme: dark) { } là khi user setting dark mode trong phần mềm sử dụng or thay đổi user-agent (light/dark/no-references) => k cần thiết
--> @media (prefers-reduced-motion) {} là khi user setting giảm thiểu animation cho web. Setting này của browser để web ít animation cho đỡ lag.

--> K dùng được css var trong @media. VD @media screen and (max-width: --mobile-size){} => sai ngay
Dùng sass thì vẫn được vì nó phân tích cú pháp và paste vào tại thời điểm compile. CSS thuần thì có package postcss-css-variables giúp làm điều đó.

-> Có thể responsive bằng JS với event resize, k sợ browser k hỗ trợ @media 
Dùng @supports (display: grid) and (not (display: inline-grid)) { } để check browser có hỗ trợ thuộc tính nào không. VD dùng để check nếu k hỗ trợ thì in ra đoạn text "Browser not support this feature!" và display none phần nào sử dụng.

-> Container query: xử lý case đôi khi màn hình nhỏ dần mà kích thước container lại tăng
URL: https://www.youtube.com/watch?v=rrLAg7xNERA
container-type: size là lấy theo 2 chiều, inline-size là lấy theo 1 chiều ngang thôi. Kích thước container theo chiều được lấy defines kích thước của content.
@container tự tìm container bao ngoài đúng là parent đầu tiên, dùng thêm container-name nếu muốn rõ ràng hơn.
Dùng đơn vị 50cqw để set kích thước theo width của container, nếu k có container sẽ dùng như vw
container: main / inline-size; => shorthands container-name / container-type
=> Chốt: Dùng container-name chỉ cần set cho phần tử cha, tự dùng container gần nhất bao nó, 50cqw.

->***Có thể responsive tương đối với grid, k cần biết con số cụ thể px để style thủ công nữa
- flex-basis: set kích thước initial cho flex item và item tự điều chỉnh sau. Set là 0 thì item tự mang kích thước nhỏ nhất fit content. Nếu các item set là auto thì chia đều nhau. Nếu set quá container luôn thì item sẽ max có thể trong giới hạn container thôi. 
VD: container 100px, item1 50px, item2 30px. Nếu set flexbasis item1 là 1000px thì nó chỉ tới 70 thôi, nếu set flexbasis item1 là 10px thì nó mang width là 50px để hiển thị đầy đủ item
Các thẻ cố gắng mang kích thước đó, phần space thừa sẽ được chia ra. Các thẻ mở rộng tuỳ vào flex-grow. Nếu container nhỏ hơn thì lại co theo tỉ lệ dựa vào flex-shrink
- clamp(min,value,max): browser set giá trị là value, nếu value nhỏ hơn min sẽ set là min, lớn hơn max sẽ set là max. Value ở giữa thường là relative.
- auto-fit: grid sẽ cố gắng "điền đầy" không gian bằng cách dãn phần tử => nên dùng auto-fill hơn vì nó cố điền nhiều cột nhất có thể. Khi chỉ có 1 hàng sẽ thấy rõ.
- minmax(min,max): container bao nó nhỏ hơn min, lấy min; container bao nó lớn hơn max, lấy max; container nằm giữa, lấy container; Tức nó set gom max-width, min-width thôi.
=> Kết hợp hàm calc có thể kết hợp relative và absolute, điều này đủ mạnh để thay thế media query.

VD: Chỉ cần grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); là đã tự responsive chia cột, nếu mỗi phần tử k thể lớn hơn 100px sẽ tự giảm 1 cột
auto-fit hết container, cố gắng fit full width với các phần tử hiện tại khi chỉ có 1 row
auto-fill những cột còn lại, thì sẽ lấy min width và cố gắng tưởng tượng còn nhiều cột khác xép vào
VD: (200px - 100%)*999  là check nếu container lớn hơn 200px sẽ trả ra số âm cực bé, và ngược lại là dương cực lớn
VD flexbox có 2 tag con, tag con sẽ tự hiện lên nếu mang kích thước đủ: https://www.youtube.com/watch?v=LEkFckg7sfw
.with-sidebar {
  --main-min-width: 45ch;
  --sidebar-size: 250px;
  --gap: 2rem;

  display: flex;
  gap: var(--gap);
  flex-wrap: wrap;
}
.with-sidebar > * {
  flex-grow: 1;
}
.with-sidebar > :first-child {
  flex-grow: 999;
  flex-basis: calc(
    ((var(--main-min-width) - (100% - var(--sidebar-size) - var(--gap))) * 9999)
  ); // Tức flex-basis xếp trước vào vị trí, k đủ sẽ đẩy thẻ xuống (flex-basis là NN xuống dòng), sau đó mới tính flex-grow, flex-shrink các thứ
  // Nếu vừa có flex-basis, vừa có flex-grow, nó vẫn chỉ cố grow đến mức đạt được flex-basis thì thôi, chứ đạt r sẽ k grow quá nữa làm gì
} 
.with-sidebar > :last-child {
  flex-basis: var(--sidebar-size);
}
VD code mẫu grid nhảy cột từ 1 tới 4:
.columns {
  /* user setting */
  --min-column-size: 200px;
  --column-count: 4;
  --gap: 2rem;
  
  /* calculations */
  --breakpoint: calc(var(--min-column-size) * var(--column-count) + (var(--gap) * (var(--column-count) - 1)) );
  --column-size: calc((100% / var(--column-count)) - var(--gap));
  
  display: grid;
  gap: var(--gap);
  
  grid-template-columns: repeat(
    auto-fit, 
    minmax(
      min(max(var(--column-size), (100% - var(--breakpoint)) * -999 ), 100%), // tức màn > 4 thẻ thì column size bth, màn < 4 thẻ thì column size full width
      1fr)
    );
}
Có code mẫu tăng dần cột từ 1 tới 1 số chỉ định

-> Thêm max-width 100% cho ảnh vì website luôn tự responsive co các item lại rồi => css reset 
Tư duy responsive: kích thước ta set k cố định mà để cho browser tự set vì nó tự co item khi nó co lại. Ta chỉ cần set, min max để giới hạn k được nhỏ hay lớn hơn bao nhiêu thôi
Tối ưu @media query, vd muốn màn lớn thì 2 col, màn nhỏ thì 1 col. Mà mặc định grid là 1 col, nên ta để mặc định 1 col, @media min-width thì set 2 cols. Chứ mặc định set 2cols, sau màn nhỏ lại phải chỉnh thì phải sửa grid-template-columns 2 lần lận => thường thì media query toàn dùng min-width



# Dùng attr trong css
attr(data-name); mặc định là string chỉ dùng trong content
Bh có thể dùng với mọi kiểu trừ image url, Vd dùng với color: attr(data-color type(<color>), gray);
URL list các type: https://una.im/advanced-attr/

Thường ta style cho 1 thẻ hoàn toàn từ css. Chỉ dùng data-attribute khi có các thuộc tính của thẻ hỗ trợ cho việc truy cập từ JS or CSS. 
- Lúc trước có giải pháp chia sẻ biến giữa html, css, js là dùng custom property:
<div style="--color: red"></div>
element.style.setProperty("--color", "red")
- data-attribute tương tự nhưng dễ thao tác hơn với JS, cũng tiện hơn nhiều TH:
<div data-color-to-show="red"></div>
element.dataset.colorToShow = "red"

Check: 
@supports (x: attr(x type(*))) {
  .warning {
    display: none;
  }
}

-> type(<custom-ident>) là 1 custom identifier có thể trỏ tới id 1 thẻ
Nên dùng đặt tên cho view-transition-name nhanh chóng

-> Tạo tooltip: Dùng thuộc tính title của các thẻ p, div để hover có tooltip sẵn
Dùng title tốt hơn dùng style css :after content: attr(data-image-to-show);

Nếu phải dùng id, cũng nên thay bằng data-* hơn vì lỡ 1 thẻ muốn duplicate ra chỗ khác khi responsive sẽ bị trùng id chỉ dược ở 1 thẻ.

# Tạo tooltip
--> Tự custom vd tooltip cho thẻ a: cho thẻ a relative bao thẻ b absolute có visibility là hidden -> style hover a thì visibility của b là visible
visibility vẫn chiếm không gian nhưng k nhìn thấy hay tương tác, dùng với position absolute để thành k chiếm kg.