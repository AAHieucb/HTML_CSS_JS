# Sitemap
robots.txt là file kiểm soát quá trình crawl của search engine, sitemap.xml giúp search engine đánh chỉ mục dễ hơn sẽ SEO tốt hơn.
Sitemap chứa thông tin về các url cần crawl và cấu trúc nội dung, cải thiện SEO, dễ đánh chỉ mục hơn với web có nội dung động. 
Tạo r đặt cùng index.html, nhét vào robots.txt để gg biết, host lên, đăng ký sitemap với Google Search Console theo dõi thống kê hiệu suất các trang để biết mà cải thiện SEO.



# Xử lý image
URL: https://bennettfeely.com/clippy/ => kích thước vẫn thế nhưng hiển thị cut ảnh clip-path
URL: https://yqnn.github.io/svg-path-editor/ => linh động hơn

=> Ứng dụng tạo diamond grid: https://www.youtube.com/watch?v=A5GXdjEOvos&list=WL&index=98

-> Có multiple background image. background-size background-image background-repeat background-color (dùng kèm background image được sẽ nằm ở dưới)
background-position kiểu vị trí x,y của ảnh trùng với vị trí x,y nào của khung. VD center center hay 0 0 là tâm ảnh trùng tâm khung hay 0,0 của ảnh trùng 0,0 của khung. background-image hiện trong phạm vi content, nếu dịch tràn ra ngoài sẽ k dịch chuyển trừ khi cho repeat hoặc background-size lớn 

background: <background-color> <background-image> <background-position> / <background-size> <background-repeat> <background-attachment> <background-origin> <background-clip>;
VD: background: red url('image.jpg') center / cover no-repeat fixed padding-box content-box;

background-origin xác định vị trí của background image theo content. 
background-clip text => sẽ lồng background image vào trong text, buộc phải bỏ màu của text mới hiển thị ảnh, color: transparent; => giải quyết vđ k set gradient color cho text color đc
background-blend-mode chỉ có tác dụng khi có màu chồng lên nhau: https://www.w3schools.com/cssref/playdemo.php?filename=playcss_background-blend-mode
background-attachment: scroll mặc định là trôi theo page scroll bar; local là trôi theo scrollbar của content; fixed là background fix k trôi, tạo parallax

background-repeat space tương tự repeat nhưng repeat bị cắt khi ra ngoài phạm vi vì kích thước content k thể luôn chia hết cho kích thước background được. Còn space sẽ xếp mà k bị cắt, khoảng trống thừa ra sẽ chia đều giữa các ảnh

VD: background-origin apply cho cả background-color và background-image, k thể chỉnh riêng hay chia từng image

-> Các thuộc tính image filter: https://www.w3schools.com/css/tryit.asp?filename=trycss_ex_images_filters

-> Layer mask: mask là shorthand của mọi thuộc tính mask-* trong css
Dùng style cho 1 thẻ để tạo 1 lớp hiệu ứng bên trên thẻ đó. VD hiển thị bức ảnh theo phần ảnh của 1 bức ảnh khác, ta cho bức ảnh khác đó lên 1 lớp bên trên.
VD mask-image: linear-gradient(black, transparent);
VD mask: url(masks.svg#star) 0 0/50px 50px no-repeat; => đặt mask tại vị trí 0 0 từ top left và width height mask là 50px 50px, lấy thẻ có id là star trong hình svg
VD mask: url(masks.svg#star) left / 16px repeat-y; => element là mask ở phía bên trái với width 16px. Mask position phải xác định 2 giá trị như left top, mặc định nếu chỉ set 1 giá trị thì giá trị còn lại sẽ là center
VD Mask mờ 2 bên thẻ:
mask: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, black 20%, black 80%, rgba(0, 0, 0, 0) 100%);
-webkit-mask: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, black 20%, black 80%, rgba(0, 0, 0, 0) 100%);
Còn có mask composite

-> Setup image:
Setup ảnh object-fit contain, object-position center center, min-width width aspect-ratio, border-radius, overflow hidden

--> Dùng onError check ảnh lỗi thì hiển thị ảnh lỗi mặc định chứ k show hình lỗi xấu.
HTML có thẻ object show mọi loại media, nếu bị lỗi sẽ tự show thẻ con của thẻ object rất hay => ít dùng vì kp chuyên cho ảnh.
onLoad check ảnh tải xong => có thể dùng ẩn spinner nếu dùng 1 thẻ spinner riêng hay lấy kích thước ảnh sau khi tải xong.

VD: <img src="invalid_link" onerror="this.onerror=null;this.src='https://placeimg.com/200/300/defaultiamge';" >
Việc dùng this.onerror=null chống lỗi infinity loop. Lỗi này xảy ra ở 1 số trình duyệt khi chính ảnh để ta fix lại bị lỗi xong lại chạy onerror lại lỗi và cứ lặp vô tận
Nếu sợ lỗi infinite loop, thì có thể set 1 bức ảnh backup onerror local đảm bảo luôn tồn tại là được => ***nếu sợ lỗi mạng, dùng base64 cho blur image đảm bảo ảnh đó sẽ luôn exist.

--> Dùng lib: Khi làm với react thì onError k hỗ trợ mọi browser nên thư viện react-lazy-load-image-component sẽ lo điều đó với mọi browser
Thuộc tính PlaceholderSrc của LazyLoadImage nhận 1 ảnh kích thước nhỏ để hiển thị ra trước khi ảnh lớn được load. Ta có thể giảm độ phân giải ảnh bằng các công cụ chỉnh sửa để thế vào, thêm effect="blur" để làm mờ ảnh placeholder được
Lib react-progressive-graceful-image rất phù hợp dùng được thay thế cho tag object của html hiển thị ảnh placeholder, nếu ảnh lỗi thì chỉ hiển thị placeholder mặc định

--> Lazy loading ảnh: thuộc tính loading="lazy"/"eager" có sẵn của html

--> Ảnh nên nhét vào 1 container có aspect ratio và width responsive: có thể set contain và hiện trong khung, hoặc cover theo 1 trong 2 chiều, hiện ở tâm
Luôn set min-width min-height cho ảnh giảm layoutshift khi load xong

-> Ưu tiên dùng ảnh SVG để tránh bị mờ khi zoom lớn: svg dùng đồ họa vector có animation.
SVG Sprites là pp gom các ảnh từng phần vào 1 file duy nhất và chỉnh vị trí cho chuẩn. Thay vì server nhận nhiều request từng tấm ảnh nhỏ thì chỉ cần 1 bức SVG là được
Có nhiều tool giúp vẽ tay SVG: https://topdev.vn/blog/svg-la-gi/

-> Các pp tạo ảnh mờ làm placeholder thay vì 1 màu xám hoặc 1 ảnh default hoặc skeleton loading:
- Tạo ảnh mờ mà ta có sẵn thì thu nhỏ r phóng to là xong
- Ảnh người dùng nhập có thể dùng BlurHash - lib giúp tạo ảnh mờ từ 1 ảnh khác, paste ảnh vào và lấy ra hash làm mờ.
- Data URL là 1 cách load ảnh bằng code với base64. Khi nhúng ảnh base64 vào code, tốc độ transfer ảnh tới client sẽ nhanh hơn nhưng trên mobile lại chậm hơn vì ngốn CPU render ảnh. Khi nhúng src http thì web phải fetch lần nữa tới src đó nên có thể lâu hơn nhưng k bị ngu trên mobile
1 cách khác là load image blur với base64, giảm chất lượng và chuyển sang base64 bằng tool khác, image thực thì để link url bth
Web chuyển ảnh thành data uri dạng mờ không cần dùng thư viện blur hash: https://blurred.dev/
- Cloudinary cung cấp url giúp tải ảnh blur nhẹ hơn của 1 image. 1 cách generate blur dynamic image.
VD URL gốc: https://res.cloudinary.com/hieucuopbien123/image/upload/v1688738028/eokcgjfzuedo2oobnzzb.png
Làm mờ nhẹ hơn: https://res.cloudinary.com/hieucuopbien123/image/upload/e_blur:100/v1688738028/eokcgjfzuedo2oobnzzb.png
Làm mờ kèm grayscale nhẹ hơn nữa: https://res.cloudinary.com/hieucuopbien123/image/upload/e_blur:1000,q_1,f_auto/v1688738028/eokcgjfzuedo2oobnzzb.png
Full tut custom: https://cloudinary.com/blog/low_quality_image_placeholders_lqip_explained#the_javascript_options_for_generating_lqips
Cloudinary cũng có cách giảm kích thước ảnh tối đa mà k mất chất lượng: https://cloudinary.com/blog/adaptive_browser_based_image_format_delivery

-> Tối ưu nén ảnh:
Các bức ảnh tĩnh đều nên cho qua tinyPNG để giảm tải kích thước trước r mới lưu vào server.
Hoặc dùng cloudinary hay thư viện browser-image-compression để compress ảnh khi người dùng upload trước r mới lưu vào server.
Các framework như NextJS cung sẵn khi ta cho optimized true trong file config, nó còn optimize theo kích thước màn hình
Có thể tự chuẩn bị sẵn các bức ảnh khác nhau thủ công và cho load theo kích thước màn hình => có thư viện react giúp

-> Dùng <picture> tự đổi ảnh tùy vào kích thước màn hình mà k cần css hay js. <source> chỉ cung url, còn lại vẫn dùng tag image để chèn ảnh vào
VD: <picture class="image_container">
  <source media="(min-width:650px)" srcset="https://www.w3schools.com/tags/img_pink_flowers.jpg" type="image/jpg">
  <img src="" alt="" onerror="this.onerror=null;this.src='base64image';" loading="lazy">
</picture>



# Metadata SEO
<title> <meta name="description"> <meta name="keywords"/>
<link rel = "canonical" href = "http://example.com/"/> => Khi 1 web có nhiều url dẫn tới cùng 1 nội dung, google không biết url nào nên hiển thị trên kết quả tìm kiếm. Luôn dùng thẻ canonical trỏ tới web gốc để thông báo cho search engine URL này là trang chính và tránh lập chỉ mục với URL của các trang trùng lặp khác
Đủ alt cho hình ảnh
<link rel="icon" href="/logo.svg"/>

Open Graph tags liên kết với các social media: <meta property = "og: type" content = "article" />
<meta property = "og:title" content = "TÊN TIÊU ĐÊ HOẶC TRANG WEB" />
<meta property = "og:description" content = "MÔ TẢ CỦA TRANG NỘI DUNG" />
<meta property = "og:image" content = "LIÊN KẾT ĐẾN TẬP TIN HÌNH ẢNH" />
<meta property = "og:image:alt" content="Collection Image"/>
<meta property = "og:url" content = "PERMALINK" />
<meta property = "og:site_name" content = "TÊN TRANG WEB" />
<meta property="og:locale" content="en_US"/>
=> og là thẻ chung, các thẻ ở từng nền sẽ ghi đè thẻ og
VD: <meta name = "twitter: title" content = "TÊN TIÊU ĐỀ HOẶC TRANG WEB"> => ghi đè og:title

Twitter tag tương tự nhưng chỉ dành cho twitter: <meta name = "twitter:description" content = ”"MÔ TẢ TRANG NỘI DUNG">
<meta name = "twitter:image" content = "LINK TO IMAGE">
<meta name = "twitter:site" content = "USERNAME">
<meta name = "twitter:creator" content = "@ USERNAME">

-> <meta name="viewport" content="width=device-width, initial-scale=1.0"> => Luôn có thẻ này để cho phép người dùng zoom-in text, điều này phù hợp với những người thị lực yếu vào website, họ sẽ phải dùng các tool giúp zoom to trang web để nhìn rõ, VD CTRL+ của browser. Custom:
<meta name="viewport" content="user-scalable=yes"/> cho phép người dùng sử dụng các tool zoom cho trang web
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=1"/> chỉ cho max scale đến 200%
<meta name="viewport" conent="user-scalable=no, width=device-width, initial-scale=1.0, maximum-scale=1.0"/> => k cho zoom vì sợ break design
=> 1 số thiết bị có tính năng zoom text only, nhưng nếu text zoom to mà layout k zoom sẽ break design, do đó code height của thẻ nên phụ thuộc vào content chứ k được fix cứng

-> Nên dùng senmatic element sẽ tốt cho SEO vì tạo cấu trúc nội dung rõ ràng hơn cho search engine hiểu.
header và footer ở đầu cuối page; figure chứa img và figcaption khi cần ảnh có chú thích; nav tạo navigation; aside tạo content related indirect to main; main chứa các article; article có các section; section có detail, detail có content bth và 1 thẻ summary; time biểu diễn thời gian và <mark> để highlight important text
Các thẻ heading h1 h2 ... chỉ nên dùng cho heading chứ k chủ động dùng để tạo big text vì search engine dùng heading để đánh index cho nội dung page
=> 1 số thẻ có thể có tính chất đặc biệt như thẻ time có thể dùng attribute. VD: <time datetime="2008-02-14 20:00"> thì thời gian trong attribute này sẽ được dịch sang machine-redable format và browser có thể thêm date này vào reminder của user's calendar nếu có và search engine cũng cho kết quả search thông minh hơn

-> Ảnh hiện ở nền tảng khác nên được ưu tiên preload:
<link rel="preload" as="image" href="/static/images/logos/opensea.svg"/>
<link rel="preload" as="image" imagesrcset="
  https://i.seadn.io/gcs/files/ee67a8d1f6a2ba1ffbdb64a48c708f51.png?auto=format&amp;w=640 640w, 
  https://i.seadn.io/gcs/files/ee67a8d1f6a2ba1ffbdb64a48c708f51.png?auto=format&amp;w=750 750w,
  https://i.seadn.io/gcs/files/ee67a8d1f6a2ba1ffbdb64a48c708f51.png?auto=format&amp;w=828 828w,
" imagesizes="100vw"/>
=> imagesrcset tự set thumbnail là ảnh nào tuỳ theo kích thước màn hình. Chỉ cần để nó trong header là browser chạy tới sẽ load và lưu cache luôn. Bất cứ chỗ nào trong web dùng mà trùng y hệt url đó sẽ lấy từ cache luôn mà k load lại.
=> Tinh kích thước hình ảnh theo 100vw

-> Google bot luôn tự đánh chỉ mục với mọi trang web mà nó truy cập được. Trừ khi có robots.txt hay thẻ meta robots cản nó => robots.txt thường để default or k có.
C1: robots.txt có tác dụng trong toàn page, chỉ cần đặt file vào cùng file gốc index.html
User-agent: *
Disallow: /page2.html
=> tức là googlebot đọc mọi pages trừ page2.html
C2: <meta name = "robots" content = "noindex, nofollow"> => Có nghĩa là không lập chỉ mục hay không theo dõi các liên kết từ trang này trang web này.
<meta name = "robots" content = "index, follow"> => Có nghĩa là chỉ mục và theo dõi các liên kết từ trang này 
VD cho robots.txt cản pages2, nhưng trong pages 2 lại dùng thẻ meta robots index. Thì googlebot gặp robots.txt sẽ bỏ qua pages2 luôn và chưa kịp thấy thẻ meta và k đánh index => Do đó bình thường chỉ dùng meta là được, chả cần robots.txt làm gì. Chỗ nào cản đánh index thì thêm noindex thôi



# CSS reset
* refer đến mọi thẻ và :root là refer đến cha của mọi thẻ. Trong react thì có thẻ id là root bao mọi thẻ khác.
Luôn set html và body từ đầu là 100% kích thước, overflow scrollbar

-webkit-touch-callout: none; => Khi touch và hold trên màn hình iOS hay Safari sẽ hiển thị callout(chú thích) thì có thể ta disable
user-select: none; => cản người dùng bôi đen, thg dùng khi với canvas hay ảnh chẳng hạn
box-sizing: border-box; 

-> Phân biệt unset, none, initial, inherrit: 
initial là lấy thông số kỹ thuật của css. Ít dùng vì nhiều cái default rất ảo. VD display có default là inline sẽ khiến mọi thẻ thành inline kể cả các thẻ div.
Vd: * { all: initial; }
=> Thực tế, default value của css property khác với default value của browser. VD div có default display nếu nói default value của browser.

inherit: lấy giá trị thuộc tính kế thừa từ cha. Vì mọi thẻ đều có mọi thuộc tính, nếu k set sẽ dùng default value property của browser.
unset: có parent thì set parent, nếu chưa từng set cho parent thì lấy initial valua. Initial là thông số kỹ thuật CSS ấy
none: k set giá trị và coi như k có giá trị đó luôn, 3 thuộc tính trên có với mọi thẻ còn none kp thẻ nào cũng có

-> css reset cho text:
h1,h2,h3,h4,h5,h6 { text-wrap: balance; } => để các mục header có text balance khi bị break nhiều dòng trông đẹp hơn
p { text-wrap: pretty; } => để dòng cuối cùng kbh lẻ loi 1 chữ khi dùng paragraph trông đẹp hơn. Tính toán bị expensive.

-> css reset cho img {
  max-width: 100%;
  vertical-align: middle; // để tránh bị cách các thẻ trước và sau đó 1 khoảng cách do k cùng baseline
  font-style: italic; // alt text khi hiện sẽ nghiêng để phân biệt
  background-repeat: no-repeat; 
  background-size: cover; 
  shape-margin: 1rem; // Đề phòng dùng shape-outside + floating cho image thì có sẵn 1 kc 
}
Vì để phòng khi ta dùng ảnh low res load trong background-image. Nên kết hợp với: 
<link rel="preload" as=image href="./lowresimage.png" fetchpriority=high>
Thẻ <img> nên luôn set width height ngay trong nó để tránh layout shift, kèm với background-image low res.

-> body tự có 100% width, việc set 100vw là thừa và có thể sai vì nó k tính scrollbar

-> Chú ý ta dùng css của lib trước r đến css reset để đảm bảo style ta tự code luôn áp đảo mọi styles từ nơi khác. Vẫn dùng styles của lib.
Chú ý thứ tự style dùng theo layer: lib -> base -> tự định nghĩa: reset r đến layer thường
Ở mỗi layer: :where(:root) -> html -> :root -> body -> * -> style thường
VD font-size của css reset để ở thẻ body, chứ để ở html khéo lib hay gì đè lên mất

-> Nếu muốn chiều dài page chuẩn màn hình hiện tại có footer và header thì set content là minHeight: calc(100vh - var(headerHeight) - var(footerHeight))



# BEM
BEM(Block-Element-Modifier) đem lại hiệu quả viết tên class hướng module, dùng mạnh trong sass.
Theo BEM, kbh dùng id mà chỉ có class và các class biểu diễn lồng nhau thì dùng với quy tắc kiểu.
VD: thay vì
  .menu { ... }
    .menu .item { ... }
    .menu .item.active { ... }
Ta dùng   
  .menu { ... }
    .menu__item { ... }
    .menu__item--active { ... }
=> để biểu thị item nằm trong khối block menu

VD: <a class="btn btn--orange" href="#">
  <span class="btn__price">$9.99</span>
  <span class="btn__text">Subscribe</span>
</a>
và file css: .btn { ... }
.btn__price { ... }
.btn__text { ... }
.btn--orange { ... }



# Dùng scroll
Cơ bản tạo scrollbar trong 1 box: cho box là inline-block, white-space nowrap, overflow-x auto, set width không được fit-content mà responsive màn hình, thẻ con bên trong phải set minWidth bằng kích thước của box.
Tức chỉ cần cho container kích thước nhỏ hơn content và set overflow có scrollbar là được.
=> refer tới "Projects / Tinkerbellgarden"

overflow: clip; kết hợp với overflow-clip-margin: 30px; để kiểm soát overflow vẫn tràn ra ngoài mà k chiếm thêm kích thước

-> Custom style scrollbar: https://css-tricks.com/custom-scrollbars-in-webkit/
URL: https://www.w3schools.com/howto/howto_css_custom_scrollbar.asp
K dùng kèm scrollbar-width thin được mà set trong shadow dom, k sẽ lỗi

-> Để nhảy đến 1 vị trí trên trang html: đặt id rồi tại thẻ nào ta dùng tag a href đến #đó là được
scroll-behavior: smooth hay auto để trượt đến hay nhảy đến

-> overscroll-behavior: khi 2 scroll lồng nhau, cục bên trong scroll tới đích mà vẫn lăn tiếp chuột ở cục trong thì cục ngoài sẽ scroll (scroll chaining), contain để cản. Trên điện thoại tự có bounce effect, none để cản thêm bounce effect.

-> Có thể ẩn thanh scrollbar nhưng vẫn giữ nguyên chức năng

-> Dùng scroll-snap
- scroll-snap-type: x mandatory; xác định hướng và kiểu scroll. proximity là scroll tới sát mép card mới tự scroll vào đúng vị trí card nếu k sẽ lơ lửng, mandatory là trình duyệt tự snap theo từng điểm scroll mọi lúc theo cách ta dùng scroll-snap-align 
- scroll-snap-align là từng item sẽ có vị trí như nào với container bao nó. VD center là điểm giữa item trùng điểm giữa container, tương tự start và end. Điểm giữa của chiều nào tùy thuộc type dùng x hay y
- scroll-snap-stop: là khi lướt quá nhanh sẽ luôn dừng ở từng element(always) hay cho lướt qua(normal)
- Đôi khi ta k muốn chuẩn kiểu item hiển thị đúng ở 3 vị trí mà hiển thị ở hơi mé bên trái cách 1 vài pixel cơ thì:
scroll-padding dùng ở container sẽ cho mọi item bên trong được quyền hiển thị cách mép 1 khoảng bnh
scroll-margin dùng ở từng item sẽ cho phép cụ thể 1 item nào được phép hiển thị cách mép bnh
=> dùng được 4 chiều left right top down. Thường để kích thước container chia hết cho kích thước card bên trong

-> Scrollbar nên tạo chuẩn 1 thẻ con chứ body và html nên để overflow hidden cho dễ customize về sau:
- Khi scroll các thẻ liên quan, sẽ k ảnh hưởng đến scrollbar các thẻ khác, chứ scroll thẻ body sẽ ép mọi thẻ scroll
- Style chuẩn trong 1 phạm vi nhất định



# Kích thước khoảng cách trong CSS
-> auto do browser tự tính, chiều dọc lấy 0, chiều ngang lấy hết phần có thể lấy mà k ảnh hưởng các thẻ khác, nếu có nhiều cái cùng auto thì chia đều giá trị cho từng cái => Cần nếu muốn kích thước 1 thẻ bị kéo dài theo thẻ cha tự lấp đầy vào khoảng trống, bây giờ dùng -webkit-fill-available rồi
Hàm calc có thể tính các kiểu như 50% - 10px là 50% thẻ cha giảm 10px 

-> Đơn vị tuyệt đối: Chỉ đúng trên các thiết bị độ phân giải cao như máy in, còn trên laptop và di động kết quả cho có thể sai khác. VD 1in = 96px = 2.54 cm

Relative Units
em: tương đối so với font-size của phần tử cha
ex: Tương đối so với chiều cao chữ "x" của font hiện tại.
ch: Chiều rộng của ký tự "0" trong font đang dùng
*rem (root em): Giống em, nhưng là tương đối so với phần tử gốc, thường là <html> => sai, nó theo font-size set bởi browser trước cả tag html
*vw: Tương đối 1% width của kích thước cửa sổ trình duyệt (viewport).
*vh: Tương đối 1% height của kích thước cửa sổ trình duyệt (viewport).
vmin Relative to 1% dựa trên chiều nhỏ hơn của trình duyệt. VD điện thoại xoay dọc thì vmin sẽ là 1% của width
vmax Relative to 1% dựa trên chiều lớn hơn của trình duyệt
*%: Có giá trị tương đối so với phần tử cha.

VD thuộc tính có thể thay đổi phức tạp, ta k muốn đổi thủ công mà đổi 1 chỗ thì các chỗ khác cũng đổi thì nên cho các thuộc tính phụ thuộc vào nhau. Chẳng hạn thẻ container có padding gấp đôi padding thẻ X thì set padding container là 10rem, padding thẻ x là 5rem chẳng hạn. Xong responsive fontsize của thẻ root là xong

--> Các đơn vị mới dùng riêng cho mobile như lvh, dvh, svh, svw 
vh là chiều cao cơ bản, k đổi 
lvh là chiều cao lớn nhất khi k có toolbar, svh là chiều cao nhỏ nhất khi k có toolbar
dvh là chiều cao dynamic tự thay đổi khi toolbar ẩn hoặc hiện => luôn dùng

--> Trap: 1 thẻ có height 50% thì sẽ bằng 50% height thẻ cha. Nếu thẻ cha k set height tức tự vừa với thẻ con thì chả có gì nên là 0



# Xử lý màu
Tool sinh code gradient: https://angrytools.com/gradient/

-> Gradient css có 3 loại: linear kéo từ 1 phía sang 1 phía, radial kéo từ 1 điểm lan ra xung quanh, conic-gradient
--> Chú ý dùng background gradient thì truyền vào background chứ kp background-color
VD: background: linear-gradient(direction, color1, color2, color3, color4, ...);
VD: radial-gradient(circle closest-corner at 100px 100px, red 10%, yellow 20%, pink 10%); 
shape là circle, elipse (default, bóp méo theo khung bên ngoài)
size có thể là closest-side, farthest-side(default), closest-corner, farthest-corner at ... để set kích thước => tức màu cuối của radient chạm cạnh nào của box bao nó thì dừng
--> repeating-linear-gradient

-> Các cách lấy màu: rgba(255,0,0,0.5); rgb(255,0,0); hsl(0, 1005, 50%), hsla(0,100%,10%,0.3); #ffffff; dùng tên trực tiếp red, yellow
hsl thì hue có giá trị từ 0 đến 360, 0 và 360 cùng là đỏ.
color-mix giúp mix 2 màu trong không gian màu nào

-> mix-blend-mode: difference; => giúp đổi màu tương phản cực mạnh, nên dùng mọi lúc khi cần màu đổi ngay lập tức khi background đổi mà k sợ trùng màu bị ẩn đi
backdrop-filter: blur(5px); => style cho area trong phạm vi element nhưng đằng sau element => tạo glass morphism

-> Còn có sự sai lệch về màu sắc khi dùng browser khác nhau, đặc biệt là Safari so với Webkit. 
Ta k nên giả định 2 màu là giống nhau ở 1 thẻ so với 1 bức ảnh hay video. VD: video có màu nền là #f12312 vì ta dùng devtool để lấy màu => ta k thể dùng 1 thẻ cũng có màu #f12312 và giả định rằng 2 màu giống nhau được, đặt video bên cạnh thẻ kia sẽ thấy khác màu ở 1 số browser khác.

Có những màu đẹp có sẵn được support chuẩn ở mọi browser nên dùng: https://www.w3schools.com/cssref/css_colors.php

-> gradient nhìn đẹp hơn khi dùng không gian màu oklch thêm vào đầu
VD: linear-gradient(in oklch, red, blue);

-> Dùng relative color
:root {
  --clr-primary-rgb: 255 120 0;
  --clr-primary: rgb(var(--clr-primary-rgb));

  --clr-secondary-rgb: 0 255 25;
  --clr-secondary: rgb(var(--clr-secondary-rgb));
}
Dùng đổi opacity:
background: rgb(var(-clr-primary-rgb) / .5); => k chạy nhé, muốn tạo relative phải dùng from

--> Cách trên phức tạp, tạo 2 biến cho mỗi màu. Có thể dùng from tạo màu từ 1 màu khác và custom:
hsl(from #ff0000 / 0.5); => giảm opacity đi 0.5
hsl(from red h s calc(l - 20) / 0.5); => lấy màu đỏ và giảm light đi 20
hsl(from var(--clr-primary) h s 20%); => đổi rgb sang hsl, sau đó map thông số h và s, còn light set là 20%
rgb(from #ffff r g g / 0.5); => tương tự nhưng lấy màu green làm màu blue
oklch(from red calc(l * .5) calc(c * .1) h / 0.5); => oklch() là hàm tạo màu như lch() nhưng màu sắc cân bằng hơn. lightness, chroma (như saturation), hue.

--> Dùng color-mix
color: color-mix(in lab, black, currentColor); => currentColor sẽ lấy thuộc tính color của thẻ hiện tại và ở case này làm tối màu đó đi, k set sẽ lấy theo cha, rồi tạo ra màu này
VD ở light background cần chữ màu tối hơn, dark background cần chữ màu sáng hơn. Dù ta đã set đen trắng cho text rồi nhưng cần text có màu khác. Ta dùng:
color: color-mix(in lab, currentColor, red 70%); => giả sử chữ đỏ sẽ tự có màu đỏ đậm đỏ nhạt tuỳ bg cho đúng

linear-gradient cũng dùng được currentColor, dùng được mọi nơi cho màu



# Dùng font
TrueType Fonts (TTF): TrueType là định dạng font phổ biến cho các hệ điều hành Mac OS và Windows.
OpenType Fonts (OTF): OpenType là một định dạng được phát triển dựa trên nền tảng của TrueType.
Web Open Font Format (WOFF): là một TrueType nhưng nhẹ hơn và được W3C khuyến khích dùng
Web Open Font Format (WOFF 2.0): là một bản nén tuyệt vời hơn WOFF 1.0.
SVG Fonts/Shapes: SVG Fonts giúp hiển thị văn bản giống như một hình ảnh Graphic.
Embedded OpenType Fonts (EOT): EOT là một hình thức nén ít dùng của OpenType

-> Dùng text-transform: uppercase; => luôn dùng k cần JS
Dùng text-size-adjust => bỏ vì ta tự set font-size responsive chứ k cần control thuật toán điều chỉnh kích thước văn bản của trình duyệt trên điện thoại nữa

-> Định nghĩa font mới trong css:
@font-face{
  font-family: MyFont;
  src: url(sansation_light.woff2) format("woff2"),
       url(sansation_light.woff) format("woff"); // Browser k support woff2 thì dùng woff
  font-weight: 100;
}
h2{
  font-family: MyFont;
}
font-family thì nếu browser k support font đầu sẽ chuyển dần sang các font sau, src cũng có url backup
Cùng font mà style khác nhau có url riêng, ta phân biệt bằng font-style và font-weight, dùng đúng loại sẽ tự lấy đúng url cho font => nên dùng 1 font file chuẩn thôi
Browser đôi khi yêu cầu phải định nghĩa rõ serif. VD tên font là Fa nhưng phải định nghĩa là font-family: Fa, sans-serif;

VD: Tải font về. Dùng cùng tên font nhưng style khác nhau
@font-face {
  font-family: "DroidSerif";
  src: url("DroidSerif-Bold-webfont.ttf") format("truetype");
  font-weight: bold;
  font-style: normal;
}
@font-face {
  font-family: "DroidSerif";
  src: url("DroidSerif-BoldItalic-webfont.ttf") format("truetype");
  font-weight: bold;
  font-style: italic;
}
Sử dụng nó tự dùng đúng font tương ứng:
body { font-family:"DroidSerif", Georgia, serif; }
h1 { font-weight:bold; }
em { font-style:italic; }
strong em {
  font-weight:bold;
  font-style:italic;
}
Short hand nhiều url:
@font-face {
  font-family: 'Klavika';
  src: url(../fonts/Klavika-Regular.otf) format('truetype') font-weight-normal,
       url(../fonts/Klavika-Bold.otf) format('truetype') font-weight-bold,
       url(../fonts/Klavika-Bold-Italic.otf) format('truetype') font-italic font-weight-bold;
}
--> Có thể dùng @import url(<>); trong css để thêm font chữ vào và dùng trực tiếp trong font-family. Chỉ được với remote url, k dùng được url local file.

-> Dùng font-systhesis
Browser giả style khi font k hỗ trợ, nhiều lúc giả style bị lỗi hiển thị. Nếu dùng style mà text k đổi thì có thể do font k hỗ trợ và browser cũng k giả style được.
font-systhesis quyết định browser có giả style hay không, nếu set là none thì chữ luôn hiện đúng nếu có, k có style thì hiện dạng mặc định chứ k giả => Thường luôn cho phép giả

-> Dùng text-rendering
Có: optimizeSpeed, optimizeLegibility, geometricPrecision, auto (phụ thuộc vào browser)
optimizeLegibility là giúp vc chữ hiển thị dễ đọc, phân biệt "f l i" bằng cách in với kích thước hơi khác biệt 1 chút cho người dùng tránh nhầm
=> Thực tế cái này để thế nào cũng được, VD người đọc chữ nếu k sợ nhầm thì cứ optimizeSpeed nếu cần vì trông chữ nó chả khác biệt mấy

-> Dùng font-smooth: xử lý antialias khi render font
Dùng kèm -webkit-font-smoothing: auto/none/antialiased/subpixel-antialiased(nét chữ sắc nhất) => MacOS Webkit
-moz-osx-font-smoothing: auto/grayscale => Firefox MacOS 
=> luôn để always là luôn tối ưu smooth cho các thiét bị

-> Font size tự động đổi theo kích thước màn hình:
min và max trong css giúp lấy min và max của giá trị gì, khi kết hợp với kích thước relative sẽ rất mạnh
Màn hình luôn được chia thành 100 vw và vh. VD màn hình là 1460px thì 1vw sẽ tương ứng với 14.6px
clamp(a, b, c); là hàm của css giúp lấy 1 giá trị trong khoảng a và c. Nó ss lấy min(b,c) là x rồi lấy max(a, x) trả ra kết quả. Dùng min,max,clamp thay thế width,max/min-width

VD ta muốn màn hình dưới 700px có font-size là 16px, sau đó tăng dần tuyến tính lên 1px mỗi 100px tăng lên cho đến max là 22px => font-size: clamp(16px, 1vw + 9px, 22px);
Khi 700px, nó sẽ là clamp(16px, 16px, 22px) thì lấy 16px. Font size tuyến tính tăng lên 1300px thì clamp(16px, 22px, 22px) thì lấy 22px
Vd muốn màn hình tăng đến đúng 1500px thì fontsize mới là 22px ta chỉ cần giải phương trình là được

Or dùng generator: https://clamp.font-size.app => đổi rem ở vị trí đầu và vị trí thứ 3 thành px để tránh nhiều case bị saisa, cho root font-size là là 16px là được mà

--> Gợi ý size:
1) Màn hình lớn: text thường 16px, chữ to 20px, title 24px, chữ khổng lồ 48px, button 16px
Màn hình mobile: text thường 14px, chữ to 16px, title 20px, chữ khổng lồ 36px, button 14px 
2) Màn hình lớn: text siêu bé 12px, text thường 14px, title 16px, chữ khổng lồ 40px, button 14px
Màn hình mobile: text thường 12px, title 14px, chữ khổng lồ 20px, button 14px

Màn hình break point: 500 - 1300 - 1900 => đặt ở 2 mốc 500 và 1300 là được

-> Web safe font: 
Có các font chạy trên linux ok nhưng sang window bị lệch dòng. Có các tool giúp chỉnh sửa thẳng vào file ttf để fix font như FontForge nhưng khá mất tg
Web safe font là các font luôn chạy mượt với mọi browser và mọi hđh thường có sẵn trong browser. Nhưng k đảm bảo các web safe font lúc nào cũng khả dụng => Viết CSS thêm fallback fonts là các font dự phòng cho browser:
https://www.w3schools.com/cssref/css_websafe_fonts.php?fbclid=IwAR2s3BCKKc8rKHr4fKOYp8P2VFVtBj94Moc0fd0auwBP-Mzwv_riCy8FeE8
https://www.w3schools.com/cssref/css_fonts_fallbacks.php

-> Dùng color font: Font được style đẹp sẵn

-> @font-palette-values gom các thuộc tính font lại tái sử dụng
@font-palette-values --identifier {
  font-family: Bixa;
}
.my-class {
  font-palette: --identifier;
}

-> :root và html gần tương đương nhau, nhưng thường dùng html để set default style cho mọi thẻ, dùng :root để set global variables.
Browser có thể đổi font-size, dùng pixel k tốt vì nó override settings đó của browser.
Cái gì global thì rem, cái gì chỉ phụ thuộc font-size phần tử hiện tại thì em (theo kích thước font-size của phần tử hiện tại).
Khi font-size tăng, ta cũng muốn padding hay margin của nó tăng. Do đó kích thước nên dùng em, font-size nên dùng rem. Media query dùng rem, khoảng trắng nên dùng rem.
box-shadow dùng px thoải mái vì chả liên quan đến font. Hoặc ảnh hay cái gì k muốn phụ thuộc vào font-size mà cố định ở mọi màn hình thì để px.

-> Kiểm soát tải font với css font-display, default auto.
block: text sẽ bị ẩn (tối đa 3 giây) trong khi chờ font tải xong, sau đó sẽ hiển thị với font mong muốn.
swap: text hiển thị ngay lập tức bằng font dự phòng, sau đó thay thế bằng font mong muốn khi tải xong => luôn dùng css reset

->*** Material icons: là icons viết dạng tag html

-> Variable fonts là các loại phông chữ cho phép thay đổi thuộc tính cùng 1 tệp phông chữ, thay vì phải fix cứng font-size, font-weight, italic. Luôn dùng variables fonts. Các font-size mà buộc phải set kích thước thì k là variables fonts. Khi tải font local cũng cần chú ý
VD roboto là static font, roboto_flex là variable font

-> Khi tạo chữ trang trí nên dùng:
-webkit-text-stroke giúp tạo viền cho svg mà font thực chất là svg. Thường kết hợp với text-shadow cho hiệu ứng ảo. 
paint-order: stroke fill; thì stroke được vẽ trước r mới fill màu lên tạo chữ đẹp hơn là mặc định

