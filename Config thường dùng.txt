-> if(('fetch' in window)) {}

{
  method: "POST",
  headers: {
    "Content-Type": "application/json" hoặc "application/x-www-form-urlencoded;charset=UTF-8", // Kiểu gửi lên server 
    'Accept': 'application/json', // Kiểu muốn nhận về từ server
    Authorization: "Bearer ...",
    'cache-control': 'public, s-maxage=1200, stale-while-revalidate=600',
    Connection: 'keep-alive'
    'keep-alive': 'timeout=5, max=100'
  },
  body: JSON.stringify({
    audio: base64
  }),
  credentials: "include",
  mode: "cors",
  redirect: "manual", // manual trả về 1 phản hồi chuyển hướng để tự xử lý, follow (default) tuân theo các phản hồi chuyển hướng bth, error thì phản hồi chuyển hướng sẽ ném lỗi
  signal: AbortSignal.timeout(3000),
}

--> Connection: 'keep-alive', sẽ k đóng TCP connection mà tái sử dụng cho nhiều request sau. Chỉ cần thiết với http1.1 chứ http2 trở đi tự hỗ trợ.
'keep-alive': 'timeout=5, max=100', nếu k có yêu cầu nào mới trong 5s sẽ đóng connection, connection này chỉ xử lý max 100 request là đóng.
2 header này phải đi với nhau. Vd connection: "close" thì keep-alive sẽ bị bỏ qua

--> mode => bth chả cần đụng vì cors và same-origin tự default rồi.
- "cors": yêu cầu tuân theo cors, là default khi thực hiện yêu cầu cross-origin. Trình duyệt sẽ thêm header Origin vào request để báo nguồn gốc yêu cầu. Nếu server phản hồi với header Access-Control-Allow-Origin là * hoặc tên miền cụ thể thì ok (server đã setup cors), nếu server k phản hồi với header này thì browser sẽ chặn và báo lỗi.
Browser cũng gửi preflight request với OPTIONS để check trước với Access-Control-Request-Method và Access-Control-Request-Headers, Origin
=> Dùng khi gửi cross-origin và biết rằng server đã cấu hình cors để cho phép call từ browser.
- "no-cors": dùng khi cần gọi cross origin nhưng biết rằng server k cấu hình cors cho ta gọi. Tức khi gọi mà k cần lấy response, chỉ muốn lấy các header thông tin cơ bản. 
Nội dung k thể truy cập bị đánh dấu là opaque Vd: response.type là "opaqueredirect" hoặc "opaque"
- "same-origin": khi cùng origin và truy cập được mọi thứ, là default khi gọi same-origin
- "navigate": khi trình duyệt tự thực hiện yêu cầu chuyển hướng tải trang web mới, ta k dùng với fetch bao giờ, truy cập đủ mọi thứ. 

--> credentials
- "include": gửi thông tin xác thực với mọi yêu cầu, bao cả cross-origin. Vd gửi request kèm cookies với fetch của browser chỉ cần thêm option này chứ kp nhét cookies vào option
- "omit" (default): Không gửi thông tin xác thực cùng với yêu cầu.
- "same-origin": Gửi thông tin xác thực chỉ khi gửi yêu cầu đến cùng một origin với web

--> cache-control => quản lý cache browser, có thể kết hợp các options với ;
public: cache lưu cả yêu cầu và phản hồi ở client và proxy (shared caches) ở server => luôn dùng
private: cache chỉ lưu trữ ở từng client browser
no-cache: phải request check lại với server trước khi dùng cache, phản hồi 304 Not Modified nếu data chưa đổi 
no-store: k cache gì hết
max-age=<seconds>: thời gian max dùng cache trước khi cần xác thực lại với server, cả server proxy và client. Luôn dùng cái này, override trường expires k còn dùng.
s-maxage=<seconds>: thời gian max dùng cache trên các proxy (shared caches) trước khi cần xác thực lại với server.
stale-while-revalidate=<seconds>: cho phép dùng cache cũ trong thời gian bao lâu trong khi tiến hành xác thực lại với server.
must-revalidate: luôn xác thực lại với server trước khi dùng cache, kể cả biết cache vẫn hợp lệ
VD: Cache-Control: public, max-age=3600, s-maxage=1200 => cache lưu cả client và proxy, cache dùng trên máy khách 1h trước khi xác thực lại với server, trên proxy thì 1200s. Nên set file css js ảnh là thời gian cực lâu, các api data đổi nhiều thì no-cache. 
Phải set cho cả cho FE (server host nó) hoặc set cho API server nodejs nếu trả static file. Thực ra React host lên tự động cache các files static lâu r. Thường set ở nginx proxy, hoặc dùng mặc định browser tự cache file tĩnh ok r.



-> Parcel package.json:
"@parcel/transformer-css": {
  "errorRecovery": true => Cho phép Parcel tiếp tục build khi có lỗi trong CSS thay vì dừng lại.
}



-> Cookie string:
name=value; =>*
Expires=Wed, 09 Nov 2023 10:00:00 GMT; => absolute hết hạn
Max-Age=3600; =>* relative seconds. Dùng 1 trong 2 expires or max-age thôi, k có cả 2 sẽ thành session cookie, mất khi close
Path=/dashboard; =>* cookie chỉ tồn tại ở path này, k có sẽ chỉ ở path hiện tại
Secure; =>* k có sẽ dùng cả trong http và https
HttpOnly; =>* k có sẽ truy cập được bằng JS
SameSite=Strict; =>*
Partitioned; => khi có thì cookie tự bị giới hạn trong 1 context cụ thể Vd 1 iframe hay 1 web. K thể gửi kèm các yêu cầu http ngoài phạm vi đó.
Priority=High; => cookies sẽ k ưu tiên trong việc bị xóa, VD khi bộ nhớ đầy browser tự xóa.
Domain=example.com; => cookie chỉ valid khi ở domain này, k có sẽ chỉ ở web hiện tại

--> SameSite:
Strict: ngăn hoàn toàn việc gửi cookie cho mọi cross-site. Vd web A đăng nhập rồi, xong vào A từ 1 link khác sẽ báo là chưa đăng nhập vì cookie k được gửi kèm
Lax (Default): Tương tự nhưng vẫn gửi được cross-site với request GET, request POST sẽ bị chặn
None: Gửi kèm trong mọi yêu cầu => phải dùng kèm với Secure để chỉ HTTPs



-> <script type="speculationrules">
  {
    "prefetch: [ // or prerender
      {
        "urls": ["/", "/test.html"],
        "where": { // or
          "and": [
            { "href_matches": "/*" }, // mọi url
            { "not": { "href_matches": "/logout/:id" } }, // trừ các url lá "/logout/:id"
            { "not": { "selector_matches": ".no-prerender" } }, // Page k có tag nào có selector css class là no-prerender
          ]
        },
        "eagerness": "moderate"
      }
    ]
  }
</script>

