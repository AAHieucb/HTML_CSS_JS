-> if(('fetch' in window)) {}
const formData = new FormData();
formData.append('audio', base64)
{
  body: formData,
}

{
  method: "POST",
  headers: {
    "Content-Type": "application/json" hoặc "application/x-www-form-urlencoded;charset=UTF-8", // Kiểu gửi lên server 
    'Accept': 'application/json', // Kiểu muốn nhận về từ server
    Authorization: "Bearer ...",
    'cache-control': 'public, s-maxage=1200, stale-while-revalidate=600',
  },
  body: JSON.stringify({
    audio: base64
  }),
  credentials: "include",
  mode: "cors",
  redirect: "manual", // manual trả về 1 phản hồi chuyển hướng để tự xử lý, follow (default) tuân theo các phản hồi chuyển hướng bth, error thì phản hồi chuyển hướng sẽ ném lỗi
}

--> mode => bth chả cần đụng vì cors và same-origin tự default rồi.
- "cors": yêu cầu tuân theo cors, là default khi thực hiện yêu cầu cross-origin. Trình duyệt sẽ thêm header Origin vào request để báo nguồn gốc yêu cầu. Nếu server phản hồi với header Access-Control-Allow-Origin là * hoặc tên miền cụ thể thì ok (server đã setup cors), nếu server k phản hồi với header này thì browser sẽ chặn và báo lỗi.
Browser cũng gửi preflight request với OPTIONS để check trước với Access-Control-Request-Method và Access-Control-Request-Headers, Origin
=> Dùng khi gửi cross-origin và biết rằng server đã cấu hình cors để cho phép call từ browser.
- "no-cors": dùng khi cần gọi cross origin nhưng biết rằng server k cấu hình cors cho ta gọi. Tức khi gọi mà k cần lấy response, chỉ muốn lấy các header thông tin cơ bản. 
Nội dung k thể truy cập bị đánh dấu là opaque Vd: response.type là "opaqueredirect" hoặc "opaque"
- "same-origin": khi cùng origin và truy cập được mọi thứ, là default khi gọi same-origin
- "navigate": khi trình duyệt tự thực hiện yêu cầu chuyển hướng tải trang web mới, ta k dùng với fetch bao giờ, truy cập đủ mọi thứ. 

--> credentials
- "include": gửi thông tin xác thực với mọi yêu cầu, bao cả cross-origin. Vd gửi request kèm cookies với fetch của browser chỉ cần thêm option này chứ kp nhét cookies vào option
- "omit" (default): Không gửi thông tin xác thực cùng với yêu cầu.
- "same-origin": Gửi thông tin xác thực chỉ khi gửi yêu cầu đến cùng một origin với web

--> cache-control => có thể kết hợp các options với ;
public: cache lưu cả yêu cầu và phản hồi ở client và proxy (shared caches) ở server => luôn dùng
private: cache chỉ lưu trữ ở từng client browser
no-cache: phải request check lại với server trước khi dùng cache, phản hồi 304 Not Modified nếu data chưa đổi 
no-store: k cache gì hết
max-age=<seconds>: thời gian max dùng cache trước khi cần xác thực lại với server, cả server proxy và client.
s-maxage=<seconds>: thời gian max dùng cache trên các proxy (shared caches) trước khi cần xác thực lại với server.
stale-while-revalidate=<seconds>: cho phép dùng cache cũ trong thời gian bao lâu trong khi tiến hành xác thực lại với server.
must-revalidate: luôn xác thực lại với server trước khi dùng cache, kể cả biết cache vẫn hợp lệ
VD: Cache-Control: public, max-age=3600, s-maxage=1200 => cache lưu cả client và proxy, cache dùng trên máy khách 1h trước khi xác thực lại với server, trên proxy thì 1200s



-> Parcel package.json:
"@parcel/transformer-css": {
  "errorRecovery": true => Cho phép Parcel tiếp tục build khi có lỗi trong CSS thay vì dừng lại.
}
