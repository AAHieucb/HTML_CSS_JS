# Dark mode 
Ta nên để default vào web sẽ theo setting của browser. Khi ấn đổi mode sẽ lưu localStorage và theo settings đó và luôn ghi đè setting browser.

-> Css có sẵn darkmode là dùng html { color-scheme: light dark; } tương đương với <meta name="color-scheme" content="light dark"> => Bỏ k dùng
Khi dùng cả 2 giá trị "light dark" như này là theo setting của browser.
Nếu set rõ ràng color-scheme: light; hay color-scheme: dark; sẽ dùng đúng mode đó.
Hàm light-dark(màu light, màu dark); sẽ trả về màu tương ứng tuỳ vào setting browser. Để dùng ligh-dark, phải có "color-scheme: light dark;" trong :root

-> style trong @media (prefers-color-scheme: dark) { } sẽ được áp dụng khi settings của browser là dark hoặc color-scheme trên là dark => Bỏ k dùng
K ổn vì nếu browser set dark thật thì style bên trong k thể mất, tức đổi sang light éo được. Buộc trong nó lại phải định nghĩa màu của cả 2 mode

-> Mặc định Canvas là màu của background, CanvasText là màu của text tự được thay đổi tuỳ vào mode hiện tại => Bỏ k dùng
VD có thể set trong từng thẻ để bảo 1 thẻ dùng mode nào
Để thêm sáng tối cho màu có thể dùng color-mix(in oklab, Canvas 75%, RebeccaPurple);

-> Cách tốt nhất là dùng JS: Check darkmode browser với window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches; rồi lưu vào localStorage.



# Tạo tab a11y
Khi chuyển trang, ưu tiên dùng thẻ a thay vì button. Còn single page thì dùng <a href="#idofelement"/>
Thay vì add event click vào từng thẻ, ta chỉ cần add vào thẻ container sẽ tự phát khi các phần bên trong bị click

-> Các thẻ chi tiết phải luôn dán nhãn, nhất là các thẻ chỉ có icon k có text mô tả:
Dùng với aria-label được: <button aria-label="Tìm kiếm">
Dùng với aria-labeledby khi cần 1 hoặc nhiều thẻ khác làm nhãn cho thẻ hiện tại. VD:
<p id="label1">Giỏ hàng:</p>
<p id="label2">Bạn có 3 sản phẩm.</p>
<div role="region" aria-labelledby="label1 label2">
  <!-- Nội dung -->
</div>

-> Để có a11y tốt khi dùng tab, đảm bảo ấn tab và mũi tên là có thể navigate được.
Cách dùng aria cho tabs: https://www.w3.org/WAI/ARIA/apg/patterns/tabs/

role="tablist", role="presentation", tabindex, role="tab", role="tabpanel"
Thuộc tính role sẽ loại bỏ ý nghĩa senmatic của thẻ, VD role="presentation" cho thẻ li chỉ định rằng phần tử có mục đích trình bày (decorative), không mang ý nghĩa semantic hay chức năng trong ngữ cảnh hiện tại, tức thẻ li không còn biểu hiện cho list nữa và sẽ bị bỏ qua trong accessibility tree, screen reader sẽ không đọc hoặc thông báo về nó

Mặc định ấn key tab sẽ navigate qua mọi thẻ a trên page. Nếu dùng tabindex="-1" cho 1 thẻ sẽ bị bỏ qua khi nhảy tab. Nếu dùng tabindex="0" cho các thẻ khác như div thì nó sẽ nhảy vào cả các thẻ đó. Điều này tiện cho việc ấn key tab vào 1 tab, và ấn key tab tiếp sẽ vào content của tab kể cả div đó chứ k nhảy qua
Set bằng JS, ta cho mọi tab k active có tabindex="-1", tab đang active và nội dùng của nó có tabindex="0"

Thuộc tính hidden k chỉ ẩn thẻ đi mà cũng ẩn nó khỏi accessibility tree, tương tự display none. Còn visibility: hidden chỉ ẩn trên UI mà k ẩn trên accessibility tree. 
VD dùng display none / hidden + aria-hidden="false" => k hoạt động, sẽ ẩn khỏi tree. Dùng visibility hidden + aria-hidden="false" ok UI k có mà a11y vẫn hđ

aria-selected="true" bảo screen reader biết hiện đang ở tab nào, nó cũng tác động vào style tag nào là tag đang được chọn

aria-controls k nên dùng, nếu muốn thêm thông tin mô tả cho tab thì có thể dùng: aria-describedby="idofelement" và dùng 1 thẻ <div id="idofelement" aria-hidden="false" style="visibility:hidden;"></div> để thêm nếu cần. Nội dung của thuộc tính này được sử dụng khi ngừoi dùng vào tab đó và screen reader đọc nó lên cho ngừoi dùng nghe.

Ấn key left right để switch tab thì phải tự custom tạo hàm riêng thao tác với DOM thôi. Bắt sự kiện keydown.
Điều đặc biệt là khi ta add event keydown cho tabContainer thì chỉ khi ấn tab focus vào tabContainer thì keydown của nó mới bắt chứ ngoài màn hình gõ sẽ k ảnh hưởng

-> Tạo tab html thuần
- Mỗi tab nên ở cùng pages và k chuyển pages. Vì chỉ đổi tab nhưng mọi phần code html chung lại phải copy ra nhiều file.
Cũng phải lưu lại vị trí scroll với các state data khác vào sessionStorage, trước khi chuyển, và khi page onload phải lấy lại data rất rối.
- Đơn giản có thể viết nội dung tab hết 1 file rồi xử lý JS để display none hay hiện ra khi ngừoi dùng ấn vào tab
- Để chuyển tab có thể dùng label checkbox để bắt và hiển thị content bằng HTML CSS thuần, hoặc dùng JS luôn được. Có thể animation content hiện ra ok.
Có thể tạo animation slide từ 2 hướng khi chuyển tab, buộc phải dùng JS khi đó để xác định hướng cho animation, mỗi animation 1 keyframe riêng.
- Có thể dùng window.history.pushState để đổi url mà k chuyển page, kèm xử lý onload. Để khi chuyển page sẽ đổi url, gõ url vào sẽ hiển thị đúng đang là tab nào.
- Dùng kèm view transition api là thành animation đỉnh chóp

-> Nhanh chỉ cần set: aria-label, aria-labelledby, aria-describedby, aria-hidden, aria-selected, aria-controls, aria-current, aria-autocomplete (kèm input autocomplete), title, alt, role, aria-expanded
Icon thì nên có aria-hidden hoặc mô tả bằng aria label cho tag bao nó
aria-controls xác định quan hệ điều khiển, phần tử này điều khiển phần tử khác. Vd 1 button điều khiển dialog, menu, tab panel. Dùng label for để toggle thì k cần
VD: <button aria-controls="idofdialog">. Tương tự aria-expanded cho button ấn button là mở rộng gì đó, cập nhật bằng JS khi mở và đóng là true và false, nó thể hiện trạng thái hiện tại của dialog

--> Bộ 3 aria-errormessage, aria-invalid dùng cho thẻ input khi bị lỗi, aria-required báo input này k thể để trống:
<input id="email" type="email" aria-invalid="true" aria-errormessage="email-error" aria-required="true">
<span id="email-error" role="alert">Email không hợp lệ</span>
Bộ 3 aria-controls, aria-expand và aria-haspopup cho button thể hiện có menu hay danh sách thả hay hộp thoại:
<button aria-haspopup="dialog" aria-controls="login-dialog">
  Đăng nhập
</button>
<div id="login-dialog" role="dialog" hidden>
  <p>Vui lòng nhập thông tin đăng nhập.</p>
</div>
Bộ 2 aria-selected và aria-multiselectable báo có thể chọn nhiều options:
<ul role="listbox" aria-multiselectable="true">
  <li role="option" aria-selected="true">Mục 1</li>
  <li role="option" aria-selected="false">Mục 2</li>
  <li role="option" aria-selected="true">Mục 3</li>
</ul>
aria-readonly là 1 phần tử chỉ đọc k thể tương tác:
<label for="username">Tên đăng nhập:</label>
<input id="username" type="text" aria-readonly="true" value="user123">

-> pointer-events: none; sẽ cản sự kiện của 1 thẻ. VD ứng dụng navigation bar đang ở tab .active thì ấn vào sẽ k load lại chính trang hiện tại nữa có thể dùng.

-> Trong devtool browser có Elements Accessibility tool

-> Dùng ul li a header h1 p nav main article section aside footer



# Tự tạo dialog css thuần hiện ra
-> <dialog> có thể mở đóng bằng HTML, CSS để style nhưng sẽ k có animation.
Dùng css thuần @starting-style và transition-behavior allow-discrete sẽ có animation nhưng k hoạt động với safari
Dialog là 1 loại popover và có thể dùng kèm API của popover => tạo ra dialog tự có click outside to close nhưng k hđ với safari.

--> Cách tốt nhất hoạt động với safari:
Dùng @keyframes và js event animationend thay vì @styles transition.
Ấn ra ngoài ẩn dialog thì bắt sự kiện click global rồi check target khác dialog để close dialog thay vì dùng dialog + popup.

-> Vấn đề mở dialog thì cản scroll, vị trí scroll ngoài phải giữ nguyên khi tắt dialog, content k bị di chuyển sang trái khi mở, hoạt động trên cả mobile.
- Dùng <dialog> vốn tự cản scroll rồi
- VD: html:has(dialog[open]){
  overflow: hidden;
  padding-right: 15px;
}
=> padding-right bằng kích thước scrollbar, default là 15px nhưng nên set width ::-webkit-scrollbar để đảm bảo cũng bằng kích thước 15px => Giải quyết vấn đề 3 nhưng 2 thì vẫn mất vị trí scroll, trên safari iOS vẫn bị lỗi content dịch chuyển
- VD: html:has(dialog[open]){
  position: fixed;
}
=> Tương tự nhưng safari iOS chạy ngon. Vấn đề duy nhất là mất vị trí scrollbar.
- Cách hoàn hảo nhất là làm như VD trên nhưng thêm 1 biến css lưu vị trí scroll bằng event "scroll", khi đóng dialog thì dùng JS jump tới là được.

-> Scrollbar hiển thị: nên cho background transparent chỉ hiện mỗi thumb
Nếu muốn scrollbar luôn hiện "overflow: scroll;" => ok
Nếu muốn scrollbar luôn chiếm kích thước kể cả khi k hiện "scrollbar-gutter: stable". Điều đb là nó bằng đúng kích thước width set của ::-webkit-scrollbar => k dùng vì khi kết hợp position fixed dialog khiến scrollbar-gutter k chiếm nx
Tối ưu là khi k overflow thì k hiện scrollbar nhưng scrollbar vẫn chiếm kích thước bth kể cả position fixed dialog => k làm được trừ khi tự tạo thẻ scroll

->*** Với dialog, nên cho dialog trên điện thoại thì full màn hình or bottom sheet, dialog trên máy tính thì có 1 popup ở giữa. 
Trong react cho kiểu fullWidth={isMobile} sẽ ok hơn. Khi đó dialog buộc có 1 nút bấm để out ra chứ điện thoại k thể bấm ra ngoài.

-> Chốt: tạo dialog ấn ra ngoài là tắt
Bản gọn nhất là dùng css only với dialog + popover + @starting style cho dialog và ::backdrop => nhưng k tương thích mọi browser
HTML thuần dùng JS thì thêm class và bắt event animationend, tạo từng animation cho từng step bằng css. Dùng popover hoặc bắt event click window mà k click dialog thì ẩn đi
Trong react nên dùng thư viện tạo bottom sheet or dialog sẽ tự dùng portal. Hoặc tự custom div thay cho dialog và dùng portal. Nếu dùng css only với @keyframes, có thể tạo animation lúc mở chứ đóng thì éo được. Muốn tạo animation đóng buộc phải thêm JS y như html thuần thì k chuẩn trong react.



# Speculation rules
URL: https://www.youtube.com/watch?v=LEF4UaM5m4U&list=WL 
- Speculationrules cho prefetch và prerender trong html cho tốc độ siêu tốc. Chỉ cần thêm 1 tag script là xong.
prefetch chỉ tải html, prerender sẽ tải hết và chạy cả js sẵn để client chỉ cần render ra.
- Trong browser tab application có speculation rules.
- eagerness mặc định là immediate tức page load 1 phát là tải mọi tài nguyên ảnh và link prefetch trước trên pages này, k ổn vì page lớn có quá nhiều file.
eager không khác immediate là mấy, cũng tải nhưng k vội. eager và immediate giới hạn tải 50 pages trước thôi. Chú ý mỗi file html tải trước sẽ là 1 files, k tính các tài nguyên bên trong, cái đó tuỳ vào prerender hay prefetch.
moderate y hệt nhưng giới hạn max 2 pages, phải hover vào link hay scroll gần tới mới prefech. VD hover vào 3 đường link, đường link đầu sẽ bị stale.
conservative max 2 page và user phải click vào link mới prefetch, nó chỉ lợi hơn 1 tí tẹo so với bth.
=> Có thể chia page bth thì load moderate, page khác hay vào hơn thì load immediate 
- Việc prerender exec code JS rất nguy hiểm. VD trang logout prerender execute code luôn là toang. 
Có nhiều cách fix như để request post thay vì get ở 1 file html mới. 

Khi prerender sẽ gửi request kèm 1 header đặc biệt, nếu setup analytics thì k được tính số lần tải pages mà phải check vào pages k ở trạng thái prerender mới được.
Giải pháp là check khi thực sự vào 1 pages được prerender mới chạy analytics:
if(document.prerendering) { // true khi được tải bằng prerender
  document.addEventListener( "prerenderingchange", // sự kiện phát ra khi đổi trạng thái từ prerender sang k prerender nữa, VD khi thực sự access 1 pages được prerender
    func, { once: true }
  );
} else { func(); }

=> Chú ý speculation rules k dùng cho nextjs vì có sẵn r, reactjs thì SPA nên chả cần.



# Custom timeout cho fetch k hỗ trợ sẵn
const timeout = (ms, promise) => {
  return new Promise((resolve, reject) => {
    setTimeout(() => { reject(new Error("Request timed out")) }, ms);
    promise.then(resolve, reject);
  })
}
const response = await timeout(1000, fetch("<url>"));
=> Thực tế các api cần xác thực nên dùng axios, còn các api allow anonymous thì dùng fetch luôn cho nhanh => nên thêm abort controller



# Dừng
{ display: list-item; list-style-position: inside; } để hiển thị thẻ dạng list. Còn có display: table;
css houdini can thiệp sâu vào animation, rendering, view-timeline-axis, view-timeline-direction mà trước đây k thể làm dược với css
https://www.frontendmentor.io/ => học Fremaster
https://courses.kevinpowell.co/view/courses/conquering-responsive-layouts/233002-introduction/1007804-intro-why-the-course-is-formatted-in-this-way => khoá học responsive uy tín (hieucuopbien123@gmail.com - 180101)
Design trend: Hover chuột thì card glowing border, sáng card đó và tối cả container, nghiêng card, vật thể to lên tràn ra ngoài card. https://glow-cards.webflow.io/
https://css-tricks.com/positioning-text-around-elements-with-css-offset/ => tạo text di chuyển xung quanh element với offset
https://www.youtube.com/watch?v=Fu4Pl5k-3yQ => dùng mix-blend-mode để đè các layer ảnh, animation ảnh như đang chuyển động, tạo layer và animation với layer bằng clip-path
@function in css và if()
https://www.youtube.com/watch?v=VA975GOUFmM => css new feature
https://www.youtube.com/watch?v=tNBufpGQihY => selectedcontent css new feature
https://css-tricks.com/worlds-collide-keyframe-collision-detection-using-style-queries/ => css thuần detect collision, animation với thẻ input range của html, @container theo style, tạo game thuần bằng css, @property
https://css-tricks.com/css-carousels/ => ::scroll-button tạo carousel bằng css only => nên dùng css only nhiều nhất có thể cho mọi thứ

