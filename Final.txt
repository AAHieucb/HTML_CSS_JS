# Dùng counter-reset hiện số đếm tự tăng k cần JS
URL: https://www.youtube.com/watch?v=PL3Odw-k8W4



# Transform stream
1 loại stream xử lý data, pipe vào các stream khác như bth.

Vd tạo một TransformStream để chuyển đổi văn bản thành chữ hoa trước khi đọc nó thì dùng transform stream ở giữa để viết hoa chữ:
const transformStream = new TransformStream({
  start() {
    // Được gọi khi TransformStream khởi tạo
    console.log('TransformStream bắt đầu.');
  },
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  },
  flush(controller) {
    // Được gọi khi toàn bộ luồng đầu vào đã được xử lý
    console.log('Đã hoàn thành chuyển đổi.');
  }
});
const readableStream = new ReadableStream({
  start(controller) {
    // Đẩy dữ liệu vào luồng
    controller.enqueue('hello');
    controller.enqueue(' world');
    controller.close();
  }
});
// Kết nối ReadableStream với TransformStream và tạo một WritableStream để ghi dữ liệu
readableStream
  .pipeThrough(transformStream) // Chuyển dữ liệu qua TransformStream
  .pipeTo(new WritableStream({
    write(chunk) {
      // Ghi ra phần dữ liệu đã biến đổi
      console.log(chunk);
    },
    close() {
      console.log('Đã ghi xong dữ liệu.');
    }
  }));



# Animation với transform 
1) Thứ tự transform có ảnh hưởng tới object di chuyển, rotateZ sẽ rotate cả trục tọa độ nên nếu rotateZ rồi translateX khác với translateX rồi rotateZ
2) transform origin mặc định ở top left
3) rotate xoay các trục theo chiều kim đồng hồ khi các trục chỉ vào mặt mình
4) keyframe transform: rotateZ(-45deg) translateX(50px) rotateZ(45deg); => nó khiến object đi đường vòng cung và k bị xoay vì các animation thực hiện đồng thời. Nó sẽ rotateZ, đi trục x, rotateZ ngược lại. Tức là ở mỗi bước di chuyển, nó rotateZ và đi trục x đồng thời làm đường vòng cung. Sau đó rotateZ ngược lại khiến object quay về vị trí ban đầu. Quá trình cực nhanh ở mỗi bước. Nó k đi chéo luôn vì quá trình rotate và đi trục X đồng thời chứ kp rotate xong mới đi x, cuối cùng mới rotate ngược về
5) Để animation 1 set thẻ, ta nhét vào 1 thẻ container và animation thẻ container là được
6) Animation k tự chạy lại khi đã chạy xong đúng số lần, nếu muốn chạy lại, phải gán tiếp lại class có animation cho nó.
7) Mỗi giai đoạn di chuyển khác nhau nên có 1 animation riêng. Khi đã có animation xuôi, k nên tái sử dụng animation ngược lại với direction reverse mà hãy tạo 1 keyframe mới vì nhiều lúc lỗi k hiểu tại sao.
8) Nếu vị trí from của animation k trùng với vị trí ban đầu, vật sẽ nhảy sang state đó r animation tiếp rất xấu. State trước khi chạy animation cũng chính là from



# Trick responsive flexbox grid
Xếp flex-basis trước, nếu các thẻ có flex-basis mà k đủ cho 1 dòng thì sẽ xuống dòng. Sau đó mới tính grow, shrink. Do đó có thể lợi dùng flex-basis để kiểm soát số cột

VD grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); Tự xếp column fit vào ô với kích thước 200px nếu có thể. Có thể dãn lớn hơn 200px. Nhỏ hơn 200px thì xuống dòng.
minmax nếu max nhỏ hơn min thì lấy min. minmax chỉ dùng trong cssgrid.
1fr đơn vị phân số fraction chia tỉ lệ nhưng bản thân nó k theo kích thước bất cứ container nào cả, chỉ là tỉ lệ các item. Bth nó kiểu max 100% ấy. Nếu cố điền 1fr trong 1 đơn vị yêu cầu kích thước cụ thể sẽ hoạt động k như mong muốn, hay invalid property.
repeat là hàm trong css có sẵn. Thường dùng là repeat(số/auto-fill/auto-fit, số); Tức là auto-fit và auto-fill là giá trị của repeat chứ klq gì đến grid. Mục số là điền số chứ đừng điền 1fr, có thể dùng minmax(200px,1fr) để full width mà max width.
Nếu display grid, các item mà k set grid-column hay grid-row, nó sẽ mặc định 1 item là 1 ô. K set kích thước thì 1 ô chiếm cả row.
Grid có điểm đặc biệt là theo grid. Dòng trên có cột width như nào thì dòng dưới phải có cột width như vậy. Nếu k muốn v thì dùng flex.

-> Kỹ thuật responsive:
1) Tạo dương cực lớn hay âm cực lớn ở 1 mốc.
Lấy 100% - absolute unit và so sánh với mốc mong muốn rồi *999 => kết hợp min max kiểu lớn hơn 200px thì lấy dương vô cực, nhỏ hơn thì lấy 200px
2) Max số cột:
Dựa vào tính chất xếp k đủ thì tự giảm cột xuống dòng. Ta cố tình cho width 100% / 4 + 0.1% => kbh 1 row có 4 cột được vì k đủ width, buộc dùng 3 cột kéo dãn

VD: grid-template-columns: repeat(auto-fill, minmax(<min-width 1 column>, 1fr));

VD chỉ muốn bo góc ở màn hình lớn:
.card {
  border-radius: max(0px, min(8px, calc((100vw - 4px - 100%)*9999)));
}
=> 100vw là kích thước screen, 100% là kích thước container. Nếu kích thước container gần như bằng với kích thước screen sẽ thành max(0px,min(8px,âm vô cực) = 0px. Nếu kích thước container không bằng với màn hình (vì màn hình lớn ta cho container nhỏ ra giữa thôi) thì thành max(0px,min(8px,dương vô cực)) = 8px
Tức if(mobile) borderRadius=0px else borderRadius=8px



# CSS selector
input[type='file'][multiple] khi chọn nhiều thuộc tính



# Tự tạo dialog css thuần hiện ra
Để tạo tính năng click ra ngoài thì ẩn dialog, có thể bắt sự kiện click global rồi check target được click k chứa dialog thì close dialog.
1 cách khác là phủ 1 thẻ màu tối toàn màn hình rồi đè dialog lên. Click vào dialog thì k sao nhưng click vào thẻ đó bên ngoài sẽ close dialog
Để tuỳ biến có scroll màn hình ngoài hay không chỉ cần set overflow hidden là cản scroll thôi.


