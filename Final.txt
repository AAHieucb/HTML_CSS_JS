# Custom timeout cho fetch k hỗ trợ sẵn
const timeout = (ms, promise) => {
  return new Promise((resolve, reject) => {
    setTimeout(() => { reject(new Error("Request timed out")) }, ms);
    promise.then(resolve, reject);
  })
}
const response = await timeout(1000, fetch("<url>"));
=> Thực tế các api cần xác thực nên dùng axios, còn các api allow anonymous thì dùng fetch luôn cho nhanh => nên thêm abort controller



# Dừng
{ display: list-item; list-style-position: inside; } để hiển thị thẻ dạng list. Còn có display: table;
css houdini can thiệp sâu vào animation, rendering, view-timeline-axis, view-timeline-direction mà trước đây k thể làm dược với css
https://www.frontendmentor.io/ => học Fremaster
https://courses.kevinpowell.co/view/courses/conquering-responsive-layouts/233002-introduction/1007804-intro-why-the-course-is-formatted-in-this-way => khoá học responsive uy tín (hieucuopbien123@gmail.com - 180101)
Design trend: Hover chuột thì card glowing border, sáng card đó và tối cả container, nghiêng card, vật thể to lên tràn ra ngoài card. https://glow-cards.webflow.io/
https://css-tricks.com/positioning-text-around-elements-with-css-offset/ => tạo text di chuyển xung quanh element với offset
https://www.youtube.com/watch?v=Fu4Pl5k-3yQ => dùng mix-blend-mode để đè các layer ảnh, animation ảnh như đang chuyển động, tạo layer và animation với layer bằng clip-path
@function in css và if()
https://www.youtube.com/watch?v=VA975GOUFmM => css new feature
https://www.youtube.com/watch?v=tNBufpGQihY => selectedcontent css new feature
https://css-tricks.com/worlds-collide-keyframe-collision-detection-using-style-queries/ => css thuần detect collision, animation với thẻ input range của html, @container theo style, tạo game thuần bằng css, @property
https://css-tricks.com/css-carousels/ => ::scroll-button tạo carousel bằng css only => nên dùng css only nhiều nhất có thể cho mọi thứ

