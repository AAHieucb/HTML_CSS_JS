# Dùng counter-reset hiện số đếm tự tăng k cần JS
URL: https://www.youtube.com/watch?v=PL3Odw-k8W4



# Transform stream
1 loại stream xử lý data, pipe vào các stream khác như bth.

Vd tạo một TransformStream để chuyển đổi văn bản thành chữ hoa trước khi đọc nó thì dùng transform stream ở giữa để viết hoa chữ:
const transformStream = new TransformStream({
  start() {
    // Được gọi khi TransformStream khởi tạo
    console.log('TransformStream bắt đầu.');
  },
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  },
  flush(controller) {
    // Được gọi khi toàn bộ luồng đầu vào đã được xử lý
    console.log('Đã hoàn thành chuyển đổi.');
  }
});
const readableStream = new ReadableStream({
  start(controller) {
    // Đẩy dữ liệu vào luồng
    controller.enqueue('hello');
    controller.enqueue(' world');
    controller.close();
  }
});
// Kết nối ReadableStream với TransformStream và tạo một WritableStream để ghi dữ liệu
readableStream
  .pipeThrough(transformStream) // Chuyển dữ liệu qua TransformStream
  .pipeTo(new WritableStream({
    write(chunk) {
      // Ghi ra phần dữ liệu đã biến đổi
      console.log(chunk);
    },
    close() {
      console.log('Đã ghi xong dữ liệu.');
    }
  }));



# Animation
Animation với transform 
1) Thứ tự transform có ảnh hưởng tới object di chuyển, rotateZ sẽ rotate cả trục tọa độ nên nếu rotateZ rồi translateX khác với translateX rồi rotateZ
2) transform origin mặc định ở top left
3) rotate xoay các trục theo chiều kim đồng hồ khi các trục chỉ vào mặt mình
4) keyframe transform: rotateZ(-45deg) translateX(50px) rotateZ(45deg); => nó khiến object đi đường vòng cung và k bị xoay vì các animation thực hiện đồng thời. Nó sẽ rotateZ, đi trục x, rotateZ ngược lại. Tức là ở mỗi bước di chuyển, nó rotateZ và đi trục x đồng thời làm đường vòng cung. Sau đó rotateZ ngược lại khiến object quay về vị trí ban đầu. Quá trình cực nhanh ở mỗi bước. Nó k đi chéo luôn vì quá trình rotate và đi trục X đồng thời chứ kp rotate xong mới đi x, cuối cùng mới rotate ngược về
5) Để animation 1 set thẻ, ta nhét vào 1 thẻ container và animation thẻ container là được
6) Animation k tự chạy lại khi đã chạy xong đúng số lần, nếu muốn chạy lại, phải gán tiếp lại class có animation cho nó.
7) Mỗi giai đoạn di chuyển khác nhau nên có 1 animation riêng. Khi đã có animation xuôi, k nên tái sử dụng animation ngược lại với direction reverse mà hãy tạo 1 keyframe mới vì nhiều lúc lỗi k hiểu tại sao.
8) Nếu vị trí from của animation k trùng với vị trí ban đầu, vật sẽ nhảy sang state đó r animation tiếp rất xấu. State trước khi chạy animation cũng chính là from

-> Multiple aniamtion liên tiếp nhau sử dụng animation-delay và set phần trăm chuẩn trong @keyframes

-> Playback 1 animation cũ: 
1) Bth animation chạy 1 lần sẽ k trigger lại, nhưng nếu gán cho 1 animation khác r remove animation đó thì animation cũ sẽ trigger. Điều này chỉ được khi đổi animation-name.
Nhờ v, có thể tạo 1 animation giống hệt nhau, rồi liên tục thêm bớt cái animation thứ 2 để animation trigger liên tục thực chất là 2 cái so le
2) Đổi trạng thái animation từ nhanh sang chậm khi ấn nút, ta bao bằng 1 thẻ khác và animation ngược lại với cường độ nhỏ hơn, ấn thì đổi animation-play-state paused sang running



# Trick responsive flexbox grid
Xếp flex-basis trước, nếu các thẻ có flex-basis mà k đủ cho 1 dòng thì sẽ xuống dòng. Sau đó mới tính grow, shrink. Do đó có thể lợi dùng flex-basis để kiểm soát số cột

VD grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); Tự xếp column fit vào ô với kích thước 200px nếu có thể. Có thể dãn lớn hơn 200px. Nhỏ hơn 200px thì xuống dòng.
minmax nếu max nhỏ hơn min thì lấy min. minmax chỉ dùng trong cssgrid.
1fr đơn vị phân số fraction chia tỉ lệ nhưng bản thân nó k theo kích thước bất cứ container nào cả, chỉ là tỉ lệ các item. Bth nó kiểu max 100% ấy. Nếu cố điền 1fr trong 1 đơn vị yêu cầu kích thước cụ thể sẽ hoạt động k như mong muốn, hay invalid property.
repeat là hàm trong css có sẵn. Thường dùng là repeat(số/auto-fill/auto-fit, số); Tức là auto-fit và auto-fill là giá trị của repeat chứ klq gì đến grid. Mục số là điền số chứ đừng điền 1fr, có thể dùng minmax(200px,1fr) để full width mà max width.
Nếu display grid, các item mà k set grid-column hay grid-row, nó sẽ mặc định 1 item là 1 ô. K set kích thước thì 1 ô chiếm cả row, tức chỉ có 1 cột
Grid có điểm đặc biệt là theo grid. Dòng trên có cột width như nào thì dòng dưới phải có cột width như vậy. Nếu k muốn v thì dùng flex.

-> Kỹ thuật responsive:
1) Tạo dương cực lớn hay âm cực lớn ở 1 mốc.
Lấy 100% - absolute unit và so sánh với mốc mong muốn rồi *999 => kết hợp min max kiểu lớn hơn 200px thì lấy dương vô cực, nhỏ hơn thì lấy 200px
2) Max số cột:
Dựa vào tính chất xếp k đủ thì tự giảm cột xuống dòng. Ta cố tình cho width 100% / 4 + 0.1% => kbh 1 row có 4 cột được vì k đủ width, buộc dùng 3 cột kéo dãn là max

VD: grid-template-columns: repeat(auto-fill, minmax(<min-width 1 column>, 1fr));

VD chỉ muốn bo góc ở màn hình lớn:
.card {
  border-radius: max(0px, min(8px, calc((100vw - 4px - 100%)*9999)));
}
=> 100vw là kích thước screen, 100% là kích thước container. Nếu kích thước container gần như bằng với kích thước screen sẽ thành max(0px,min(8px,âm vô cực)) = 0px. Nếu kích thước container không bằng với màn hình (vì màn hình lớn ta cho container nhỏ ra giữa thôi) thì thành max(0px,min(8px,dương vô cực)) = 8px
Tức if(!mobile) borderRadius=0px else borderRadius=8px

=>***Cứ tưởng tượng màn hình lớn và màn hình nhỏ thì min max width là gì là chơi dược thôi



# Tự tạo dialog css thuần hiện ra
Để tạo tính năng click ra ngoài thì ẩn dialog, có thể bắt sự kiện click global rồi check target được click k chứa dialog thì close dialog.
1 cách khác là phủ 1 thẻ màu tối toàn màn hình rồi đè dialog lên. Click vào dialog thì k sao nhưng click vào thẻ đó bên ngoài sẽ close dialog
Để tuỳ biến có scroll màn hình ngoài hay không chỉ cần set overflow hidden là cản scroll thôi.



# IntersectionObserver
Check khi chiều cao của thẻ hiển thị bao nhiêu phần trăm trên màn hình. Nó chỉ tính phần hiển thị trên màn, tức VD thẻ lớn hơn màn hình thì không bao giờ đạt threshold 100% được.
Nếu muốn làm kiểu scroll element xuống bao xa thì chạy hàm buộc phải làm thủ công window.onscroll

const handleIntersect = (entries: IntersectionObserverEntry[]) => {
  entries.forEach(entry => {
    const ratio = entry.intersectionRatio;
    console.log(ratio);
  });
};
const observer = new IntersectionObserver(handleIntersect, {
  threshold: [0.25, 0.5, 0.75]
});
observer.observe(ref.current);
observer.unobserve(ref.current);



# Vấn đề trigger lại animation
-> Trong JS để tạo ra 1 animation, ta thêm 1 class animate và thẻ đó, nhớ xoá đi khi k cần nữa.
Mỗi lần xoá rồi thêm class sẽ chạy lại animation, nhưng VD nếu muốn animation thêm lần nữa theo đk của JS thì k được. Nếu remove rồi add lại class sẽ k chạy animation.
Có nhièu cách fix:
- Trigger reflow ép ở giữa sẽ khiến browser buộc render lại ngay:
animatedElement.classList.remove('animate');
void animatedElement.offsetWidth; // forces reflow
animatedElement.classList.add('animate');

- Dùng timeout cực ngắn: cách này k đảm bảo sẽ chạy animation ở mọi trường hợp 
animatedElement.classList.remove('animate');
setTimeout(() => {
    animatedElement.classList.add('animate');
}, 10); 
=> Để 10ms là đủ khiến browser nhận ra và render lại.
=> Có thể để là 0 thì chạy ngay event loop sau.

-> Css only
VD click 1 button thì trigger animation X chạy 1 lần (css only với flex box gán animation name), click lần nữa trigger tiếp sẽ k chạy

Nếu k dùng css only, có giải pháp là đặt setTimeout cực ngắn ngay khi checked thì unchecked luôn. Cẩn thận toang khi ngừoi dùng ấn liên tục cực nhanh
Néu dùng css only, cách duy nhất là đặt 2 animation giống nhau nhưng khác tên. Gán qua gán lại để đổi qua animation khác khi unchecked và checked là ok thôi
=> Tức là animation css only sẽ k trigger lại, chỉ có cách đổi qua animation khác



# Promise
Function trả ra promise thì khi gọi function sẽ thực hiện promise luôn. 
Khi 1 promise lồng nhiều promise bên trong kiểu new Promise(<promise lồng>) thì cái ngoài thực hiện sẽ thực hiện hết các cái Trong
Biến gán = new Promise luôn thì gọi ngay lập tức khi chạy tới
Function trả ra function con, fucntion con trả ra promise thì khi nào gọi function con mới chạy promise như bth



# Animate SVG
stroke-dasharray: 5,3; tức là 5 pixel liền thì có 3 pixels đứt sau đó và cứ tiếp tục vẽ đến hết hình
stroke-dashoffset xác định điểm bắt đầu vẽ của stroke-dasharray.

Bản chất animate line svg là nó animate thuộc tính stroke-dashoffset thôi
VD vẽ animationt trên trang https://editor.method.ac/ rồi svg từng phần tử



# pointer-events: none; sẽ cản sự kiện của 1 thẻ. VD ứng dụng navigation bar đang ở tab .active thì ấn vào sẽ k load lại chính trang hiện tại nữa có thể dùng.



# Setup dự án:
Dùng bundler chuẩn: vite tự setup
Dùng bundler tự động: parcel cài nhẹ cái là xong nếu dự án k dùng gì phức tạp. Hỗ trợ livereload, build và start ở 1 port, cài package npm và import vào file js cho dự án html thuần ok
Dùng HTML thuần với live server
Dùng html thuần nhưng tự cài node_modules: npm i mọi thứ vào đó rồi tự quản lý version, tự import vào dự án, vẫn dùng live server bth.



# Dùng relative color
-> Basic
:root {
  --clr-primary-rgb: 255 120 0;
  --clr-primary: rgb(var(--clr-primary-rgb));

  --clr-secondary-rgb: 0 255 25;
  --clr-secondary: rgb(var(--clr-primary-rgb));
}
Dùng đổi opacity:
background: rgb(var(-clr-primary-rgb) / .5);

-> Cách trên phức tạp, tạo 2 biến cho mỗi màu. Có thể dùng from tạo màu từ 1 màu khác và custom:
hsl(from #ff0000 / 0.5); => giảm opacity đi 0.5
hsl(from red h s calc(l - 20) / 0.5); => lấy màu đỏ và giảm light đi 20
hsl(from var(--clr-primary) h s 20%); => đổi rgb sang hsl, sau đó map thông số h và s, còn light set là 20%
rgb(from #ffff r g g / 0.5); => tương tự nhưng lấy màu green làm màu blue
oklch(from red calc(l * .5) calc(c * .1) h / 0.5); => oklch() là hàm tạo màu như lch() nhưng màu sắc cân bằng hơn. lightness, chroma (như saturation), hue.



# Bind chia được tham số kiểu này
function greet(greeting, punctuation) {
    console.log(greeting + ', ' + this.name + punctuation);
}
const person = { name: 'John' };
const greetPerson = greet.bind(person, 'Hello');
greetPerson('!');



# Private custom variables trong css
Thiết kế css var cho dự án lớn: dùng fallback var + kế thừa css var, đảm bảo css var được đinh nghĩa trong 1 scope tối ưu
VD: 
<div class="container">
  <div class="hello">
    <button>Hello</button>
    <p>Hello</p>
  </div>
  <div class="hi">
    <button>Hi</button>
    <p>Hi</p>
  </div>
  <div class="bye">
    <button>Bye</button>
    <p>Bye</p>
  </div>
</div>

-> Ngu:
.hello button {
  color: red;
}
.hello p {
  box-shadow: 1px 1px 1px red;
}
.hi button {
  color: blue;
}
.hi p {
  box-shadow: 1px 1px 1px yellow;
}
.bye .button {
  color: green;
}
.bye p {
  box-shadow: 1px 1px 1px red;
}

-> Dùng private custom variables tự định nghĩa với dấu _ ở dưới. 
.container {
  --_shadow: var(--shadow, red);
  --_color--text: var(--color, var(--color-text, red));
}
.container button {
  color: var(--_color--text);
}
.container p {
  box-shadow: 1px 1px 1px var(--_shadow);
}
.hi {
  --_shadow: yellow;
  --_color--text: blue;
}
.bye {
  --_color--text: green;
}
=> :root có thể list hàng loạt các variables làm style chung và chỉ cần sửa trong đó để tạo các theme khác nhau. Nếu k định nghĩa tự dùng fallback cho các private custom var. Đảm bảo tính kế thừa từ cao xuống
=> Các private var k ảnh hưởng tới scope khác. Nhìn custom var, ta hiểu ngay là đổi trong container của phần đó, thay vì tìm trên root, root chỉ đinh nghĩa các biến base
=> Giảm bớt số lượng selector. VD muốn đổi màu button trong bye thì đổi ngay css var của .bye thay vì viết selector ".bye button"

->***Bản chất: Css var thường dùng khi ta có các style phụ thuộc vào nhau, sau này muốn đổi sẽ phải đổi tất cả. Thay vì vậy sẽ gom vào 1 biến css và relative tói nó để đổi.
Trừ @media và @container mới fix cứng vì k dùng được css var, đồng nghĩa đổi chỗ khác cũng phải đổi nó



# Responsive chuẩn với grid layout + @container query
Dùng grid layout hoặc flex để chia bố cục, dùng kèm @container query để style các items
VD: 1 grid hiện nhiều cards. Khi 1 hàng hiện càng ít thẻ thì card có ảnh sẽ mang style thay đổi 
.grid-auto-fit {
  display: grid;
  gap: 1rem;
  grid-template-columns: repeat(auto-fit, minmax(min(30ch, 100%), 1fr));
  container: grid-auto-fit / inline-size;
}
.card:has(> img) {
  // Giả sử mỗi card dài 30ch
  // Khi tăng lên 2 card 1 hàng, thẻ chứa ảnh chiếm cả 1 hàng
  @container grid-auto-fit (inline-size > calc(30ch * 2 + 1rem)) {
    grid-column: span 2;

    display: grid;
    grid-template-columns: subgrid;
    gap: 0;

    > img {
      grid-column: 2;
      grid-row: 1 / 4;
    }
  }

  // Khi tăng lên 4 card 1 hàng, thẻ chứa ảnh chiếm 2 hàng 2 cột
  @container grid-auto-fit (inline-size > calc(30ch * 4 + 3rem)) {
    grid-column: span 2;
    grid-row: span 2;
    > :not(img) {
      grid-column: 1 / -1;
    }
    > img {
      grid-column: 1 / -1;
      grid-row: 1;
    }
  }
}



# Dùng css @scope và @layer
Specifility: @layer > @scope > thứ tự định nghĩa trong css

-> CSS rule mặc định theo thứ tự đinh nghĩa trong css. @scope khiến cho nó theo thứ tự nested tag trong html. VD:
// index.html
<div class="container">
  <p class="text">Hello <button class="xxx">Button</button></p>
</div>
// index.css
.text p { color: red; }
.container p { color: white; }
=> Chữ sẽ là màu trắng vì 2 class cùng specifility sẽ theo thứ tự đinh nghĩa

@scope sẽ lấy css lên dần các thẻ cha cho đến khi gặp @scope gần nhất, gắp text thì k theo container nữa
@scope (.text) to (button.xxx) {
  :scope { } // tương đương với & { }
  p { color: red; }
  button { color: yellow; }
}
.container p { color: white; }
.container button { color: black; }
=> Giả sử ở đây ta muốn @scope k ảnh hưởng tới các button ở trong mà mang class xxx và các tag trong button đó

VD: @scope (.text) to (button.xxx, a, p[class]) { 
  // Code css
} 
=> tag nằm trong .text sẽ ưu tiên mang code css đó hơn ưu tiên hơn bth, nhưng nếu tag có dạng selector là button.xxx or a or p[class] sẽ inherrit, tức mang specifility thấp, chỉ dùng giá trị đó nếu bên ngoài k set style gì cho thẻ đó.

--> VD :scope dùng y như & được
@scope (article) to (> figure) {} => áp dụng cho con của article, trừ con trực tiếp là tag figure
@scope (article) to (aside :scope) {} => áp dụng nếu article là con của aside

--> Dùng trong HTML tag: k cần định nghĩa scope cho thẻ nào, tự hiểu là dùng cho thẻ bao sát thẻ style chứa nó, ở đây là @scope (article) { }
<article>
  <style>
    @scope {
      & {
        color: red;
      }
    }
  </style>
  <p>Affected tag</p>
</article>
<article>
  <p>Not affected</p>
</article>

-> Specifility (0,1,1) theo thứ tự là: 
Số ID selector
Số class / pseudo class / attribute selector 
Số type selector / pseudo elements như :after, :first-letter
=> Thực ra là có 4 giá trị, còn 1 cái inline style mạnh hơn cả id selector css nữa. Chỉ có !important mới mạnh hơn inline style thôi.

Dùng & sẽ tính specifility chuẩn, dùng :scope sẽ coi cả cục :scope như 1 class, không tính các selector trước đó
VD: 
@scope (main .text) to (button.xxx) {
  :scope img { } // (0, 1, 1)
}
@scope (main .text) to (button.xxx) {
  & img { } // (0, 1, 2)
}
=> Vì & coi là thế từ cục trên vào thành "main .text img {}" => luôn dùng & là đc

--> Bản chất specifility => càng specific, càng quan trọng
URL: https://specificity.keegan.st/
Cascade là đinh nghĩa sau sẽ đè lên định nghĩa trước. VD ta link file css sau <style> thì css trong file sẽ đè lên css trong tag <style>. Cascade chỉ đúng khi cùng specifility, nếu khác thì specifility cao hơn ở bên phải qua sẽ override. VD (1,0,0) đè lên (0,1,10)
VD: 2 cái cùng !important thì cái khai báo sau sẽ đè lên trước
=> Nên luôn dùng class, tránh dùng !important, #id, nested selector nhiều nhất có thể

-> Có 3 loại layer theo thứ tự đè nhau: user agent styles -> user styles -> author styles
user agent styles có sẵn style cho các thẻ theo setting kỹ thuật của browser, ta k thể đụng vào. Ta chỉ có thể tác động vào layer cuối là author style.
@layer giúp định nghĩa thêm các layer trong author styles.
Các layer sẽ có specifility độc lập, ngoại trừ 3 layer có sẵn, các layer tự tạo có specifility theo thứ tự định nghĩa. Cái khai báo sau đè cái trước, bất chấp speicifility của các phần tử bên trong.

VD: viết style layer1 -> viết style layer2 -> viết thêm style cho layer1 => style layer2 sẽ đè lên mọi thứ của layer1 vì thứ tự khai báo layer2 sau layer1
VD: @layer framework, reset, base, layout, components; => nhét ở đầu file để khai báo thứ tự, thì khai báo bên dưới thế nào vẫn luôn tuân theo thứ tự này
=> Giải quyết TH khi cần custom style của framework sử dụng nhưng nó specifility k đủ để đổi, buộc phải thêm !important rất dở. Nếu thêm được style của framework vào @layer thì sửa ok
=> !important vẫn đè mọi thứ nhưng khai báo trước ưu tiên hơn khai báo sau, vì nó chạy từ trên xuống thấy important sẽ k cho bất cứ style nào tương tự ở sau đó override cả

-> Code bên ngoài sẽ override code trong custom layer tự tạo ra, vì code bên ngoài thuộc author styles, còn code trong custom layer thuộc 1 layer con của author styles có spec nhỏ hơn
@layer có thể lồng trong @layer khác và quy tắc vẫn tương tự
@layer định nghĩa list thứ tự layer buộc phải để đầu file mới có tác dụng. 

@layer dùng trong scss như bth, cứ cho vào file là compile ra
Nhưng scss dùng @use phải luôn on top nên k thể định nghĩa @layer trước nó được, buộc phải nhét @layer vào 1 file scss riêng rồi @use nó ở đầu để xuất hiện ở đầu
1 case đặc biệt là @import có thể dùng bên trong @layer, nhưng @use thì không. Cách khác là:
@use 'sass:meta';
@layer base, components, utilities;
@layer components {
  @include meta.load-css('components'); // Thế cho @use 'components'
}



# Tạo tab html thuần
Trong react SPA thì dễ, trong html css phải tự implement.
- Mỗi tab nên ở cùng pages và k chuyển pages. Vì chỉ đổi tab nhưng mọi phần code html chung lại phải copy ra nhiều file.
Cũng phải lưu lại vị trí scroll với các state data khác vào sessionStorage, trước khi chuyển, và khi page onload phải lấy lại data rất rối.
- 1 cách để chia html ra các file khác nhau khi thay đổi hiển thị là: ta viết index.html chung cho cả page, các phần riêng cứ viết ra file, khi cần hiển thị thì fetch file html đó và thế vào innerHTML
- Đơn giản có thể viết nội dung tab hết 1 file rồi xử lý JS để display none hay hiện ra khi ngừoi dùng ấn vào tab
- Để chuyển tab có thể dùng label checkbox để bắt và hiển thị content bằng HTML CSS thuần, hoặc dùng JS luôn được. Có thể animation content hiện ra ok.
Có thể tạo animation slide từ 2 hướng khi chuyển tab, buộc phải dùng JS khi đó để xác định hướng cho animation, mỗi animation 1 keyframe riêng.
- Có thể dùng window.history.pushState để đổi url mà k chuyển page, kèm xử lý onload. Để khi chuyển page sẽ đổi url, gõ url vào sẽ hiển thị đúng đang là tag nào.

-> Tương tự navigation style cho thẻ đang active thì mỗi page, ta sửa html đi cho nav đó highlight là được.
Dùng kèm view transition api là thành animation đỉnh của chóp



# Dùng @import trong css
@import trong css không sợ bị trùng code vì tuy trùng nhưng css tự có cơ chế override style cái sau đè cái trước. Cần tự code cẩn thận để k import nh lần.
@import của css cũng phải để ở top mới có tác dụng
@import trong css sẽ chạy tuần tự nên làm chậm quá trình tải trang => Do đó khi dev có thể dùng @import, còn production nên dùng bundler gom lại thành 1 file index.css và minify nó chứ k chia ra nhiều file. VD parcel build tự làm luôn
@import url("./2.css") layer(base); => nhét mọi code trong 1 file css nằm trong 1 layer



# Dùng <picture> tự đổi ảnh tùy vào kích thước màn hình mà k cần css hay js



# Dùng type="module" sẽ đổi cách viết JS
Mặc định mọi thứ là toàn cục. Biến ta khai báo ở file JS này sẽ truy cập được ở file js khác miễn là script tới cả 2 file và script file khai báo được load xong trước
type="module" thì biến trong file đó k thể truy cập ở file khác, muốn là gì phải export import => nên luôn dùng type module, chỉ có code kiểu cũ mới k dùng



# Tạo masonry css với grid ok



# Dùng color-mix
color: color-mix(in lab, black, currentColor); => currentColor sẽ lấy thuộc tính color của thẻ hiện tại và ở case này làm tối màu đó đi, k set sẽ lấy theo cha, rồi tạo ra màu này
VD ở light background cần chữ màu tối hơn, dark background cần chữ màu sáng hơn. Dù ta đã set đen trắng cho text rồi nhưng cần text có màu khác. Ta dùng:
color: color-mix(in lab, currentColor, red 70%); => giả sử chữ đỏ sẽ tự có màu đỏ đậm đỏ nhạt tuỳ bg cho đúng

linear-gradient cũng dùng được currentColor, dùng được mọi nơi cho màu



# border-radius short hand nhận 4 giá trị
Thay vì margin: 0 auto; ta dùng margin-inline: auto;
body tự có 100% width, việc set 100vw là thừa và có thể sai vì k tính scrollbar
gap: 1rem 3rem; => vertical 1rem, horizontal 3rem để ý khi dùng flex-wrap



# Dark mode thực tế có sẵn mà k cần phải code thủ công, trừ khi có màu nào phức tạp.
Ta muốn mới vào web sẽ theo setting của browser. Nếu người dùng đổi mode sẽ lấy setting của người dùng. Nếu đã từng set rồi, mà ngừoi dùng đổi mdoe rồi reload, vẫn phải theo cái đã set trong web.

-> Có 2 cách để set theme mode là dùng html { color-scheme: light dark; } tương đương với <meta name="color-scheme" content="light dark"> 
Khi dùng cả 2 giá trị "light dark" như này là theo setting của browser.
Nếu set rõ ràng color-scheme: light; hay color-scheme: dark; sẽ dùng đúng mode đó.

-> style trong @media (prefers-color-scheme: dark) { } sẽ được áp dụng khi settings của browser là dark hoặc color-scheme trên là dark => dùng cái này k ổn vì nếu browser set dark thật thì style bên trong k thể mất, tức đổi sang light éo được. Buộc trong nó lại phải định nghĩa màu của cả 2 mode

-> Mặc định Canvas là màu của background, CanvasText là màu của text tự được thay đổi tuỳ vào mode hiện tại.
VD có thể set trong từng thẻ để bảo 1 thẻ dùng mode nào

-> Để thêm sáng tối cho màu có thể dùng color-mix(in oklab, Canvas 75%, RebeccaPurple);
Hàm light-dark(màu light, màu dark); sẽ trả về màu tương ứng tuỳ vào setting 

-> Nhanh: dùng color-scheme light dark + đổi mode thì thay đổi color-scheme là được + dùng Canvas CanvasText light-dark color-mix, biến css



# CSS sprite animation
Nhét mọi frames vào chung 1 bức ảnh và animate bằng cách hiển thị từng frame
animation-timing-function có hàm step(<số>); sẽ chia đều các khoảng được khai báo thành 1 lượng frame rồi nhảy từng frame
VD: animation: play 1s steps(10) infinite;
@keyframes play {
  0% { background-position: 0 0; }
  10% { background-position: 100px 100px; }
  100% { background-position: 0 0; }
}
=> thì nó sẽ hiển thị background ở các vị trí khác nhau. Từ 0% đến 10% sẽ chia làm 10 frames và hiển thị lần lượt, từ 10% đến 100% lại chia 10 frames và hiển thị lần lượt

Có thể convert gif or video sang sprite image với https://ezgif.com/gif-to-sprite
Có thể lấy hàng loạt ảnh gif trên trang giphy.
Search sprite basic trên trang: https://opengameart.org/
APNG cũng là 1 loại ảnh png nhưng có animated

-> Tại sao k dùng video hay gif mà dùng sprite css animation?
Vì css sprite animation có thể custom play, pause, chạy khi hover or click, kiểm soát frame rate, kết hợp với animation timeline cho scroll animation 
Có thể tạo animation phức tạp như trong game.



# border-bottom là cạnh dưới của phần tử.
border-block-end là cạnh dưới của văn bản trong phần tử, tính thêm cả writing-mode

