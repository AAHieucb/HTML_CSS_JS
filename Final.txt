# Dùng counter-reset hiện số đếm tự tăng k cần JS
URL: https://www.youtube.com/watch?v=PL3Odw-k8W4



# Transform stream
1 loại stream xử lý data, pipe vào các stream khác như bth.

Vd tạo một TransformStream để chuyển đổi văn bản thành chữ hoa trước khi đọc nó thì dùng transform stream ở giữa để viết hoa chữ:
const transformStream = new TransformStream({
  start() {
    // Được gọi khi TransformStream khởi tạo
    console.log('TransformStream bắt đầu.');
  },
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  },
  flush(controller) {
    // Được gọi khi toàn bộ luồng đầu vào đã được xử lý
    console.log('Đã hoàn thành chuyển đổi.');
  }
});
const readableStream = new ReadableStream({
  start(controller) {
    // Đẩy dữ liệu vào luồng
    controller.enqueue('hello');
    controller.enqueue(' world');
    controller.close();
  }
});
// Kết nối ReadableStream với TransformStream và tạo một WritableStream để ghi dữ liệu
readableStream
  .pipeThrough(transformStream) // Chuyển dữ liệu qua TransformStream
  .pipeTo(new WritableStream({
    write(chunk) {
      // Ghi ra phần dữ liệu đã biến đổi
      console.log(chunk);
    },
    close() {
      console.log('Đã ghi xong dữ liệu.');
    }
  }));



# IntersectionObserver
Check khi chiều cao của thẻ hiển thị bao nhiêu phần trăm trên màn hình. Nó chỉ tính phần hiển thị trên màn, tức VD thẻ lớn hơn màn hình thì không bao giờ đạt threshold 100% được.
VD có 1 element cực dài và muốn làm kiểu scroll element xuống bao xa thì chạy hàm buộc phải làm thủ công window.onscroll

const handleIntersect = (entries: IntersectionObserverEntry[]) => {
  entries.forEach(entry => {
    const ratio = entry.intersectionRatio;
    console.log(ratio);
  });
};
const observer = new IntersectionObserver(handleIntersect, {
  threshold: [0.25, 0.5, 0.75]
});
observer.observe(ref.current);
observer.unobserve(ref.current);



# Setup dự án:
Dùng bundler chuẩn: vite tự setup
Dùng bundler tự động: parcel cài nhẹ cái là xong nếu dự án k dùng gì phức tạp. Hỗ trợ livereload, build và start ở 1 port, cài package npm và import vào file js cho dự án html thuần ok
Dùng HTML thuần với live server
Dùng html thuần nhưng tự cài node_modules: npm i mọi thứ vào đó rồi tự quản lý version, tự import vào dự án, vẫn dùng live server bth.



# Dùng relative color
-> Basic
:root {
  --clr-primary-rgb: 255 120 0;
  --clr-primary: rgb(var(--clr-primary-rgb));

  --clr-secondary-rgb: 0 255 25;
  --clr-secondary: rgb(var(--clr-primary-rgb));
}
Dùng đổi opacity:
background: rgb(var(-clr-primary-rgb) / .5);

-> Cách trên phức tạp, tạo 2 biến cho mỗi màu. Có thể dùng from tạo màu từ 1 màu khác và custom:
hsl(from #ff0000 / 0.5); => giảm opacity đi 0.5
hsl(from red h s calc(l - 20) / 0.5); => lấy màu đỏ và giảm light đi 20
hsl(from var(--clr-primary) h s 20%); => đổi rgb sang hsl, sau đó map thông số h và s, còn light set là 20%
rgb(from #ffff r g g / 0.5); => tương tự nhưng lấy màu green làm màu blue
oklch(from red calc(l * .5) calc(c * .1) h / 0.5); => oklch() là hàm tạo màu như lch() nhưng màu sắc cân bằng hơn. lightness, chroma (như saturation), hue.

-> Dùng color-mix
color: color-mix(in lab, black, currentColor); => currentColor sẽ lấy thuộc tính color của thẻ hiện tại và ở case này làm tối màu đó đi, k set sẽ lấy theo cha, rồi tạo ra màu này
VD ở light background cần chữ màu tối hơn, dark background cần chữ màu sáng hơn. Dù ta đã set đen trắng cho text rồi nhưng cần text có màu khác. Ta dùng:
color: color-mix(in lab, currentColor, red 70%); => giả sử chữ đỏ sẽ tự có màu đỏ đậm đỏ nhạt tuỳ bg cho đúng

linear-gradient cũng dùng được currentColor, dùng được mọi nơi cho màu



# Bind chia được tham số kiểu này
function greet(greeting, punctuation) {
    console.log(greeting + ', ' + this.name + punctuation);
}
const person = { name: 'John' };
const greetPerson = greet.bind(person, 'Hello');
greetPerson('!');



# Private custom variables trong css
Thiết kế css var cho dự án lớn: dùng fallback var + kế thừa css var, đảm bảo css var được đinh nghĩa trong 1 scope tối ưu
VD: 
<div class="container">
  <div class="hello">
    <button>Hello</button>
    <p>Hello</p>
  </div>
  <div class="hi">
    <button>Hi</button>
    <p>Hi</p>
  </div>
  <div class="bye">
    <button>Bye</button>
    <p>Bye</p>
  </div>
</div>

-> Ngu:
.hello button {
  color: red;
}
.hello p {
  box-shadow: 1px 1px 1px red;
}
.hi button {
  color: blue;
}
.hi p {
  box-shadow: 1px 1px 1px yellow;
}
.bye .button {
  color: green;
}
.bye p {
  box-shadow: 1px 1px 1px red;
}

-> Dùng private custom variables tự định nghĩa với dấu _ ở dưới. 
.container {
  --_shadow: var(--shadow, red);
  --_color--text: var(--color, var(--color-text, red));
}
.container button {
  color: var(--_color--text);
}
.container p {
  box-shadow: 1px 1px 1px var(--_shadow);
}
.hi {
  --_shadow: yellow;
  --_color--text: blue;
}
.bye {
  --_color--text: green;
}
=> :root có thể list hàng loạt các variables làm style chung và chỉ cần sửa trong đó để tạo các theme khác nhau. Nếu k định nghĩa tự dùng fallback cho các private custom var. Đảm bảo tính kế thừa từ cao xuống
=> Các private var k ảnh hưởng tới scope khác. Nhìn custom var, ta hiểu ngay là đổi trong container của phần đó, thay vì tìm trên root, root chỉ đinh nghĩa các biến base
=> Giảm bớt số lượng selector. VD muốn đổi màu button trong bye thì đổi ngay css var của .bye thay vì viết selector ".bye button"

->***Bản chất: Css var thường dùng khi ta có các style phụ thuộc vào nhau, sau này muốn đổi sẽ phải đổi tất cả. Thay vì vậy sẽ gom vào 1 biến css và relative tói nó để đổi.
Trừ @media và @container mới fix cứng vì k dùng được css var, đồng nghĩa đổi chỗ khác cũng phải đổi nó



# Dùng css @scope và @layer
Specifility: @layer > @scope > thứ tự định nghĩa trong css

-> CSS rule mặc định theo thứ tự đinh nghĩa trong css. @scope khiến cho nó theo thứ tự nested tag trong html. VD:
// index.html
<div class="container">
  <p class="text">Hello <button class="xxx">Button</button></p>
</div>
// index.css
.text p { color: red; }
.container p { color: white; }
=> Chữ sẽ là màu trắng vì 2 class cùng specifility sẽ theo thứ tự đinh nghĩa

@scope sẽ lấy css lên dần các thẻ cha cho đến khi gặp @scope gần nhất, gắp text thì k theo container nữa
@scope (.text) to (button.xxx) {
  :scope { } // tương đương với & { }
  p { color: red; }
  button { color: yellow; }
}
.container p { color: white; }
.container button { color: black; }
=> Giả sử ở đây ta muốn @scope k ảnh hưởng tới các button ở trong mà mang class xxx và các tag trong button đó

VD: @scope (.text) to (button.xxx, a, p[class]) { 
  // Code css
} 
=> tag nằm trong .text sẽ ưu tiên mang code css đó hơn ưu tiên hơn bth, nhưng nếu tag có dạng selector là button.xxx or a or p[class] sẽ inherrit, tức mang specifility thấp, chỉ dùng giá trị đó nếu bên ngoài k set style gì cho thẻ đó.

--> VD :scope dùng y như & được
@scope (article) to (> figure) {} => áp dụng cho con của article, trừ con trực tiếp là tag figure
@scope (article) to (aside :scope) {} => áp dụng nếu article là con của aside

--> Dùng trong HTML tag: k cần định nghĩa scope cho thẻ nào, tự hiểu là dùng cho thẻ bao sát thẻ style chứa nó, ở đây là @scope (article) { }
<article>
  <style>
    @scope {
      & {
        color: red;
      }
    }
  </style>
  <p>Affected tag</p>
</article>
<article>
  <p>Not affected</p>
</article>

-> Specifility (0,1,1) theo thứ tự là: 
Số ID selector
Số class / pseudo class / attribute selector 
Số type selector / pseudo elements như :after, :first-letter
=> Thực ra là có 4 giá trị, còn 1 cái inline style mạnh hơn cả id selector css nữa. Chỉ có !important mới mạnh hơn inline style thôi.

Dùng & sẽ tính specifility chuẩn, dùng :scope sẽ coi cả cục :scope như 1 class, không tính các selector trước đó
VD: 
@scope (main .text) to (button.xxx) {
  :scope img { } // (0, 1, 1)
}
@scope (main .text) to (button.xxx) {
  & img { } // (0, 1, 2)
}
=> Vì & coi là thế từ cục trên vào thành "main .text img {}" => luôn dùng & là đc

VD: @scope (.parent) to (.content) {
  /* Styles written here will only affect .parent but skip .content*/
}

--> Bản chất specifility => càng specific, càng quan trọng
URL: https://specificity.keegan.st/
Cascade là đinh nghĩa sau sẽ đè lên định nghĩa trước. VD ta link file css sau <style> thì css trong file sẽ đè lên css trong tag <style>. Cascade chỉ đúng khi cùng specifility, nếu khác thì specifility cao hơn ở bên phải qua sẽ override. VD (1,0,0) đè lên (0,1,10)
VD: 2 cái cùng !important thì cái khai báo sau sẽ đè lên trước
=> Nên luôn dùng class, tránh dùng !important, #id, nested selector nhiều nhất có thể

-> Có 3 loại layer theo thứ tự đè nhau: user agent styles -> user styles -> author styles
user agent styles có sẵn style cho các thẻ theo setting kỹ thuật của browser, ta k thể đụng vào. Ta chỉ có thể tác động vào layer cuối là author style.
@layer giúp định nghĩa thêm các layer trong author styles.
Các layer sẽ có specifility độc lập, ngoại trừ 3 layer có sẵn, các layer tự tạo có specifility theo thứ tự định nghĩa. Cái khai báo sau đè cái trước, bất chấp speicifility của các phần tử bên trong.

VD: viết style layer1 -> viết style layer2 -> viết thêm style cho layer1 => style layer2 sẽ đè lên mọi thứ của layer1 vì thứ tự khai báo layer2 sau layer1
VD: @layer framework, reset, base, layout, components; => nhét ở đầu file để khai báo thứ tự, thì khai báo bên dưới thế nào vẫn luôn tuân theo thứ tự này
=> Giải quyết TH khi cần custom style của framework sử dụng nhưng nó specifility k đủ để đổi, buộc phải thêm !important rất dở. Nếu thêm được style của framework vào @layer thì sửa ok
=> !important vẫn đè mọi thứ nhưng khai báo trước ưu tiên hơn khai báo sau, vì nó chạy từ trên xuống thấy important sẽ k cho bất cứ style nào tương tự ở sau đó override cả

-> Code bên ngoài sẽ override code trong custom layer tự tạo ra, vì code bên ngoài thuộc author styles, còn code trong custom layer thuộc 1 layer con của author styles có spec nhỏ hơn
@layer có thể lồng trong @layer khác và quy tắc vẫn tương tự
@layer định nghĩa list thứ tự layer buộc phải để đầu file mới có tác dụng. 

@layer dùng trong scss như bth, cứ cho vào file là compile ra
Nhưng scss dùng @use phải luôn on top nên k thể định nghĩa @layer trước nó được, buộc phải nhét @layer vào 1 file scss riêng rồi @use nó ở đầu để xuất hiện ở đầu
1 case đặc biệt là @import có thể dùng bên trong @layer, nhưng @use thì không. Cách khác là:
@use 'sass:meta';
@layer base, components, utilities;
@layer components {
  @include meta.load-css('components'); // Thế cho @use 'components'
}



# Dùng @import trong css
@import trong css không sợ bị trùng code vì tuy trùng nhưng css tự có cơ chế override style cái sau đè cái trước. Cần tự code cẩn thận để k import nh lần.
@import của css cũng phải để ở top mới có tác dụng
@import trong css sẽ chạy tuần tự nên làm chậm quá trình tải trang => Do đó khi dev có thể dùng @import, còn production nên dùng bundler gom lại thành 1 file index.css và minify nó chứ k chia ra nhiều file. VD parcel build tự làm luôn
@import url("./2.css") layer(base); => nhét mọi code trong 1 file css nằm trong 1 layer



# Dùng type="module" sẽ đổi cách viết JS
Mặc định mọi thứ là toàn cục. Biến ta khai báo ở file JS này sẽ truy cập được ở file js khác miễn là script tới cả 2 file và script file khai báo được load xong trước
type="module" thì biến trong file đó k thể truy cập ở file khác, muốn là gì phải export import => nên luôn dùng type module, chỉ có code kiểu cũ mới k dùng



# border-radius short hand nhận 4 giá trị
Thay vì margin: 0 auto; ta dùng margin-inline: auto;
body tự có 100% width, việc set 100vw là thừa và có thể sai vì k tính scrollbar
gap: 1rem 3rem; => vertical 1rem, horizontal 3rem để ý khi dùng flex-wrap
border-bottom là cạnh dưới của phần tử.
border-block-end là cạnh dưới của văn bản trong phần tử, tính thêm cả writing-mode



# Dark mode thực tế có sẵn mà k cần phải code thủ công, trừ khi có màu nào phức tạp.
Ta muốn mới vào web sẽ theo setting của browser. Nếu người dùng đổi mode sẽ lấy setting của người dùng. Nếu đã từng set rồi, mà ngừoi dùng đổi mdoe rồi reload, vẫn phải theo cái đã set trong web.

-> Có 2 cách để set theme mode là dùng html { color-scheme: light dark; } tương đương với <meta name="color-scheme" content="light dark"> 
Khi dùng cả 2 giá trị "light dark" như này là theo setting của browser.
Nếu set rõ ràng color-scheme: light; hay color-scheme: dark; sẽ dùng đúng mode đó.

-> style trong @media (prefers-color-scheme: dark) { } sẽ được áp dụng khi settings của browser là dark hoặc color-scheme trên là dark => dùng cái này k ổn vì nếu browser set dark thật thì style bên trong k thể mất, tức đổi sang light éo được. Buộc trong nó lại phải định nghĩa màu của cả 2 mode

-> Mặc định Canvas là màu của background, CanvasText là màu của text tự được thay đổi tuỳ vào mode hiện tại.
VD có thể set trong từng thẻ để bảo 1 thẻ dùng mode nào

-> Để thêm sáng tối cho màu có thể dùng color-mix(in oklab, Canvas 75%, RebeccaPurple);
Hàm light-dark(màu light, màu dark); sẽ trả về màu tương ứng tuỳ vào setting 

-> Nhanh: dùng color-scheme light dark + đổi mode thì thay đổi color-scheme là được + dùng Canvas CanvasText light-dark color-mix, biến css



# Đỉnh cao, dùng conic gradient tạo hình zigzag 
.loader {
  height: 47px; /* control the size */
  aspect-ratio: 5;
  background:
    conic-gradient(from 135deg at top,#000 90deg,#0000 0) top,
    conic-gradient(from 135deg at top,#0000 90deg,#000 0) bottom;
  background-size: 20% 50%;
  background-repeat: repeat-x;
}



# Tạo tab a11y
Dùng thẻ a, k dùng button
Nếu single page, dùng <a href="#idofelement"/>
Thay vì add event click vào từng thẻ, ta chỉ cần add vào thẻ container sẽ tự phát khi các phần bên trong bị click

-> Dán nhãn cho phần tử giúp tăng accessiblity của web, nhất là với các thẻ k có text mô tả mà chỉ có icon. Giúp link các thẻ có quan hệ lại giữa id và aria-labeledby
Dùng với aria-label được: <button aria-label="Tìm kiếm">
Dùng với aria-labeledby khi cần 1 hoặc nhiều thẻ khác làm nhãn cho thẻ hiện tại. VD:
<p id="label1">Giỏ hàng:</p>
<p id="label2">Bạn có 3 sản phẩm.</p>
<div role="region" aria-labelledby="label1 label2">
  <!-- Nội dung khu vực -->
</div>

Dùng cách thuộc tính aria, đảm bảo khi ấn nút tab và mũi tên có thể navigate được chứ bth chỉ ấn mỗi nút tab được.
Cách dùng aria cho tabs: https://www.w3.org/WAI/ARIA/apg/patterns/tabs/

role="tablist", role="presentation", tabindex, role="tab", role="tabpanel"
Thuộc tính role sẽ loại bỏ ý nghĩa senmatic của thẻ, VD role="presentation" cho thẻ li chỉ định rằng phần tử có mục đích trình bày (decorative), không mang ý nghĩa semantic hay chức năng trong ngữ cảnh hiện tại, khiến cho thẻ li không còn biểu hiện cho list nữa, thẻ sẽ bị bỏ qua trong accessibility tree, công cụ hỗ trợ screen reader không đọc hoặc thông báo về nó.

Mặc định ấn key tab sẽ navigate qua mọi thẻ a trên page. Nếu dùng tabindex="-1" cho 1 thẻ sẽ bị bỏ qua khi nhảy tab. Nếu dùng tabindex="0" cho các thẻ khác như div thì nó sẽ nhảy vào cả các thẻ đó. Điều này tiện cho việc ấn key tab vào 1 tab, và ấn key tab tiếp sẽ vào content của tab kể cả div đó chứ k nhảy qua
Set bằng JS, ta cho mọi tab k active có tabindex="-1", tab đang active và nội dùng của nó có tabindex="0"

Thuộc tính hidden k chỉ ẩn thẻ đi mà cũng ẩn nó khỏi accessibility tree, tương tự display none. Còn visibility: hidden chỉ ẩn trên UI mà k ẩn trên accessibility tree. 
VD dùng display none xong aria-hidden="false" sẽ ẩn khỏi UI nhưng accessibility tree vẫn còn.

aria-selected="true" bảo screen reader biết hiện đang ở tab nào, nó cũng tác động vào style tag nào là tag đang được chọn

aria-controls k nên dùng, nếu muốn thêm thông tin mô tả cho tab thì có thể dùng: aria-describedby="idofelement" và dùng 1 thẻ <div id="idofelement" hidden></div> để thêm nếu cần. Nội dung của thuộc tính này được sử dụng khi ngừoi dùng vào tab đó và screen reader đọc nó lên cho ngừoi dùng nghe.

Ấn key left right để switch tab thì phải tự custom tạo hàm riêng thao tác với DOM thôi. Bắt sự kiện keydown.
Điều đặc biệt là khi ta add event keydown cho tabContainer thì chỉ khi ấn tab focus vào tabContainer thì keydown của nó mới bắt chứ ngoài màn hình gõ sẽ k ảnh hưởng

-> text-decoration-thickness, text-underline-offset 
style dựa vào các thuộc tính aria, mà các thuộc tính aria set vào bằng JS. Nên nếu k có js, sẽ k có style gì cả. Ta đảm bảo chỉ style khi js được enabled, progressive enhancement.

-> offsetWidth, offsetLeft là kích thước và vị trí của thẻ so với thẻ cha của nó

-> Tạo tab html thuần
Trong react SPA thì dễ, trong html css phải tự implement.
- Mỗi tab nên ở cùng pages và k chuyển pages. Vì chỉ đổi tab nhưng mọi phần code html chung lại phải copy ra nhiều file.
Cũng phải lưu lại vị trí scroll với các state data khác vào sessionStorage, trước khi chuyển, và khi page onload phải lấy lại data rất rối.
- 1 cách để chia html ra các file khác nhau khi thay đổi hiển thị là: ta viết index.html chung cho cả page, các phần riêng cứ viết ra file, khi cần hiển thị thì fetch file html đó và thế vào innerHTML
- Đơn giản có thể viết nội dung tab hết 1 file rồi xử lý JS để display none hay hiện ra khi ngừoi dùng ấn vào tab
- Để chuyển tab có thể dùng label checkbox để bắt và hiển thị content bằng HTML CSS thuần, hoặc dùng JS luôn được. Có thể animation content hiện ra ok.
Có thể tạo animation slide từ 2 hướng khi chuyển tab, buộc phải dùng JS khi đó để xác định hướng cho animation, mỗi animation 1 keyframe riêng.
- Có thể dùng window.history.pushState để đổi url mà k chuyển page, kèm xử lý onload. Để khi chuyển page sẽ đổi url, gõ url vào sẽ hiển thị đúng đang là tag nào.

-> Tương tự navigation style cho thẻ đang active thì mỗi page, ta sửa html đi cho nav đó highlight là được.
Dùng kèm view transition api là thành animation đỉnh của chóp

-> Nhanh chỉ cần set: aria-label, aria-labelledby, aria-describedby, aria-hidden, aria-selected, aria-controls, aria-current, aria-autocomplete, title, alt, role, aria-expanded
aria-controls xác định quan hệ điều khiển, phần tử này điều khiển phần tử khác. Vd 1 button điều khiển dialog, menu, tab panel. Dùng label for để toggle thì k cần
Icon thì nên có aria-hidden hoặc mô tả bằng aria label cho tag bao nó



# Tự tạo dialog css thuần hiện ra
Để tạo tính năng click ra ngoài thì ẩn dialog, có thể bắt sự kiện click global rồi check target được click k chứa dialog thì close dialog.
1 cách khác là phủ 1 thẻ màu tối toàn màn hình rồi đè dialog lên. Click vào dialog thì k sao nhưng click vào thẻ đó bên ngoài sẽ close dialog

-> Mở dialog thì cản scroll: 
3 vấn đề: Vị trí scroll phải giữ nguyên khi tắt dialog đi; content k bị di chuyển khi mở và đóng dialog; Hoạt động trên cả mobile.
VD1: html:has(dialog[open]){
  overflow: hidden;
  padding-right: 15px;
}
=> Giải quyết vấn đề 2 nhưng 1 thì vẫn mất vị trí scroll, trên safari iOS vẫn bị lỗi content dịch chuyển
=> padding-right bằng kích thước scrollbar, default là 15px nhưng nên set width ::-webkit-scrollbar để đảm bảo cũng bằng kích thước 15px + phải set scrollbar luôn luôn chiếm kích thước mới được
VD2: html:has(dialog[open]){
  position: fixed;
}
=> Tương tự nhưng giải quyết được safari iOS + scrollbar có hay k đều chạy ngon. Nhưng vẫn bị 1 vấn đề là mất vị trí scroll
=> Cách này tối ưu nên dùng khi dialog hiển thị khi scrollbar ở trên cùng hoặc k có
VD3: Dùng JS để đóng dialog thì set position fixed như VD2, nhưng lưu vị trí scroll lại để scroll jump tới là được.

-> Scrollbar hiển thị tối ưu là: khi k overflow thì k hiện scrollbar nhưng scrollbar vẫn chiếm kích thước bth; khi overflow thì hiện scrollbar bth; scrollbar thực tế sẽ ẩn đi và chỉ hiện khi hover vào hoặc khi scroll, đồng thời background transparent chỉ hiện mỗi thumb;

Nếu muốn scrollbar luôn hiện "overflow: scroll;"
Nếu muốn scrollbar luôn chiếm kích thước dù hiện hay k "scrollbar-gutter: stable" => Điều đb là nó bằng đúng kích thước width set của ::-webkit-scrollbar
=> Ta nên dùng overflow scroll + custom cái scrollbar track là transparent sẽ tốt hơn scrollbar-gutter vì position fixed sẽ khiến scrollbar-gutter k chiếm nx



# How to design website
https://teleporthq.io/ai-website-builder => AI giúp thiết kế website basic
Hocoos AI Website Builder => AI cực mạnh tạo website và có code luôn, có hosting luôn, multiple pages
Leia AI website builder => AI tạo website, k có code, hosting luôn
Pineapple AI => AI tạo website và hosting, k có code, nhưng free plan chỉ tạo được 1 
KLeap AI Website Builder => AI tạo website, k có code, có hsosting, tạo responsive mobile luôn

Cắp ý tưởng trên figma hoặc các trang web đã có, nhưng website thiết kế ra phải đảm bảo có 1 theme đồng bộ giữa các pages. Có tool chuyển website to figma.
Tuân thủ color rules

-> Exp: Phần header phải dóng được xuống phía content bên dưới, hoặc content ngay bên dưới là fullscreen, nếu không sẽ rất xấu. Tương tự các section cần align theo chiều dọc bằng nhau
Hero section: Chữ nên được tương phản với ảnh background và có kích thước vị trí nổi bật, có thể phóng to thu nhỏ từng phần, uppercase chữ nổi bật, cho núp sau ảnh object. Ảnh nên được upscale rõ, ít khi cho tối hay mờ đi, có thể dùng gradient nếu cần nổi bật chữ
Navigation: text navigation và logo nên cùng màu, logo nên gọn gàng vào
Các phần phải đồng bộ nhau. VD trang có 3 cái header thì cả 3 nên có cùng 1 style
Cân bằng giữa lượng ảnh và text, k nên để text dài cả 1 dòng, nếu buộc có đoạn văn dài thì nên chia ra nhiều paragraphs nhỏ thôi, nên vắn tắt ít chữ nhất có thể
Nếu có nhiều card đi kèm nhau, các card nên có cùng size, k nên cái cao cái thấp. Tạo độ tương phản cho heading text và details text bằng color, fontsize, fontweight
Button trong card thường đồng bộ và nằm ở 1 phía, k chiếm full kích thước

-> AI giúp design component như figma: https://www.youtube.com/watch?v=iSReYz7B4i0
URL: https://creatie.ai/files/home


