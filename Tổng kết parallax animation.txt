# Basic parallax
-> Parallax với JS khi các object chuyển động dị dạng khi scroll, font chữ và box tăng to nhỏ, đi ngang
- Làm sao để các thẻ đè lên nhau, phần text bị ảnh che qua? Dùng grid-template-areas mọi thẻ cùng 1 grid-area hoặc position absolute thì thẻ sau đè thẻ trước.
- Làm sao các thẻ di chuyển theo các hướng khác nhau khi scroll? Dùng JS thay đổi 1 biến --scroll và style css theo biến đó là tốt nhất.
Để di chuyển hướng khác dùng style transform + position absolute là được.

1 công thức duy nhất: https://css-tricks.com/books/greatest-css-tricks/scroll-animation/
window.addEventListener('scroll', () => { document.body.style.setProperty('--scroll', window.pageYOffset / (document.body.offsetHeight - window.innerHeight)) }, false);
--> Trong react có react-scroll-parallax cơ chế y hệt giúp parallax như v.

--> Cơ chế scroll thì thẻ đi ngang, đến 1 mốc thì đi như bth: cho thẻ position fixed ở cuối màn hình, scroll thì translateX thẻ đó đi ngang và 1 thẻ space height cao để scroll

-> Parallax theo scroll mà không cần JS với animation-timeline: scroll();

-> Parallax di chuột thì card chuyển động nghiêng theo
Cơ chế cũng chỉ là xđ vị trí chuột clientX clientY bằng JS và :hover thẻ nào thì nghiêng thẻ đó. Các thuộc tính css giúp nghiêng thẻ là rotateX, rotateY, scale3d, rotate3d
--> react-next-tilt là 1 thư viện giúp nghiêng thẻ theo chuột => thay bằng react-next-parallax kế thừa từ react-next-tilt nhưng tốt hơn 
Chỉ cần bao bằng thẻ <Parallax> của thư viện là tự có hiệu ứng.
Dùng astro: thư viện giống react-next-tilt nhưng dùng rất dễ, có mỗi 1 component, docs có mỗi 1 trang duy nhất và dùng cho react ok

-> Hoán đổi khoảng: (scrollVar - oldMin) * newRange / oldRange + newMin 
VD: calc(-1% * (max(var(--scroll), 25) - 25) * 100 / 75) => Để convert 1 giá trị sang 1 đơn vị khác, ta dùng phép nhân. VD 1vw*var(--value) là ta đang convert sang value vw 



# Dùng css thuần animation-timeline tạo parallax
VD: https://www.youtube.com/watch?v=d10GaL6F-lA
Tut URL: https://www.youtube.com/watch?v=UmzFk68Bwdk

Nếu k hoạt động thì thêm polyfill cdn cho scroll-timeline ok hoặc check với @support

-> animation-timeline: scroll() chạy animation khi scroll từ top tới bottom.
scroll(x/inline) là khi scroll ngang (default), scroll(y/block) là scroll dọc.
scroll thực tế check thẻ gần nó nhất mà bị scroll thì chạy animation theo nên nếu thẻ này trong 1 thẻ khác bị scroll sẽ animation theo thẻ đó, để effect chỉ chạy với scroll ngoài cùng ta dùng scroll(root). Dùng kết hợp với overflow hidden ở thẻ con 

-> animation-timeline: view() chạy animation khi thẻ đi từ vị trí nào đến vị trí nào của view
animation-range giúp kiểm soát điểm bắt đầu và start của timeline, default animation bắt đầu khi nó mới vào viewport và kết thúc khi nó hiện đầy đủ trong view port
VD Tạo thanh loading ngang khi scroll bằng css thuần quá đỉnh với animation-timeline scroll(block):

-> Check nếu set reduced motion trong OS để giảm animation thì nên tắt animation này đi, nên wrap lại trong @media:
@media (prefers-reduced-motion: no-preference) {
  .... animation css
}
Để bật chế độ này: mở devtool -> ctrl shift p -> reduced motion. Khi đó đoạn code animation css sẽ chạy

-> Tư duy nhanh hiểu cái timeline là mặc định theo thời gian. Còn scroll là theo vị trí scroll trên màn. Còn view là khi view được 1 object thể nào trên screen. Nó chỉ đơn giản là set giá trị timeline khi nào nên chạy animation phụ thuộc vào cj thôi.



# Animation Draggable
-> draggable attribute có sẵn trong html tag, có thểm làm với html css js thuần

-> Thư viện react draggable: dnd-kit/core => best lib => ref tới trava lending pool
react-beautiful-dnd => lib đơn giản hơn
react-grid-layout
framer-motion => basic



# Other
-> Full Project unplash figma framermotion parallax: https://www.youtube.com/watch?v=29UWA-GdA7k
useScroll, useTransform của framer motion rất mạnh có thể dùng cho parallax thay thế các thư viện khác mà k cần đổi css var

-> Full prj parallax pvới photoshop: https://www.youtube.com/watch?v=Yo3j_Dx4u7c

Cơ chế để move chuột thì các thẻ di chuyển full màn như v thì ảnh phải to hơn màn hình, khi ta di chuột thì transform các ảnh layer với tốc độ khác nhau.
https://cubic-bezier.com/ => url cho hàm transition dạng cubic tạo hiệu ứng từ nhanh sang chậm dần

Để khiến nó realistic hơn, ta cần move nó cả trục z: Để move trục z, ta phải dùng translateZ(10px) nhưng nó chỉ hoạt động khi dùng kèm, hàm perspective(2300px). 
VD: transform: translateX(...) translateY(...) perspective(2300px) translateZ(1000px); Tương tự dùng cả rotateY cho thẻ nữa

Để khiến nó responsive: Ta cho thẻ main bao tất cả với overflow hidden
Nhưng khi màn hình mobile quá nhỏ, các bức ảnh mà theo phân trăm width sẽ bị nhỏ quá mà height của điện thoại lớn hơn width. Ta cần ảnh to ra theo height thì hãy dùng @media, xóa hết width về initial, set kích thước theo height là đươc.

Tạo animation khi vào page lần đầu thì reveal: Lúc page mới được load, ta chỉ cần apply animation cho nó luôn là được. Trước tiên cần đảm bảo là pages load xong hết tài nguyên, sau đó setup vị trí start, vị trí cuối cùng là web bình thường và cho chạy animation.
Cần đảm bảo khi load lần đầu tiên, mọi actions và animation khác đều k được thực hiện như mouse k thể bấm. Di chuột thì thoải mái

-> Tạo infinite horizontal scroll: https://www.youtube.com/watch?v=iLmBy-HKIAw
Giải pháp là dùng gấp 2 thẻ html và align animation hoàn hảo cho lần jump ở giữa với translate calc(50% - 0.5rem) = calc(50% - gap/2)

-> Stack card dính ở top khi scroll
Cho chúng position sticky và set top-padding cho từng card chênh nhau 1 khoảng theo index là xong.


